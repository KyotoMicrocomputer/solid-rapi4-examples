var searchIndex = JSON.parse('{\
"bcm2711_pac":{"doc":"bcm2711_pac","tn":["0","MemoryField","Vpa","ap804","aux","borrow","borrow","borrow_mut","borrow_mut","bsc","clone","clone","cmp","default","dmac","eq","fmt","fmt","from","from","from","get","gpio","hash","into","into","mbox","modify","ne","new","partial_cmp","pcm","pl011","pwm","set","spi","sys_timer","to_arm_pa","try_from","try_from","try_into","try_into","type_id","type_id","value","write","BASE","CONTROL","IRQCNTL","MSKIRQ","PREDIV","RAWIRQ","Registers","borrow","borrow_mut","control","freecnt","from","into","irqcntl","load","mskirq","prediv","rawirq","reload","try_from","try_into","type_id","value","DBGHALT","DBGHALT","DIV","DIV","ENABLE","ENABLE","ENAFREE","ENAFREE","FREEDIV","FREEDIV","IE","IE","Register","_32BIT","_32BIT","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","Halt","Halt","KeepRunning","KeepRunning","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","DivideBy1","DivideBy1","DivideBy16","DivideBy16","DivideBy256","DivideBy256","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","Disable","Disable","Enable","Enable","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","Disable","Disable","Enable","Enable","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","Disable","Disable","Enable","Enable","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","SixteenBitCounters","SixteenBitCounters","ThirtyTwoBitCounter","ThirtyTwoBitCounter","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","INT","INT","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","Clear","Clear","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","INT","INT","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","PREDIV","PREDIV","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","INT","INT","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","AUX_ENABLES","AUX_IRQ","AUX_MU_BAUD_REG","AUX_MU_CNTL_REG","AUX_MU_IER_REG","AUX_MU_IIR_REG","AUX_MU_IO_REG","AUX_MU_LCR_REG","AUX_MU_LSR_REG","AUX_MU_MCR_REG","AUX_MU_MSR_REG","AUX_MU_SCRATCH","AUX_MU_STAT_REG","AUX_SPI_CNTL0_REG","AUX_SPI_CNTL1_REG","AUX_SPI_DATA","AUX_SPI_STAT_REG","BASE","MiniUartRegisters","Registers","SpiRegisters","aux_enables","aux_irq","aux_mu","aux_spi1","aux_spi2","baud_reg","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cntl0_reg","cntl1_reg","cntl_reg","from","from","from","ier_reg","iir_reg","into","into","into","io_reg","io_rega","io_regb","io_regc","io_regd","lcr_reg","lsr_reg","mcr_reg","msr_reg","peek_reg","scratch","stat_reg","stat_reg","try_from","try_from","try_from","try_into","try_into","try_into","txhold_rega","txhold_regb","txhold_regc","txhold_regd","type_id","type_id","type_id","MINI_UART_ENABLE","MINI_UART_ENABLE","Register","SPI1_ENABLE","SPI1_ENABLE","SPI2_ENABLE","SPI2_ENABLE","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","MINI_UART_IRQ","MINI_UART_IRQ","Register","SPI1_IRQ","SPI1_IRQ","SPI2_IRQ","SPI2_IRQ","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","BAUDRATE","BAUDRATE","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CTS_AFC","CTS_AFC","CTS_AFC_POLARITY","CTS_AFC_POLARITY","RTS_AFC","RTS_AFC","RTS_AFC_LEVEL","RTS_AFC_LEVEL","RTS_AFC_POLARITY","RTS_AFC_POLARITY","RX_ENABLE","RX_ENABLE","Register","TX_ENABLE","TX_ENABLE","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","Four","Four","One","One","SET","Three","Three","Two","Two","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","BAUDRATE_HI","BAUDRATE_HI","RX_INT_ENABLE","RX_INT_ENABLE","Register","TX_INT_ENABLE","TX_INT_ENABLE","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","INT_PENDING","INT_PENDING","RX_INT_PENDING_FIFO_CLEAR","RX_INT_PENDING_FIFO_CLEAR","Register","TX_INT_PENDING_FIFO_CLEAR","TX_INT_PENDING_FIFO_CLEAR","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","BAUDRATE_LO","BAUDRATE_LO","RX_DATA","RX_DATA","Register","TX_DATA","TX_DATA","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","BREAK","BREAK","DATA_SIZE","DATA_SIZE","DLAB","DLAB","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","EightBits","EightBits","SET","SevenBits","SevenBits","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","Normal","Normal","RouteToBaudrateReg","RouteToBaudrateReg","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","DATA_READY","DATA_READY","RX_OVERRUN","RX_OVERRUN","Register","TX_EMPTY","TX_EMPTY","TX_IDLE","TX_IDLE","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","RTS","RTS","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","High","High","Low","Low","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CTS","CTS","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","High","High","Low","Low","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","Register","SCRATCH","SCRATCH","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CTS","CTS","RTS","RTS","RX_FIFO_LEVEL","RX_FIFO_LEVEL","RX_IDLE","RX_IDLE","RX_NOT_EMPTY","RX_NOT_EMPTY","RX_OVERRUN","RX_OVERRUN","Register","TX_DONE","TX_DONE","TX_EMPTY","TX_EMPTY","TX_FIFO_LEVEL","TX_FIFO_LEVEL","TX_FULL","TX_FULL","TX_IDLE","TX_IDLE","TX_NOT_FULL","TX_NOT_FULL","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR_FIFO","CLEAR_FIFO","CLK_POLARITY","CLK_POLARITY","CS","CS","DOUT_HOLD_TIME","DOUT_HOLD_TIME","ENABLE","ENABLE","IN_EDGE","IN_EDGE","OUT_EDGE","OUT_EDGE","POST_INPUT","POST_INPUT","Register","SHIFT_LEN","SHIFT_LEN","SHIFT_OUT_DIR","SHIFT_OUT_DIR","SPEED","SPEED","VARIABLE_CS","VARIABLE_CS","VARIABLE_WIDTH","VARIABLE_WIDTH","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","IdleHigh","IdleHigh","IdleLow","IdleLow","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","Four","Four","One","One","SET","Seven","Seven","Value","Zero","Zero","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","FallingEdge","FallingEdge","RisingEdge","RisingEdge","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","FallingEdge","FallingEdge","RisingEdge","RisingEdge","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","LsbFirst","LsbFirst","MsbFirst","MsbFirst","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CS_HIGH_TIME","CS_HIGH_TIME","DONE_IRQ","DONE_IRQ","KEEP_INPUT","KEEP_INPUT","Register","SHIFT_IN_DIR","SHIFT_IN_DIR","TX_EMPTY_IRQ","TX_EMPTY_IRQ","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","LsbFirst","LsbFirst","MsbFirst","MsbFirst","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","DATA","DATA","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","BIT_COUNT","BIT_COUNT","BUSY","BUSY","RX_EMPTY","RX_EMPTY","RX_FIFO_LEVEL","RX_FIFO_LEVEL","RX_FULL","RX_FULL","Register","TX_EMPTY","TX_EMPTY","TX_FIFO_LEVEL","TX_FIFO_LEVEL","TX_FULL","TX_FULL","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","A","BASE_BSC0","BASE_BSC1","BASE_BSC3","BASE_BSC4","BASE_BSC5","BASE_BSC6","C","CLKT","DEL","DIV","DLEN","FIFO","Registers","S","a","borrow","borrow_mut","c","clkt","del","div","dlen","fifo","from","into","s","try_from","try_into","type_id","ADDR","ADDR","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","CLEAR","I2CEN","I2CEN","INTD","INTD","INTR","INTR","INTT","INTT","READ","READ","Register","ST","ST","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","Clear","Clear","NoAction","NoAction","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","Read","Read","SET","Value","Write","Write","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","NoAction","NoAction","SET","StartNewTransfer","StartNewTransfer","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","Register","TOUT","TOUT","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","FEDL","FEDL","REDL","REDL","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CDIV","CDIV","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","DLEN","DLEN","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","DATA","DATA","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLKT","CLKT","DONE","DONE","ERR","ERR","RXD","RXD","RXF","RXF","RXR","RXR","Register","TA","TA","TXD","TXD","TXE","TXE","TXW","TXW","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","BASE_DMA0","COUNT","DMA4_CS","DMA4_DEBUG","DMA4_DEBUG2","DMA4_DESTI","DMA4_LEN","DMA4_SRCI","DMA4_TI","DMA_CS","DMA_DEBUG","DMA_LITE_CS","DMA_LITE_DEBUG","DMA_LITE_TI","DMA_LITE_TXFR_LEN","DMA_STRIDE","DMA_TI","DMA_TXFR_LEN","Dma0Registers","Dma4Cb","Dma4Registers","DmaCb","DmaLiteCb","DmaLiteRegisters","DmaRegisters","ENABLE","INT_STATUS","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cb","clone","clone","clone","conblk_ad","conblk_ad","cs","cs","cs","debug","debug","debug","debug2","default","default","default","dest","dest","dest_ad","dest_ad","dest_ad","dest_ad","desti","desti","dma0","dma0","dma1","dma10","dma11","dma11","dma12","dma13","dma14","dma2","dma3","dma4","dma5","dma6","dma7","dma7","dma8","dma9","enable","fmt","fmt","fmt","from","from","from","from","from","from","from","int_status","into","into","into","into","into","into","into","len","len","next_cb","next_cb","nextconbk","nextconbk","nextconbk","nextconbk","reserved","reserved","reserved0","reserved1","source_ad","source_ad","source_ad","source_ad","src","src","srci","srci","stride","stride","ti","ti","ti","ti","ti","ti","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","txfr_len","txfr_len","txfr_len","txfr_len","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ABORT","ABORT","ACTIVE","ACTIVE","DISDEBUG","DISDEBUG","DMA_BUSY","DMA_BUSY","DREQ","DREQ","DREQ_STOPS_DMA","DREQ_STOPS_DMA","END","END","ERROR","ERROR","INT","INT","OUTSTANDING_TRANSACTIONS","OUTSTANDING_TRANSACTIONS","PANIC_QOS","PANIC_QOS","QOS","QOS","RD_PAUSED","RD_PAUSED","Register","WAITING_FOR_OUTSTANDING_WRITES","WAITING_FOR_OUTSTANDING_WRITES","WAIT_FOR_OUTSTANDING_WRITES","WAIT_FOR_OUTSTANDING_WRITES","WR_PAUSED","WR_PAUSED","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","ABORT_ON_ERROR","ABORT_ON_ERROR","DISABLE_CLK_GATE","DISABLE_CLK_GATE","FIFO_ERROR","FIFO_ERROR","HALT_ON_ERROR","HALT_ON_ERROR","ID","ID","INT_ON_ERROR","INT_ON_ERROR","READ_CB_ERROR","READ_CB_ERROR","READ_ERROR","READ_ERROR","RESET","RESET","R_STATE","R_STATE","Register","VERSION","VERSION","WRITE_ERROR","WRITE_ERROR","W_STATE","W_STATE","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","OUTSTANDING_READS","OUTSTANDING_READS","OUTSTANDING_WRITES","OUTSTANDING_WRITES","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","Calc","Calc","Idle","Idle","Read4k","Read4k","ReadFifoFull","ReadFifoFull","Reading","Reading","SET","Value","WaitCbData","WaitCbData","WaitWriteComplete","WaitWriteComplete","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","Calc","Calc","Idle","Idle","Preload","Preload","ReadFifoEmpty","ReadFifoEmpty","SET","Value","WaitOutstanding","WaitOutstanding","Write4k","Write4k","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","LENGTH","LENGTH","Register","XLENGTH","XLENGTH","YLENGTH","YLENGTH","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","ADDR","ADDR","BURST_LENGTH","BURST_LENGTH","IGNORE","IGNORE","INC","INC","Register","SIZE","SIZE","STRIDE","STRIDE","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","OneHundredAndTwentyEight","OneHundredAndTwentyEight","SET","SixtyFour","SixtyFour","ThirtyTwo","ThirtyTwo","TwoHundredsAndFiftySix","TwoHundredsAndFiftySix","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","D_DREQ","D_DREQ","D_WAITS","D_WAITS","INTEN","INTEN","PERMAP","PERMAP","Register","S_DREQ","S_DREQ","S_WAITS","S_WAITS","TDMODE","TDMODE","WAIT_RD_RESP","WAIT_RD_RESP","WAIT_RESP","WAIT_RESP","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","Linear","Linear","SET","TwoD","TwoD","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","ABORT","ABORT","ACTIVE","ACTIVE","DISDEBUG","DISDEBUG","DREQ","DREQ","DREQ_STOPS_DMA","DREQ_STOPS_DMA","END","END","ERROR","ERROR","INT","INT","PANIC_PRIORITY","PANIC_PRIORITY","PAUSED","PAUSED","PRIORITY","PRIORITY","RESET","RESET","Register","WAITING_FOR_OUTSTANDING_WRITES","WAITING_FOR_OUTSTANDING_WRITES","WAIT_FOR_OUTSTANDING_WRITES","WAIT_FOR_OUTSTANDING_WRITES","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","DMA_ID","DMA_ID","DMA_STATE","DMA_STATE","FIFO_ERROR","FIFO_ERROR","LITE","LITE","OUTSTANDING_WRITES","OUTSTANDING_WRITES","READ_ERROR","READ_ERROR","READ_LAST_NOT_SET_ERROR","READ_LAST_NOT_SET_ERROR","Register","VERSION","VERSION","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","BURST_LENGTH","BURST_LENGTH","DEST_DREQ","DEST_DREQ","DEST_INC","DEST_INC","DEST_WIDTH","DEST_WIDTH","INTEN","INTEN","PERMAP","PERMAP","Register","SRC_DREQ","SRC_DREQ","SRC_INC","SRC_INC","SRC_WIDTH","SRC_WIDTH","WAITS","WAITS","WAIT_RESP","WAIT_RESP","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","OneHundredAndTwentyEightBits","OneHundredAndTwentyEightBits","SET","ThirtyTwoBits","ThirtyTwoBits","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","OneHundredAndTwentyEightBits","OneHundredAndTwentyEightBits","SET","ThirtyTwoBits","ThirtyTwoBits","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","LENGTH","LENGTH","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","D_STRIDE","D_STRIDE","Register","S_STRIDE","S_STRIDE","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","BURST_LENGTH","BURST_LENGTH","DEST_DREQ","DEST_DREQ","DEST_IGNORE","DEST_IGNORE","DEST_INC","DEST_INC","DEST_WIDTH","DEST_WIDTH","INTEN","INTEN","NO_WIDE_BURSTS","NO_WIDE_BURSTS","PERMAP","PERMAP","Register","SRC_DREQ","SRC_DREQ","SRC_IGNORE","SRC_IGNORE","SRC_INC","SRC_INC","SRC_WIDTH","SRC_WIDTH","TDMODE","TDMODE","WAITS","WAITS","WAIT_RESP","WAIT_RESP","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","OneHundredAndTwentyEightBits","OneHundredAndTwentyEightBits","SET","ThirtyTwoBits","ThirtyTwoBits","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","OneHundredAndTwentyEightBits","OneHundredAndTwentyEightBits","SET","ThirtyTwoBits","ThirtyTwoBits","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","Linear","Linear","SET","TwoD","TwoD","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","LENGTH","LENGTH","Register","XLENGTH","XLENGTH","YLENGTH","YLENGTH","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","EN","PAGE","PAGE","PAGELITE","PAGELITE","Register","borrow","borrow_mut","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","INT","Register","borrow","borrow_mut","from","into","try_from","try_into","type_id","BASE","GPAFEN","GPAREN","GPCLR","GPEDS","GPFEN","GPFSEL","GPHEN","GPLEN","GPLEV","GPREN","GPSET","Registers","borrow","borrow_mut","from","gpafen","gparen","gpclr","gpeds","gpfen","gpfsel","gphen","gpio_pup_pdn_cntrl_reg","gplen","gplev","gpren","gpset","into","pin_generic","try_from","try_into","type_id","PINS_PER_REGISTER","Register","borrow","borrow_mut","clear","from","into","pin","try_from","try_into","type_id","ALT0","ALT1","ALT2","ALT3","ALT4","ALT5","INPUT","OUTPUT","PINS_PER_REGISTER","Register","borrow","borrow_mut","from","into","pin","try_from","try_into","type_id","PINS_PER_REGISTER","Register","borrow","borrow_mut","from","into","pin","set","try_from","try_into","type_id","PINS_PER_REGISTER","Register","borrow","borrow_mut","from","into","pin","try_from","try_into","type_id","BASE_ARM_PA","Registers","borrow","borrow_mut","from","into","mbox_clr","mbox_set","try_from","try_into","type_id","BASE","CS_A","DREQ_A","FIFO_A","GRAY","INTEN_A","INTSTC_A","MODE_A","RXC_A","Registers","TXC_A","borrow","borrow_mut","cs_a","dreq_a","fifo_a","from","gray","inten_a","into","intstc_a","mode_a","rxc_a","try_from","try_into","txc_a","type_id","DMAEN","DMAEN","EN","EN","RXCLR","RXCLR","RXD","RXD","RXERR","RXERR","RXF","RXF","RXON","RXON","RXR","RXR","RXSEX","RXSEX","RXSYNC","RXSYNC","RXTHR","RXTHR","Register","SYNC","SYNC","TXCLR","TXCLR","TXD","TXD","TXE","TXE","TXERR","TXERR","TXON","TXON","TXSYNC","TXSYNC","TXTHR","TXTHR","TXW","TXW","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","Full","Full","OneQuarterFull","OneQuarterFull","OneSample","OneSample","SET","ThreeQuartersFull","ThreeQuartersFull","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","Empty","Empty","FullButOneSample","FullButOneSample","OneQuarterFull","OneQuarterFull","SET","ThreeQuartersFull","ThreeQuartersFull","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","RX_PANIC","RX_PANIC","RX_REQ","RX_REQ","Register","TX_PANIC","TX_PANIC","TX_REQ","TX_REQ","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","FIFO","FIFO","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLR","CLR","FLUSH","FLUSH","FLUSHED","FLUSHED","RXFIFOLEVEL","RXFIFOLEVEL","RXLEVEL","RXLEVEL","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","RXERR","RXERR","RXR","RXR","Register","TXERR","TXERR","TXW","TXW","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLKI","CLKI","CLKM","CLKM","CLK_DIS","CLK_DIS","FLEN","FLEN","FRXP","FRXP","FSI","FSI","FSLEN","FSLEN","FSM","FSM","FTXP","FTXP","PDME","PDME","PDMN","PDMN","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","Master","Master","SET","Slave","Slave","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","Packed16x2","Packed16x2","SET","Unpacked","Unpacked","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","Master","Master","SET","Slave","Slave","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","Packed16x2","Packed16x2","SET","Unpacked","Unpacked","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","Pcm","Pcm","Pdm","Pdm","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Sixteen","Sixteen","ThirtyTwo","ThirtyTwo","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CH1EN","CH1EN","CH1POS","CH1POS","CH1WEX","CH1WEX","CH1WID","CH1WID","CH2EN","CH2EN","CH2POS","CH2POS","CH2WEX","CH2WEX","CH2WID","CH2WID","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","BASE_UART0","BASE_UART2","BASE_UART3","BASE_UART4","BASE_UART5","CR","DMACR","DR","FBRD","FR","IBRD","ICR","IFLS","IMSC","ITCR","ITIP","ITOP","LCRH","MIS","RIS","RSRECR","Registers","TDR","borrow","borrow_mut","cr","dmacr","dr","fbrd","fr","from","ibrd","icr","ifls","imsc","into","itcr","itip","itop","lcrh","mis","ris","rsrecr","tdr","try_from","try_into","type_id","CTSEN","CTSEN","DTR","DTR","LBE","LBE","OUT1","OUT1","OUT2","OUT2","RTS","RTS","RTSEN","RTSEN","RXE","RXE","Register","SIREN","SIREN","SIRLP","SIRLP","TXE","TXE","UARTEN","UARTEN","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","DMAONERR","DMAONERR","RXDMAE","RXDMAE","Register","TXDMAE","TXDMAE","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","BE","BE","DATA","DATA","FE","FE","OE","OE","PE","PE","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","FBRD","FBRD","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","BUSY","BUSY","CTS","CTS","DCD","DCD","DSR","DSR","RI","RI","RXFE","RXFE","RXFF","RXFF","Register","TXFE","TXFE","TXFF","TXFF","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","IBRD","IBRD","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","BEIC","BEIC","CTSMIC","CTSMIC","DCDMIC","DCDMIC","DSRMIC","DSRMIC","FEIC","FEIC","OEIC","OEIC","PEIC","PEIC","RIMIC","RIMIC","RTIC","RTIC","RXIC","RXIC","Register","TXIC","TXIC","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","RXIFLSEL","RXIFLSEL","RXIFPSEL","RXIFPSEL","Register","TXIFLSEL","TXIFLSEL","TXIFPSEL","TXIFPSEL","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","OneEighth","OneEighth","OneHalf","OneHalf","OneQuarter","OneQuarter","SET","SevenEighths","SevenEighths","ThreeQuarters","ThreeQuarters","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","OneEighth","OneEighth","OneHalf","OneHalf","OneQuarter","OneQuarter","SET","SevenEighths","SevenEighths","ThreeQuarters","ThreeQuarters","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","BEIM","BEIM","CTSMIM","CTSMIM","DCDMIM","DCDMIM","DSRMIM","DSRMIM","FEIM","FEIM","OEIM","OEIM","PEIM","PEIM","RIMIM","RIMIM","RTIM","RTIM","RXIM","RXIM","Register","TXIM","TXIM","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","ITCR0","ITCR0","ITCR1","ITCR1","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","ITIP0","ITIP0","ITIP3","ITIP3","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","ITOP0","ITOP0","ITOP10","ITOP10","ITOP11","ITOP11","ITOP3","ITOP3","ITOP6","ITOP6","ITOP7","ITOP7","ITOP8","ITOP8","ITOP9","ITOP9","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","BRK","BRK","EPS","EPS","FEN","FEN","PEN","PEN","Register","SPS","SPS","STP2","STP2","WLEN","WLEN","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","Even","Even","Odd","Odd","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","EightBits","EightBits","FiveBits","FiveBits","SET","SevenBits","SevenBits","SixBits","SixBits","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","BEMIS","BEMIS","CTSMMIS","CTSMMIS","DCDMMIS","DCDMMIS","DSRMMIS","DSRMMIS","FEMIS","FEMIS","OEMIS","OEMIS","PEMIS","PEMIS","RIMMIS","RIMMIS","RTMIS","RTMIS","RXMIS","RXMIS","Register","TXMIS","TXMIS","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","BERIS","BERIS","CTSRMIS","CTSRMIS","DCDRMIS","DCDRMIS","DSRRMIS","DSRRMIS","FERIS","FERIS","OERIS","OERIS","PERIS","PERIS","RIRMIS","RIRMIS","RTRIS","RTRIS","RXRIS","RXRIS","Register","TXRIS","TXRIS","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","BE","BE","FE","FE","OE","OE","PE","PE","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","Register","TDR10_0","TDR10_0","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","BASE_PWM0","BASE_PWM1","CTL","DMAC","Registers","STA","borrow","borrow_mut","ctl","dat1","dat2","dmac","fif1","from","into","rng1","rng2","sta","try_from","try_into","type_id","CLRF","CLRF","MODE1","MODE1","MODE2","MODE2","MSEN1","MSEN1","MSEN2","MSEN2","POLA1","POLA1","POLA2","POLA2","PWEN1","PWEN1","PWEN2","PWEN2","RPTL1","RPTL1","RPTL2","RPTL2","Register","SBIT1","SBIT1","SBIT2","SBIT2","USEF1","USEF1","USEF2","USEF2","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","Pwm","Pwm","SET","Serialiser","Serialiser","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","Pwm","Pwm","SET","Serialiser","Serialiser","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","Ms","Ms","Pwm","Pwm","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","Ms","Ms","Pwm","Pwm","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","ActiveHigh","ActiveHigh","ActiveLow","ActiveLow","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","ActiveHigh","ActiveHigh","ActiveLow","ActiveLow","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","DREQ","DREQ","ENAB","ENAB","PANIC","PANIC","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","BERR","BERR","EMPT1","EMPT1","FULL1","FULL1","GAPO1","GAPO1","GAPO2","GAPO2","RERR1","RERR1","Register","STA1","STA1","STA2","STA2","WERR1","WERR1","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","BASE_SPI0","BASE_SPI3","BASE_SPI4","BASE_SPI5","BASE_SPI6","CLK","CS","DC","DLEN","FIFO","LTOH","Registers","borrow","borrow_mut","clk","cs","dc","dlen","fifo","from","into","ltoh","try_from","try_into","type_id","CDIV","CDIV","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","ADCS","ADCS","CLEAR_RX","CLEAR_RX","CLEAR_TX","CLEAR_TX","CPHA","CPHA","CPOL","CPOL","CS","CS","CSPOL","CSPOL","CSPOL0","CSPOL0","CSPOL1","CSPOL1","CSPOL2","CSPOL2","DMAEN","DMAEN","DMA_LEN","DMA_LEN","DONE","DONE","INTD","INTD","INTR","INTR","LEN","LEN","LEN_LONG","LEN_LONG","LMONO","LMONO","REN","REN","RXD","RXD","RXF","RXF","RXR","RXR","Register","TA","TA","TE_EN","TE_EN","TXD","TXD","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","FirstSclkTransitionAtBeginningOFDataBit","FirstSclkTransitionAtBeginningOFDataBit","FirstSclkTransitionAtMiddleOfDataBit","FirstSclkTransitionAtMiddleOfDataBit","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","RestStateIsHigh","RestStateIsHigh","RestStateIsLow","RestStateIsLow","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","ChipSelect0","ChipSelect0","ChipSelect1","ChipSelect1","ChipSelect2","ChipSelect2","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","ActiveHigh","ActiveHigh","ActiveLow","ActiveLow","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","ActiveHigh","ActiveHigh","ActiveLow","ActiveLow","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","ActiveHigh","ActiveHigh","ActiveLow","ActiveLow","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","ActiveHigh","ActiveHigh","ActiveLow","ActiveLow","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","Lossi","Lossi","SET","Spi","Spi","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","RDREQ","RDREQ","RPANIC","RPANIC","Register","TDREQ","TDREQ","TPANIC","TPANIC","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","LEN","LEN","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","DATA","DATA","Register","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","Register","TOH","TOH","borrow","borrow_mut","clone","from","into","try_from","try_into","type_id","CLEAR","SET","Value","borrow","borrow_mut","from","into","try_from","try_from","try_into","type_id","BASE","CS","Registers","borrow","borrow_mut","c","chi","clo","cs","from","into","try_from","try_into","type_id","M","M_clear","Register","borrow","borrow_mut","from","into","try_from","try_into","type_id"],"q":["bcm2711_pac","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::ap804","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::ap804::CONTROL","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::ap804::CONTROL::DBGHALT","","","","","","","","","","","","","","","bcm2711_pac::ap804::CONTROL::DIV","","","","","","","","","","","","","","","","","bcm2711_pac::ap804::CONTROL::ENABLE","","","","","","","","","","","","","","","bcm2711_pac::ap804::CONTROL::ENAFREE","","","","","","","","","","","","","","","bcm2711_pac::ap804::CONTROL::FREEDIV","","","","","","","","","","","bcm2711_pac::ap804::CONTROL::IE","","","","","","","","","","","","","","","bcm2711_pac::ap804::CONTROL::_32BIT","","","","","","","","","","","","","","","bcm2711_pac::ap804::IRQCNTL","","","","","","","","","","","bcm2711_pac::ap804::IRQCNTL::INT","","","","","","","","","","","","","bcm2711_pac::ap804::MSKIRQ","","","","","","","","","","","bcm2711_pac::ap804::MSKIRQ::INT","","","","","","","","","","","bcm2711_pac::ap804::PREDIV","","","","","","","","","","","bcm2711_pac::ap804::PREDIV::PREDIV","","","","","","","","","","","bcm2711_pac::ap804::RAWIRQ","","","","","","","","","","","bcm2711_pac::ap804::RAWIRQ::INT","","","","","","","","","","","bcm2711_pac::aux","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::aux::AUX_ENABLES","","","","","","","","","","","","","","","bcm2711_pac::aux::AUX_ENABLES::MINI_UART_ENABLE","","","","","","","","","","","bcm2711_pac::aux::AUX_ENABLES::SPI1_ENABLE","","","","","","","","","","","bcm2711_pac::aux::AUX_ENABLES::SPI2_ENABLE","","","","","","","","","","","bcm2711_pac::aux::AUX_IRQ","","","","","","","","","","","","","","","bcm2711_pac::aux::AUX_IRQ::MINI_UART_IRQ","","","","","","","","","","","bcm2711_pac::aux::AUX_IRQ::SPI1_IRQ","","","","","","","","","","","bcm2711_pac::aux::AUX_IRQ::SPI2_IRQ","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_BAUD_REG","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_BAUD_REG::BAUDRATE","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_CNTL_REG","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_CNTL_REG::CTS_AFC","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_CNTL_REG::CTS_AFC_POLARITY","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_CNTL_REG::RTS_AFC","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_CNTL_REG::RTS_AFC_LEVEL","","","","","","","","","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_CNTL_REG::RTS_AFC_POLARITY","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_CNTL_REG::RX_ENABLE","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_CNTL_REG::TX_ENABLE","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_IER_REG","","","","","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_IER_REG::BAUDRATE_HI","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_IER_REG::RX_INT_ENABLE","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_IER_REG::TX_INT_ENABLE","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_IIR_REG","","","","","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_IIR_REG::INT_PENDING","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_IIR_REG::RX_INT_PENDING_FIFO_CLEAR","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_IIR_REG::TX_INT_PENDING_FIFO_CLEAR","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_IO_REG","","","","","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_IO_REG::BAUDRATE_LO","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_IO_REG::RX_DATA","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_IO_REG::TX_DATA","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_LCR_REG","","","","","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_LCR_REG::BREAK","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_LCR_REG::DATA_SIZE","","","","","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_LCR_REG::DLAB","","","","","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_LSR_REG","","","","","","","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_LSR_REG::DATA_READY","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_LSR_REG::RX_OVERRUN","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_LSR_REG::TX_EMPTY","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_LSR_REG::TX_IDLE","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_MCR_REG","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_MCR_REG::RTS","","","","","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_MSR_REG","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_MSR_REG::CTS","","","","","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_SCRATCH","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_SCRATCH::SCRATCH","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_STAT_REG","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_STAT_REG::CTS","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_STAT_REG::RTS","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_STAT_REG::RX_FIFO_LEVEL","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_STAT_REG::RX_IDLE","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_STAT_REG::RX_NOT_EMPTY","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_STAT_REG::RX_OVERRUN","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_STAT_REG::TX_DONE","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_STAT_REG::TX_EMPTY","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_STAT_REG::TX_FIFO_LEVEL","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_STAT_REG::TX_FULL","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_STAT_REG::TX_IDLE","","","","","","","","","","","bcm2711_pac::aux::AUX_MU_STAT_REG::TX_NOT_FULL","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_CNTL0_REG","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_CNTL0_REG::CLEAR_FIFO","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_CNTL0_REG::CLK_POLARITY","","","","","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_CNTL0_REG::CS","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_CNTL0_REG::DOUT_HOLD_TIME","","","","","","","","","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_CNTL0_REG::ENABLE","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_CNTL0_REG::IN_EDGE","","","","","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_CNTL0_REG::OUT_EDGE","","","","","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_CNTL0_REG::POST_INPUT","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_CNTL0_REG::SHIFT_LEN","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_CNTL0_REG::SHIFT_OUT_DIR","","","","","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_CNTL0_REG::SPEED","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_CNTL0_REG::VARIABLE_CS","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_CNTL0_REG::VARIABLE_WIDTH","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_CNTL1_REG","","","","","","","","","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_CNTL1_REG::CS_HIGH_TIME","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_CNTL1_REG::DONE_IRQ","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_CNTL1_REG::KEEP_INPUT","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_CNTL1_REG::SHIFT_IN_DIR","","","","","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_CNTL1_REG::TX_EMPTY_IRQ","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_DATA","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_DATA::DATA","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_STAT_REG","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_STAT_REG::BIT_COUNT","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_STAT_REG::BUSY","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_STAT_REG::RX_EMPTY","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_STAT_REG::RX_FIFO_LEVEL","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_STAT_REG::RX_FULL","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_STAT_REG::TX_EMPTY","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_STAT_REG::TX_FIFO_LEVEL","","","","","","","","","","","bcm2711_pac::aux::AUX_SPI_STAT_REG::TX_FULL","","","","","","","","","","","bcm2711_pac::bsc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::bsc::A","","","","","","","","","","","bcm2711_pac::bsc::A::ADDR","","","","","","","","","","","bcm2711_pac::bsc::C","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::bsc::C::CLEAR","","","","","","","","","","","","","","","bcm2711_pac::bsc::C::I2CEN","","","","","","","","","","","bcm2711_pac::bsc::C::INTD","","","","","","","","","","","bcm2711_pac::bsc::C::INTR","","","","","","","","","","","bcm2711_pac::bsc::C::INTT","","","","","","","","","","","bcm2711_pac::bsc::C::READ","","","","","","","","","","","","","","","bcm2711_pac::bsc::C::ST","","","","","","","","","","","","","","","bcm2711_pac::bsc::CLKT","","","","","","","","","","","bcm2711_pac::bsc::CLKT::TOUT","","","","","","","","","","","bcm2711_pac::bsc::DEL","","","","","","","","","","","","","bcm2711_pac::bsc::DEL::FEDL","","","","","","","","","","","bcm2711_pac::bsc::DEL::REDL","","","","","","","","","","","bcm2711_pac::bsc::DIV","","","","","","","","","","","bcm2711_pac::bsc::DIV::CDIV","","","","","","","","","","","bcm2711_pac::bsc::DLEN","","","","","","","","","","","bcm2711_pac::bsc::DLEN::DLEN","","","","","","","","","","","bcm2711_pac::bsc::FIFO","","","","","","","","","","","bcm2711_pac::bsc::FIFO::DATA","","","","","","","","","","","bcm2711_pac::bsc::S","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::bsc::S::CLKT","","","","","","","","","","","bcm2711_pac::bsc::S::DONE","","","","","","","","","","","bcm2711_pac::bsc::S::ERR","","","","","","","","","","","bcm2711_pac::bsc::S::RXD","","","","","","","","","","","bcm2711_pac::bsc::S::RXF","","","","","","","","","","","bcm2711_pac::bsc::S::RXR","","","","","","","","","","","bcm2711_pac::bsc::S::TA","","","","","","","","","","","bcm2711_pac::bsc::S::TXD","","","","","","","","","","","bcm2711_pac::bsc::S::TXE","","","","","","","","","","","bcm2711_pac::bsc::S::TXW","","","","","","","","","","","bcm2711_pac::dmac","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::dmac::DMA4_CS","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::dmac::DMA4_CS::ABORT","","","","","","","","","","","bcm2711_pac::dmac::DMA4_CS::ACTIVE","","","","","","","","","","","bcm2711_pac::dmac::DMA4_CS::DISDEBUG","","","","","","","","","","","bcm2711_pac::dmac::DMA4_CS::DMA_BUSY","","","","","","","","","","","bcm2711_pac::dmac::DMA4_CS::DREQ","","","","","","","","","","","bcm2711_pac::dmac::DMA4_CS::DREQ_STOPS_DMA","","","","","","","","","","","bcm2711_pac::dmac::DMA4_CS::END","","","","","","","","","","","bcm2711_pac::dmac::DMA4_CS::ERROR","","","","","","","","","","","bcm2711_pac::dmac::DMA4_CS::INT","","","","","","","","","","","bcm2711_pac::dmac::DMA4_CS::OUTSTANDING_TRANSACTIONS","","","","","","","","","","","bcm2711_pac::dmac::DMA4_CS::PANIC_QOS","","","","","","","","","","","bcm2711_pac::dmac::DMA4_CS::QOS","","","","","","","","","","","bcm2711_pac::dmac::DMA4_CS::RD_PAUSED","","","","","","","","","","","bcm2711_pac::dmac::DMA4_CS::WAITING_FOR_OUTSTANDING_WRITES","","","","","","","","","","","bcm2711_pac::dmac::DMA4_CS::WAIT_FOR_OUTSTANDING_WRITES","","","","","","","","","","","bcm2711_pac::dmac::DMA4_CS::WR_PAUSED","","","","","","","","","","","bcm2711_pac::dmac::DMA4_DEBUG","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::dmac::DMA4_DEBUG2","","","","","","","","","","","","","bcm2711_pac::dmac::DMA4_DEBUG2::OUTSTANDING_READS","","","","","","","","","","","bcm2711_pac::dmac::DMA4_DEBUG2::OUTSTANDING_WRITES","","","","","","","","","","","bcm2711_pac::dmac::DMA4_DEBUG::ABORT_ON_ERROR","","","","","","","","","","","bcm2711_pac::dmac::DMA4_DEBUG::DISABLE_CLK_GATE","","","","","","","","","","","bcm2711_pac::dmac::DMA4_DEBUG::FIFO_ERROR","","","","","","","","","","","bcm2711_pac::dmac::DMA4_DEBUG::HALT_ON_ERROR","","","","","","","","","","","bcm2711_pac::dmac::DMA4_DEBUG::ID","","","","","","","","","","","bcm2711_pac::dmac::DMA4_DEBUG::INT_ON_ERROR","","","","","","","","","","","bcm2711_pac::dmac::DMA4_DEBUG::READ_CB_ERROR","","","","","","","","","","","bcm2711_pac::dmac::DMA4_DEBUG::READ_ERROR","","","","","","","","","","","bcm2711_pac::dmac::DMA4_DEBUG::RESET","","","","","","","","","","","bcm2711_pac::dmac::DMA4_DEBUG::R_STATE","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::dmac::DMA4_DEBUG::VERSION","","","","","","","","","","","bcm2711_pac::dmac::DMA4_DEBUG::WRITE_ERROR","","","","","","","","","","","bcm2711_pac::dmac::DMA4_DEBUG::W_STATE","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::dmac::DMA4_LEN","","","","","","","","","","","","","","","bcm2711_pac::dmac::DMA4_LEN::LENGTH","","","","","","","","","","","bcm2711_pac::dmac::DMA4_LEN::XLENGTH","","","","","","","","","","","bcm2711_pac::dmac::DMA4_LEN::YLENGTH","","","","","","","","","","","bcm2711_pac::dmac::DMA4_SRCI","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::dmac::DMA4_SRCI::ADDR","","","","","","","","","","","bcm2711_pac::dmac::DMA4_SRCI::BURST_LENGTH","","","","","","","","","","","bcm2711_pac::dmac::DMA4_SRCI::IGNORE","","","","","","","","","","","bcm2711_pac::dmac::DMA4_SRCI::INC","","","","","","","","","","","bcm2711_pac::dmac::DMA4_SRCI::SIZE","","","","","","","","","","","","","","","","","","","bcm2711_pac::dmac::DMA4_SRCI::STRIDE","","","","","","","","","","","bcm2711_pac::dmac::DMA4_TI","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::dmac::DMA4_TI::D_DREQ","","","","","","","","","","","bcm2711_pac::dmac::DMA4_TI::D_WAITS","","","","","","","","","","","bcm2711_pac::dmac::DMA4_TI::INTEN","","","","","","","","","","","bcm2711_pac::dmac::DMA4_TI::PERMAP","","","","","","","","","","","bcm2711_pac::dmac::DMA4_TI::S_DREQ","","","","","","","","","","","bcm2711_pac::dmac::DMA4_TI::S_WAITS","","","","","","","","","","","bcm2711_pac::dmac::DMA4_TI::TDMODE","","","","","","","","","","","","","","","bcm2711_pac::dmac::DMA4_TI::WAIT_RD_RESP","","","","","","","","","","","bcm2711_pac::dmac::DMA4_TI::WAIT_RESP","","","","","","","","","","","bcm2711_pac::dmac::DMA_CS","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::dmac::DMA_CS::ABORT","","","","","","","","","","","bcm2711_pac::dmac::DMA_CS::ACTIVE","","","","","","","","","","","bcm2711_pac::dmac::DMA_CS::DISDEBUG","","","","","","","","","","","bcm2711_pac::dmac::DMA_CS::DREQ","","","","","","","","","","","bcm2711_pac::dmac::DMA_CS::DREQ_STOPS_DMA","","","","","","","","","","","bcm2711_pac::dmac::DMA_CS::END","","","","","","","","","","","bcm2711_pac::dmac::DMA_CS::ERROR","","","","","","","","","","","bcm2711_pac::dmac::DMA_CS::INT","","","","","","","","","","","bcm2711_pac::dmac::DMA_CS::PANIC_PRIORITY","","","","","","","","","","","bcm2711_pac::dmac::DMA_CS::PAUSED","","","","","","","","","","","bcm2711_pac::dmac::DMA_CS::PRIORITY","","","","","","","","","","","bcm2711_pac::dmac::DMA_CS::RESET","","","","","","","","","","","bcm2711_pac::dmac::DMA_CS::WAITING_FOR_OUTSTANDING_WRITES","","","","","","","","","","","bcm2711_pac::dmac::DMA_CS::WAIT_FOR_OUTSTANDING_WRITES","","","","","","","","","","","bcm2711_pac::dmac::DMA_DEBUG","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::dmac::DMA_DEBUG::DMA_ID","","","","","","","","","","","bcm2711_pac::dmac::DMA_DEBUG::DMA_STATE","","","","","","","","","","","bcm2711_pac::dmac::DMA_DEBUG::FIFO_ERROR","","","","","","","","","","","bcm2711_pac::dmac::DMA_DEBUG::LITE","","","","","","","","","","","bcm2711_pac::dmac::DMA_DEBUG::OUTSTANDING_WRITES","","","","","","","","","","","bcm2711_pac::dmac::DMA_DEBUG::READ_ERROR","","","","","","","","","","","bcm2711_pac::dmac::DMA_DEBUG::READ_LAST_NOT_SET_ERROR","","","","","","","","","","","bcm2711_pac::dmac::DMA_DEBUG::VERSION","","","","","","","","","","","bcm2711_pac::dmac::DMA_LITE_TI","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::dmac::DMA_LITE_TI::BURST_LENGTH","","","","","","","","","","","bcm2711_pac::dmac::DMA_LITE_TI::DEST_DREQ","","","","","","","","","","","bcm2711_pac::dmac::DMA_LITE_TI::DEST_INC","","","","","","","","","","","bcm2711_pac::dmac::DMA_LITE_TI::DEST_WIDTH","","","","","","","","","","","","","","","bcm2711_pac::dmac::DMA_LITE_TI::INTEN","","","","","","","","","","","bcm2711_pac::dmac::DMA_LITE_TI::PERMAP","","","","","","","","","","","bcm2711_pac::dmac::DMA_LITE_TI::SRC_DREQ","","","","","","","","","","","bcm2711_pac::dmac::DMA_LITE_TI::SRC_INC","","","","","","","","","","","bcm2711_pac::dmac::DMA_LITE_TI::SRC_WIDTH","","","","","","","","","","","","","","","bcm2711_pac::dmac::DMA_LITE_TI::WAITS","","","","","","","","","","","bcm2711_pac::dmac::DMA_LITE_TI::WAIT_RESP","","","","","","","","","","","bcm2711_pac::dmac::DMA_LITE_TXFR_LEN","","","","","","","","","","","bcm2711_pac::dmac::DMA_LITE_TXFR_LEN::LENGTH","","","","","","","","","","","bcm2711_pac::dmac::DMA_STRIDE","","","","","","","","","","","","","bcm2711_pac::dmac::DMA_STRIDE::D_STRIDE","","","","","","","","","","","bcm2711_pac::dmac::DMA_STRIDE::S_STRIDE","","","","","","","","","","","bcm2711_pac::dmac::DMA_TI","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::dmac::DMA_TI::BURST_LENGTH","","","","","","","","","","","bcm2711_pac::dmac::DMA_TI::DEST_DREQ","","","","","","","","","","","bcm2711_pac::dmac::DMA_TI::DEST_IGNORE","","","","","","","","","","","bcm2711_pac::dmac::DMA_TI::DEST_INC","","","","","","","","","","","bcm2711_pac::dmac::DMA_TI::DEST_WIDTH","","","","","","","","","","","","","","","bcm2711_pac::dmac::DMA_TI::INTEN","","","","","","","","","","","bcm2711_pac::dmac::DMA_TI::NO_WIDE_BURSTS","","","","","","","","","","","bcm2711_pac::dmac::DMA_TI::PERMAP","","","","","","","","","","","bcm2711_pac::dmac::DMA_TI::SRC_DREQ","","","","","","","","","","","bcm2711_pac::dmac::DMA_TI::SRC_IGNORE","","","","","","","","","","","bcm2711_pac::dmac::DMA_TI::SRC_INC","","","","","","","","","","","bcm2711_pac::dmac::DMA_TI::SRC_WIDTH","","","","","","","","","","","","","","","bcm2711_pac::dmac::DMA_TI::TDMODE","","","","","","","","","","","","","","","bcm2711_pac::dmac::DMA_TI::WAITS","","","","","","","","","","","bcm2711_pac::dmac::DMA_TI::WAIT_RESP","","","","","","","","","","","bcm2711_pac::dmac::DMA_TXFR_LEN","","","","","","","","","","","","","","","bcm2711_pac::dmac::DMA_TXFR_LEN::LENGTH","","","","","","","","","","","bcm2711_pac::dmac::DMA_TXFR_LEN::XLENGTH","","","","","","","","","","","bcm2711_pac::dmac::DMA_TXFR_LEN::YLENGTH","","","","","","","","","","","bcm2711_pac::dmac::ENABLE","","","","","","","","","","","","","bcm2711_pac::dmac::ENABLE::PAGE","","","","","","","","","","","bcm2711_pac::dmac::ENABLE::PAGELITE","","","","","","","","","","","bcm2711_pac::dmac::INT_STATUS","","","","","","","","","bcm2711_pac::gpio","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::gpio::GPCLR","","","","","","","","","","","bcm2711_pac::gpio::GPFSEL","","","","","","","","","","","","","","","","","","bcm2711_pac::gpio::GPSET","","","","","","","","","","","bcm2711_pac::gpio::pin_generic","","","","","","","","","","bcm2711_pac::mbox","","","","","","","","","","","bcm2711_pac::pcm","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::pcm::CS_A","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::pcm::CS_A::DMAEN","","","","","","","","","","","bcm2711_pac::pcm::CS_A::EN","","","","","","","","","","","bcm2711_pac::pcm::CS_A::RXCLR","","","","","","","","","","","bcm2711_pac::pcm::CS_A::RXD","","","","","","","","","","","bcm2711_pac::pcm::CS_A::RXERR","","","","","","","","","","","bcm2711_pac::pcm::CS_A::RXF","","","","","","","","","","","bcm2711_pac::pcm::CS_A::RXON","","","","","","","","","","","bcm2711_pac::pcm::CS_A::RXR","","","","","","","","","","","bcm2711_pac::pcm::CS_A::RXSEX","","","","","","","","","","","bcm2711_pac::pcm::CS_A::RXSYNC","","","","","","","","","","","bcm2711_pac::pcm::CS_A::RXTHR","","","","","","","","","","","","","","","","","","","bcm2711_pac::pcm::CS_A::SYNC","","","","","","","","","","","bcm2711_pac::pcm::CS_A::TXCLR","","","","","","","","","","","bcm2711_pac::pcm::CS_A::TXD","","","","","","","","","","","bcm2711_pac::pcm::CS_A::TXE","","","","","","","","","","","bcm2711_pac::pcm::CS_A::TXERR","","","","","","","","","","","bcm2711_pac::pcm::CS_A::TXON","","","","","","","","","","","bcm2711_pac::pcm::CS_A::TXSYNC","","","","","","","","","","","bcm2711_pac::pcm::CS_A::TXTHR","","","","","","","","","","","","","","","","","","","bcm2711_pac::pcm::CS_A::TXW","","","","","","","","","","","bcm2711_pac::pcm::DREQ_A","","","","","","","","","","","","","","","","","bcm2711_pac::pcm::DREQ_A::RX_PANIC","","","","","","","","","","","bcm2711_pac::pcm::DREQ_A::RX_REQ","","","","","","","","","","","bcm2711_pac::pcm::DREQ_A::TX_PANIC","","","","","","","","","","","bcm2711_pac::pcm::DREQ_A::TX_REQ","","","","","","","","","","","bcm2711_pac::pcm::FIFO_A","","","","","","","","","","","bcm2711_pac::pcm::FIFO_A::FIFO","","","","","","","","","","","bcm2711_pac::pcm::GRAY","","","","","","","","","","","","","","","","","","","bcm2711_pac::pcm::GRAY::CLR","","","","","","","","","","","bcm2711_pac::pcm::GRAY::FLUSH","","","","","","","","","","","bcm2711_pac::pcm::GRAY::FLUSHED","","","","","","","","","","","bcm2711_pac::pcm::GRAY::RXFIFOLEVEL","","","","","","","","","","","bcm2711_pac::pcm::GRAY::RXLEVEL","","","","","","","","","","","bcm2711_pac::pcm::INTEN_A","","","","","","","","","","","","","","","","","bcm2711_pac::pcm::INTEN_A::RXERR","","","","","","","","","","","bcm2711_pac::pcm::INTEN_A::RXR","","","","","","","","","","","bcm2711_pac::pcm::INTEN_A::TXERR","","","","","","","","","","","bcm2711_pac::pcm::INTEN_A::TXW","","","","","","","","","","","bcm2711_pac::pcm::MODE_A","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::pcm::MODE_A::CLKI","","","","","","","","","","","bcm2711_pac::pcm::MODE_A::CLKM","","","","","","","","","","","","","","","bcm2711_pac::pcm::MODE_A::CLK_DIS","","","","","","","","","","","bcm2711_pac::pcm::MODE_A::FLEN","","","","","","","","","","","bcm2711_pac::pcm::MODE_A::FRXP","","","","","","","","","","","","","","","bcm2711_pac::pcm::MODE_A::FSI","","","","","","","","","","","bcm2711_pac::pcm::MODE_A::FSLEN","","","","","","","","","","","bcm2711_pac::pcm::MODE_A::FSM","","","","","","","","","","","","","","","bcm2711_pac::pcm::MODE_A::FTXP","","","","","","","","","","","","","","","bcm2711_pac::pcm::MODE_A::PDME","","","","","","","","","","","","","","","bcm2711_pac::pcm::MODE_A::PDMN","","","","","","","","","","","","","","","bcm2711_pac::pcm::RXC_A","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::pcm::RXC_A::CH1EN","","","","","","","","","","","bcm2711_pac::pcm::RXC_A::CH1POS","","","","","","","","","","","bcm2711_pac::pcm::RXC_A::CH1WEX","","","","","","","","","","","bcm2711_pac::pcm::RXC_A::CH1WID","","","","","","","","","","","bcm2711_pac::pcm::RXC_A::CH2EN","","","","","","","","","","","bcm2711_pac::pcm::RXC_A::CH2POS","","","","","","","","","","","bcm2711_pac::pcm::RXC_A::CH2WEX","","","","","","","","","","","bcm2711_pac::pcm::RXC_A::CH2WID","","","","","","","","","","","bcm2711_pac::pl011","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::pl011::CR","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::pl011::CR::CTSEN","","","","","","","","","","","bcm2711_pac::pl011::CR::DTR","","","","","","","","","","","bcm2711_pac::pl011::CR::LBE","","","","","","","","","","","bcm2711_pac::pl011::CR::OUT1","","","","","","","","","","","bcm2711_pac::pl011::CR::OUT2","","","","","","","","","","","bcm2711_pac::pl011::CR::RTS","","","","","","","","","","","bcm2711_pac::pl011::CR::RTSEN","","","","","","","","","","","bcm2711_pac::pl011::CR::RXE","","","","","","","","","","","bcm2711_pac::pl011::CR::SIREN","","","","","","","","","","","bcm2711_pac::pl011::CR::SIRLP","","","","","","","","","","","bcm2711_pac::pl011::CR::TXE","","","","","","","","","","","bcm2711_pac::pl011::CR::UARTEN","","","","","","","","","","","bcm2711_pac::pl011::DMACR","","","","","","","","","","","","","","","bcm2711_pac::pl011::DMACR::DMAONERR","","","","","","","","","","","bcm2711_pac::pl011::DMACR::RXDMAE","","","","","","","","","","","bcm2711_pac::pl011::DMACR::TXDMAE","","","","","","","","","","","bcm2711_pac::pl011::DR","","","","","","","","","","","","","","","","","","","bcm2711_pac::pl011::DR::BE","","","","","","","","","","","bcm2711_pac::pl011::DR::DATA","","","","","","","","","","","bcm2711_pac::pl011::DR::FE","","","","","","","","","","","bcm2711_pac::pl011::DR::OE","","","","","","","","","","","bcm2711_pac::pl011::DR::PE","","","","","","","","","","","bcm2711_pac::pl011::FBRD","","","","","","","","","","","bcm2711_pac::pl011::FBRD::FBRD","","","","","","","","","","","bcm2711_pac::pl011::FR","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::pl011::FR::BUSY","","","","","","","","","","","bcm2711_pac::pl011::FR::CTS","","","","","","","","","","","bcm2711_pac::pl011::FR::DCD","","","","","","","","","","","bcm2711_pac::pl011::FR::DSR","","","","","","","","","","","bcm2711_pac::pl011::FR::RI","","","","","","","","","","","bcm2711_pac::pl011::FR::RXFE","","","","","","","","","","","bcm2711_pac::pl011::FR::RXFF","","","","","","","","","","","bcm2711_pac::pl011::FR::TXFE","","","","","","","","","","","bcm2711_pac::pl011::FR::TXFF","","","","","","","","","","","bcm2711_pac::pl011::IBRD","","","","","","","","","","","bcm2711_pac::pl011::IBRD::IBRD","","","","","","","","","","","bcm2711_pac::pl011::ICR","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::pl011::ICR::BEIC","","","","","","","","","","","bcm2711_pac::pl011::ICR::CTSMIC","","","","","","","","","","","bcm2711_pac::pl011::ICR::DCDMIC","","","","","","","","","","","bcm2711_pac::pl011::ICR::DSRMIC","","","","","","","","","","","bcm2711_pac::pl011::ICR::FEIC","","","","","","","","","","","bcm2711_pac::pl011::ICR::OEIC","","","","","","","","","","","bcm2711_pac::pl011::ICR::PEIC","","","","","","","","","","","bcm2711_pac::pl011::ICR::RIMIC","","","","","","","","","","","bcm2711_pac::pl011::ICR::RTIC","","","","","","","","","","","bcm2711_pac::pl011::ICR::RXIC","","","","","","","","","","","bcm2711_pac::pl011::ICR::TXIC","","","","","","","","","","","bcm2711_pac::pl011::IFLS","","","","","","","","","","","","","","","","","bcm2711_pac::pl011::IFLS::RXIFLSEL","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::pl011::IFLS::RXIFPSEL","","","","","","","","","","","bcm2711_pac::pl011::IFLS::TXIFLSEL","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::pl011::IFLS::TXIFPSEL","","","","","","","","","","","bcm2711_pac::pl011::IMSC","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::pl011::IMSC::BEIM","","","","","","","","","","","bcm2711_pac::pl011::IMSC::CTSMIM","","","","","","","","","","","bcm2711_pac::pl011::IMSC::DCDMIM","","","","","","","","","","","bcm2711_pac::pl011::IMSC::DSRMIM","","","","","","","","","","","bcm2711_pac::pl011::IMSC::FEIM","","","","","","","","","","","bcm2711_pac::pl011::IMSC::OEIM","","","","","","","","","","","bcm2711_pac::pl011::IMSC::PEIM","","","","","","","","","","","bcm2711_pac::pl011::IMSC::RIMIM","","","","","","","","","","","bcm2711_pac::pl011::IMSC::RTIM","","","","","","","","","","","bcm2711_pac::pl011::IMSC::RXIM","","","","","","","","","","","bcm2711_pac::pl011::IMSC::TXIM","","","","","","","","","","","bcm2711_pac::pl011::ITCR","","","","","","","","","","","","","bcm2711_pac::pl011::ITCR::ITCR0","","","","","","","","","","","bcm2711_pac::pl011::ITCR::ITCR1","","","","","","","","","","","bcm2711_pac::pl011::ITIP","","","","","","","","","","","","","bcm2711_pac::pl011::ITIP::ITIP0","","","","","","","","","","","bcm2711_pac::pl011::ITIP::ITIP3","","","","","","","","","","","bcm2711_pac::pl011::ITOP","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::pl011::ITOP::ITOP0","","","","","","","","","","","bcm2711_pac::pl011::ITOP::ITOP10","","","","","","","","","","","bcm2711_pac::pl011::ITOP::ITOP11","","","","","","","","","","","bcm2711_pac::pl011::ITOP::ITOP3","","","","","","","","","","","bcm2711_pac::pl011::ITOP::ITOP6","","","","","","","","","","","bcm2711_pac::pl011::ITOP::ITOP7","","","","","","","","","","","bcm2711_pac::pl011::ITOP::ITOP8","","","","","","","","","","","bcm2711_pac::pl011::ITOP::ITOP9","","","","","","","","","","","bcm2711_pac::pl011::LCRH","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::pl011::LCRH::BRK","","","","","","","","","","","bcm2711_pac::pl011::LCRH::EPS","","","","","","","","","","","","","","","bcm2711_pac::pl011::LCRH::FEN","","","","","","","","","","","bcm2711_pac::pl011::LCRH::PEN","","","","","","","","","","","bcm2711_pac::pl011::LCRH::SPS","","","","","","","","","","","bcm2711_pac::pl011::LCRH::STP2","","","","","","","","","","","bcm2711_pac::pl011::LCRH::WLEN","","","","","","","","","","","","","","","","","","","bcm2711_pac::pl011::MIS","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::pl011::MIS::BEMIS","","","","","","","","","","","bcm2711_pac::pl011::MIS::CTSMMIS","","","","","","","","","","","bcm2711_pac::pl011::MIS::DCDMMIS","","","","","","","","","","","bcm2711_pac::pl011::MIS::DSRMMIS","","","","","","","","","","","bcm2711_pac::pl011::MIS::FEMIS","","","","","","","","","","","bcm2711_pac::pl011::MIS::OEMIS","","","","","","","","","","","bcm2711_pac::pl011::MIS::PEMIS","","","","","","","","","","","bcm2711_pac::pl011::MIS::RIMMIS","","","","","","","","","","","bcm2711_pac::pl011::MIS::RTMIS","","","","","","","","","","","bcm2711_pac::pl011::MIS::RXMIS","","","","","","","","","","","bcm2711_pac::pl011::MIS::TXMIS","","","","","","","","","","","bcm2711_pac::pl011::RIS","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::pl011::RIS::BERIS","","","","","","","","","","","bcm2711_pac::pl011::RIS::CTSRMIS","","","","","","","","","","","bcm2711_pac::pl011::RIS::DCDRMIS","","","","","","","","","","","bcm2711_pac::pl011::RIS::DSRRMIS","","","","","","","","","","","bcm2711_pac::pl011::RIS::FERIS","","","","","","","","","","","bcm2711_pac::pl011::RIS::OERIS","","","","","","","","","","","bcm2711_pac::pl011::RIS::PERIS","","","","","","","","","","","bcm2711_pac::pl011::RIS::RIRMIS","","","","","","","","","","","bcm2711_pac::pl011::RIS::RTRIS","","","","","","","","","","","bcm2711_pac::pl011::RIS::RXRIS","","","","","","","","","","","bcm2711_pac::pl011::RIS::TXRIS","","","","","","","","","","","bcm2711_pac::pl011::RSRECR","","","","","","","","","","","","","","","","","bcm2711_pac::pl011::RSRECR::BE","","","","","","","","","","","bcm2711_pac::pl011::RSRECR::FE","","","","","","","","","","","bcm2711_pac::pl011::RSRECR::OE","","","","","","","","","","","bcm2711_pac::pl011::RSRECR::PE","","","","","","","","","","","bcm2711_pac::pl011::TDR","","","","","","","","","","","bcm2711_pac::pl011::TDR::TDR10_0","","","","","","","","","","","bcm2711_pac::pwm","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::pwm::CTL","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::pwm::CTL::CLRF","","","","","","","","","","","bcm2711_pac::pwm::CTL::MODE1","","","","","","","","","","","","","","","bcm2711_pac::pwm::CTL::MODE2","","","","","","","","","","","","","","","bcm2711_pac::pwm::CTL::MSEN1","","","","","","","","","","","","","","","bcm2711_pac::pwm::CTL::MSEN2","","","","","","","","","","","","","","","bcm2711_pac::pwm::CTL::POLA1","","","","","","","","","","","","","","","bcm2711_pac::pwm::CTL::POLA2","","","","","","","","","","","","","","","bcm2711_pac::pwm::CTL::PWEN1","","","","","","","","","","","bcm2711_pac::pwm::CTL::PWEN2","","","","","","","","","","","bcm2711_pac::pwm::CTL::RPTL1","","","","","","","","","","","bcm2711_pac::pwm::CTL::RPTL2","","","","","","","","","","","bcm2711_pac::pwm::CTL::SBIT1","","","","","","","","","","","bcm2711_pac::pwm::CTL::SBIT2","","","","","","","","","","","bcm2711_pac::pwm::CTL::USEF1","","","","","","","","","","","bcm2711_pac::pwm::CTL::USEF2","","","","","","","","","","","bcm2711_pac::pwm::DMAC","","","","","","","","","","","","","","","bcm2711_pac::pwm::DMAC::DREQ","","","","","","","","","","","bcm2711_pac::pwm::DMAC::ENAB","","","","","","","","","","","bcm2711_pac::pwm::DMAC::PANIC","","","","","","","","","","","bcm2711_pac::pwm::STA","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::pwm::STA::BERR","","","","","","","","","","","bcm2711_pac::pwm::STA::EMPT1","","","","","","","","","","","bcm2711_pac::pwm::STA::FULL1","","","","","","","","","","","bcm2711_pac::pwm::STA::GAPO1","","","","","","","","","","","bcm2711_pac::pwm::STA::GAPO2","","","","","","","","","","","bcm2711_pac::pwm::STA::RERR1","","","","","","","","","","","bcm2711_pac::pwm::STA::STA1","","","","","","","","","","","bcm2711_pac::pwm::STA::STA2","","","","","","","","","","","bcm2711_pac::pwm::STA::WERR1","","","","","","","","","","","bcm2711_pac::spi","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::spi::CLK","","","","","","","","","","","bcm2711_pac::spi::CLK::CDIV","","","","","","","","","","","bcm2711_pac::spi::CS","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bcm2711_pac::spi::CS::ADCS","","","","","","","","","","","bcm2711_pac::spi::CS::CLEAR_RX","","","","","","","","","","","bcm2711_pac::spi::CS::CLEAR_TX","","","","","","","","","","","bcm2711_pac::spi::CS::CPHA","","","","","","","","","","","","","","","bcm2711_pac::spi::CS::CPOL","","","","","","","","","","","","","","","bcm2711_pac::spi::CS::CS","","","","","","","","","","","","","","","","","bcm2711_pac::spi::CS::CSPOL","","","","","","","","","","","","","","","bcm2711_pac::spi::CS::CSPOL0","","","","","","","","","","","","","","","bcm2711_pac::spi::CS::CSPOL1","","","","","","","","","","","","","","","bcm2711_pac::spi::CS::CSPOL2","","","","","","","","","","","","","","","bcm2711_pac::spi::CS::DMAEN","","","","","","","","","","","bcm2711_pac::spi::CS::DMA_LEN","","","","","","","","","","","bcm2711_pac::spi::CS::DONE","","","","","","","","","","","bcm2711_pac::spi::CS::INTD","","","","","","","","","","","bcm2711_pac::spi::CS::INTR","","","","","","","","","","","bcm2711_pac::spi::CS::LEN","","","","","","","","","","","","","","","bcm2711_pac::spi::CS::LEN_LONG","","","","","","","","","","","bcm2711_pac::spi::CS::LMONO","","","","","","","","","","","bcm2711_pac::spi::CS::REN","","","","","","","","","","","bcm2711_pac::spi::CS::RXD","","","","","","","","","","","bcm2711_pac::spi::CS::RXF","","","","","","","","","","","bcm2711_pac::spi::CS::RXR","","","","","","","","","","","bcm2711_pac::spi::CS::TA","","","","","","","","","","","bcm2711_pac::spi::CS::TE_EN","","","","","","","","","","","bcm2711_pac::spi::CS::TXD","","","","","","","","","","","bcm2711_pac::spi::DC","","","","","","","","","","","","","","","","","bcm2711_pac::spi::DC::RDREQ","","","","","","","","","","","bcm2711_pac::spi::DC::RPANIC","","","","","","","","","","","bcm2711_pac::spi::DC::TDREQ","","","","","","","","","","","bcm2711_pac::spi::DC::TPANIC","","","","","","","","","","","bcm2711_pac::spi::DLEN","","","","","","","","","","","bcm2711_pac::spi::DLEN::LEN","","","","","","","","","","","bcm2711_pac::spi::FIFO","","","","","","","","","","","bcm2711_pac::spi::FIFO::DATA","","","","","","","","","","","bcm2711_pac::spi::LTOH","","","","","","","","","","","bcm2711_pac::spi::LTOH::TOH","","","","","","","","","","","bcm2711_pac::sys_timer","","","","","","","","","","","","","","bcm2711_pac::sys_timer::CS","","","","","","","","",""],"d":["","An on-memory value that can be read and written through …","VideoCore physical address","BCM2711 ARM timer (<strong>based</strong> on ARM SP804)","Auxiliaries","","","","","Broadcom Serial Control controllers","","","","","DMA controller","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","BCM2711 ARM Mailboxes","","","","","BCM2711 PCM / I2S Audio","PL011 UART","BCM2711 PWM","","BCM2711 SPI","System Timer","Map a given VC address to a low-peripheral ARM physical …","","","","","","","","","The base address of the ARM timer register block.","","","","","","","","","Control","Free running counter (Not in real 804!)","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","IRQ Clear/Ack (Write-Only)","Load","Masked IRQ (Read-Only)","Pre-divider (Not in real 804!)","RAW IRQ (Read-Only)","Reload","","","","Value (Read-Only)","Halt in debug halted mode","","Pre-scale bits","","Timer enable","","Free running counter enable","","Free running counter pre-scaler. Freq is …","","Timer interrupt enable","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Halt in debug halted mode","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Pre-scale bits","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Timer enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Free running counter enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Free running counter pre-scaler. Freq is …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Timer interrupt enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Pre-divider value. …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Pre-divider value. …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","The base address of the AUX Mini UART register block.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","If set the mini UART is enabled.","","","If set the SPI1 module is enabled.","","If set the SPI2 module is enabled.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","If set the mini UART is enabled.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","If set the SPI1 module is enabled.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","If set the SPI2 module is enabled.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","If set the mini UART has an interrupt pending.","","","If set the SPI1 module has an interrupt pending.","","If set the SPI2 module has an interrupt pending.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","If set the mini UART has an interrupt pending.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","If set the SPI1 module has an interrupt pending.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","If set the SPI2 module has an interrupt pending.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Baudrate","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Baudrate","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Enable transmit auto flow-control using CTS","","CTS assert level","","Enable receive auto flow-control using RTS","","","","RTS assert level","","Receiver enable","","","Transmitter enable","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Enable transmit auto flow-control using CTS","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","CTS assert level","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Enable receive auto flow-control using RTS","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","RTS assert level","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Receiver enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Transmitter enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","MS 8 bits baudrate, <code>DLAB</code> = 1","","Enable receive interrupt, <code>DLAB</code> = 0","","","Enable transmit interrupt, <code>DLAB</code> = 0","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","MS 8 bits baudrate, <code>DLAB</code> = 1","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Enable receive interrupt, <code>DLAB</code> = 0","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Enable transmit interrupt, <code>DLAB</code> = 0","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Interrupt pending","","RX interrupt ID bit (write), FIFO clear (read)","","","TX interrupt ID bit (read), FIFO clear (write)","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Interrupt pending","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","RX interrupt ID bit (write), FIFO clear (read)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","TX interrupt ID bit (read), FIFO clear (write)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","LS 8 bits baudrate, <code>DLAB</code> = 1","","Receive data read, <code>DLAB</code> = 0","","","Transmit data write, <code>DLAB</code> = 0","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","LS 8 bits baudrate, <code>DLAB</code> = 1","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Receive data read, <code>DLAB</code> = 0","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Transmit data write, <code>DLAB</code> = 0","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Break","","Data size","","DLAB access - if set the first two Mini UART registers …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Break","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Data size","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","DLAB access - if set the first two Mini UART registers …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Data ready","","Receiver overrun (RO)","","","Transmitter empty","","Transmitter idle","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Data ready","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Receiver overrun (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Transmitter empty","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Transmitter idle","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","RTS signal (if set <code>UART1_RTS</code> pin is low)","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","RTS signal (if set <code>UART1_RTS</code> pin is low)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","CTS status (if set <code>UART1_CTS</code> pin is low)","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","CTS status (if set <code>UART1_CTS</code> pin is low)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Scratch","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Scratch","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","CTS line","","RTS status","","Receive FIFO fill level (<code>0..=8</code>)","","Receiver is idle","","Symbol available","","Receiver overrun","","","Transmitter done","","Transmit FIFO is empty","","Transmit FIFO fill level (<code>0..=8</code>)","","Transmit FIFO is full","","Transmitter is idle","","Space available","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","CTS line","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","RTS status","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Receive FIFO fill level (<code>0..=8</code>)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Receiver is idle","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Symbol available","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Receiver overrun","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Transmitter done","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Transmit FIFO is empty","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Transmit FIFO fill level (<code>0..=8</code>)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Transmit FIFO is full","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Transmitter is idle","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Space available","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Clear FIFOs","","Invert SPI CLK","","Chip selects","","DOUT hold time","","Enable","","In rising","","Out rising","","Post-input mode","","","Shift length","","SHift out MS bit first","","Speed: <code>spi_clk_freq = system_clock_freq / 2 * (speed + 1)</code>","","Variable CS","","Variable width","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Clear FIFOs","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Invert SPI CLK","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Chip selects","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","DOUT hold time","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","In rising","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Out rising","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Post-input mode","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Shift length","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","SHift out MS bit first","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Speed: <code>spi_clk_freq = system_clock_freq / 2 * (speed + 1)</code>","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Variable CS","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Variable width","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","CS high time","","Done IRQ","","Keep input","","","SHift in MS bit first","","TX empty IRQ","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","CS high time","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Done IRQ","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Keep input","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","SHift in MS bit first","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","TX empty IRQ","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Bit count","","Busy","","RX empty","","RX fifo level","","RX full","","","TX empty","","TX fifo level","","TX full","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Bit count","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Busy","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","RX empty","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","RX fifo level","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","RX full","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","TX empty","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","TX fifo level","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","TX full","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","The base address of the BSC0 instance of the BSC register …","The base address of the BSC1 instance of the BSC register …","The base address of the BSC3 instance of the BSC register …","The base address of the BSC4 instance of the BSC register …","The base address of the BSC5 instance of the BSC register …","The base address of the BSC6 instance of the BSC register …","","","","","","","","","Slave address","","","Control","Clock stretch timeout","Data delay","Clock divider","Data length","Data FIFO","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Status","","","","Slave address","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Slave address","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","FIFO clear (W1SC)","","I2C enable","","Interrupt on DONE","","Interrupt on RX","","Interrupt on TX","","Read transfer","","","Start transfer (W1SC)","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","FIFO clear (W1SC)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","I2C enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Interrupt on DONE","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Interrupt on RX","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Interrupt on TX","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Read transfer","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Start transfer (W1SC)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Clock stretch timeout value","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Clock stretch timeout value","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Falling edge delay","","Rising edge delay","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Falling edge delay","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Rising edge delay","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Clock divider","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Clock divider","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Data length in bytes","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Data length in bytes","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Clock stretch timeout (W1C)","","Transfer done (W1C)","","ACK error (W1C)","","FIFO contains data (RO)","","FIFO full (RO)","","FIFO needs reading (RO)","","","Transfer active (RO)","","FIFO can accept data (RO)","","FIFO empty (RO)","","FIFO needs writing (RO)","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Clock stretch timeout (W1C)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Transfer done (W1C)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","ACK error (W1C)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","FIFO contains data (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","FIFO full (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","FIFO needs reading (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Transfer active (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","FIFO can accept data (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","FIFO empty (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","FIFO needs writing (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","The base address of the DMA0-14 register block.","The number of DMA engines in this SoC.","","","","","","","","","","","","","","","","","DMA0-14 register block","DMA4 engine control block","A <em>DMA4</em> (DMA11-14) register block","DMA engine control block","DMA Lite engine control block","A DMA Lite (DMA7-10) engine register block","A DMA engine (DMA0-6) register block","","","","","","","","","","","","","","","","","Control block address","","","","Control block address","Control block address","Control and status","Control and status","Control and status","Debug","Debug","Debug","More debug","","","","CB word 3 (destination address)","Destination address","CB word 2 (destination address)","CB word 2 (destination address)","Destination address","Destination address","CB word 4 (destination information)","Destination information","DMA0","DMA0-6","DMA1","DMA10","DMA11","DMA11-14","DMA12","DMA13","DMA14","DMA2","DMA3","DMA4","DMA5","DMA6","DMA7","DMA7-10","DMA8","DMA9","Global enable bits for each DMA channel","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Interrupt status of each DMA channel","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","CB word 5 (transfer length)","Transfer length","CB word 6 (next CB address)","Next CB address","CB word 5 (next CB address)","CB word 5 (next CB address)","Next CB address","Next CB address","Reserved - set to zero","Reserved - set to zero","Reserved - set to zero","Reserved - set to zero","CB word 1 (source address)","CB word 1 (source address)","Source address","Source address","CB word 1 (source address)","Source address","CB word 2 (source information)","Source information","CB word 4 (2D stride)","2D stride","CB word 0 (transfer information)","CB word 0 (transfer information)","CB word 0 (transfer information)","Transfer information","Transfer information","Transfer information","","","","","","","","","","","","","","","CB word 3 (transfer length)","CB word 3 (transfer length)","Transfer length","Transfer length","","","","","","","","Abort DMA (W1SC)","","Activate the DMA4","","Disable debug pause signal","","Indicates the DMA4 is busy (RO)","","DREQ state (RO)","","DMA paused by DREQ state (RO)","","End flag (W1C)","","DMA error (RO)","","Interrupt status (W1C)","","Indicates that there are outstanding AXI transfers, either …","","AXI panic QoS level","","AXI QoS Level","","DMA read paused state (RO)","","","The DMA4 is waiting for all the write response to be …","","Wait for outstanding writes","","DMA write paused state (RO)","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Abort DMA (W1SC)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Activate the DMA4","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Disable debug pause signal","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Indicates the DMA4 is busy (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","DREQ state (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","DMA paused by DREQ state (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","End flag (W1C)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","DMA error (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Interrupt status (W1C)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Indicates that there are outstanding AXI transfers, either …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","AXI panic QoS level","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","AXI QoS Level","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","DMA read paused state (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","The DMA4 is waiting for all the write response to be …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Wait for outstanding writes","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","DMA write paused state (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Instruct the DMA4 to abort if it detects an error","","Disalbe the clock gating logic","","FIFO error (RC)","","Instruct the DMA4 to halt if it detects an error","","ID","","Generate an interrupt if an error is detected","","Slave read response error during control block read (RC)","","Slave read response error (RC)","","DMA reset (W1SC)","","Read state machine state (RO)","","","DMA version (RO)","","Slave write response error (RC)","","Write state machine state (RO)","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Outstanding read words count","","Outstanding write response count","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Outstanding read words count","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Outstanding write response count","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Instruct the DMA4 to abort if it detects an error","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Disalbe the clock gating logic","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","FIFO error (RC)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Instruct the DMA4 to halt if it detects an error","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","ID","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Generate an interrupt if an error is detected","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Slave read response error during control block read (RC)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Slave read response error (RC)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","DMA reset (W1SC)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Read state machine state (RO)","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","DMA version (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Slave write response error (RC)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Write state machine state (RO)","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","(Linear mode) Transfer length in bytes","","","(2D mode) X transfer length in bytes","","(2D mode) Y transfer length minus one, indicating how many …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","(Linear mode) Transfer length in bytes","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","(2D mode) X transfer length in bytes","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","(2D mode) Y transfer length minus one, indicating how many …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","High bits of the address <code>[40:32]</code>","","Burst transfer length","","Ignoe reads or writes","","Increment the source address","","","Transfer width","","2D mode stride in bytes (signed)","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","High bits of the address <code>[40:32]</code>","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Burst transfer length","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Ignoe reads or writes","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Increment the source address","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Transfer width","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","2D mode stride in bytes (signed)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Control destination reads with <code>DREQ</code>","","Write wait cycles","","Interrupt enable","","Peripheral mapping","","","Control source reads with <code>DREQ</code>","","Read wait cycles","","2D mode","","Wait for a read response","","Wait for a write response","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Control destination reads with <code>DREQ</code>","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Write wait cycles","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Interrupt enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Peripheral mapping","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Control source reads with <code>DREQ</code>","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Read wait cycles","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","2D mode","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Wait for a read response","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Wait for a write response","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Abort DMA (W1SC)","","Acitvate the DMA","","Disable debug pause signal","","<code>DREQ</code> state (RO)","","DMA paused by <code>DREQ</code> state (RO)","","DMA end flag (W1C)","","DMA error (RO)","","Interrupt status (W1C)","","AXI panic priority level","","DMA paused state (RO)","","AXI priority level","","DMA channel reset (W1SC)","","","DMA is waiting for the last write to be received (RO)","","Wait for outstanding writes","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Abort DMA (W1SC)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Acitvate the DMA","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Disable debug pause signal","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","<code>DREQ</code> state (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","DMA paused by <code>DREQ</code> state (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","DMA end flag (W1C)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","DMA error (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Interrupt status (W1C)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","AXI panic priority level","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","DMA paused state (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","AXI priority level","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","DMA channel reset (W1SC)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","DMA is waiting for the last write to be received (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Wait for outstanding writes","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","DMA AXI ID (RO)","","DMA state machine state (RO)","","FIFO error (W1C)","","DMA Lite (RO)","","DMA outstanding writes counter (RO)","","Slave read response error (W1C)","","Read last not set error (W1C)","","","DMA version (RO)","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","DMA AXI ID (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","DMA state machine state (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","FIFO error (W1C)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","DMA Lite (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","DMA outstanding writes counter (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Slave read response error (W1C)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Read last not set error (W1C)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","DMA version (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Burst transfer length","","Control destination writes with <code>DREQ</code>","","Destination address increment","","Destination transfer width","","Interrupt enable","","Peripheral mapping","","","Control source reads with DREQ","","Source address increment","","Source transfer width","","Add wait cycles","","Wait for a write response","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Burst transfer length","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Control destination writes with <code>DREQ</code>","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Destination address increment","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Destination transfer width","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Interrupt enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Peripheral mapping","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Control source reads with DREQ","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Source address increment","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Source transfer width","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Add wait cycles","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Wait for a write response","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Transfer length in bytes","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Transfer length in bytes","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Destination stride in bytes (signed)","","","Source stride in bytes (signed)","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Destination stride in bytes (signed)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Source stride in bytes (signed)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Burst transfer length","","Control destination writes with <code>DREQ</code>","","Ignore writes","","Destination address increment","","Destination transfer width","","Interrupt enable","","Don’t do wide writes as a two-beat burst","","Peripheral mapping","","","Control source reads with DREQ","","Ignore reads","","Source address increment","","Source transfer width","","2D mode","","Add wait cycles","","Wait for a write response","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Burst transfer length","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Control destination writes with <code>DREQ</code>","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Ignore writes","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Destination address increment","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Destination transfer width","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Interrupt enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Don’t do wide writes as a two-beat burst","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Peripheral mapping","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Control source reads with DREQ","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Ignore reads","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Source address increment","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Source transfer width","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","2D mode","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Add wait cycles","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Wait for a write response","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","(Linear mode) Transfer length in bytes","","","(2D mode) X transfer length in bytes","","(2D mode) Y transfer length, indicating how many <code>XLENGTH</code> …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","(Linear mode) Transfer length in bytes","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","(2D mode) X transfer length in bytes","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","(2D mode) Y transfer length, indicating how many <code>XLENGTH</code> …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Construct a <code>Field</code> representing the <code>EN</code> bit (enable, RW) …","Set the 1G SDRAM ram page that the 32-bit DMA engines …","","Set the 1G SDRAM ram page that the DMA Lite engines …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Set the 1G SDRAM ram page that the 32-bit DMA engines …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Set the 1G SDRAM ram page that the DMA Lite engines …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Construct a <code>Field</code> representing the <code>INT</code> bit (interrupt …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","The base address of the GPIO register block.","","","GPIO pin output clear","","","GPIO function select","","","","","GPIO pin output set","","","","Returns the argument unchanged.","GPIO pin asynchronous falling edge detect enable","GPIO pin asynchronous rising edge detect enable","GPIO pin output clear","GPIO pin event detect status","GPIO pin falling edge detect enable","GPIO function select","GPIO pin high detect enable","GPIO pull-up/pull-down register","GPIO pin low detect enable","GPIO pin level","GPIO pin rising edge detect enable","GPIO pin output set","Calls <code>U::from(self)</code>.","","","","","The number of pins represented by each <code>GPCLR</code> register.","","","","Construct a <code>FieldValue</code> that can be used to clear the …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Construct a <code>Field</code> corresponding to the specified pin …","","","","Field value: The pin takes alternate function 0","Field value: The pin takes alternate function 1","Field value: The pin takes alternate function 2","Field value: The pin takes alternate function 3","Field value: The pin takes alternate function 4","Field value: The pin takes alternate function 5","Field value: Use the pin as an input","Field value: Use the pin as an output","The number of pins represented by each <code>GPFSEL</code> register.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Construct a <code>Field</code> corresponding to the specified pin …","","","","The number of pins represented by each <code>GPSET</code> register.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Construct a <code>Field</code> corresponding to the specified pin …","Construct a <code>FieldValue</code> that can be used to set the output …","","","","The number of pins represented by each <code>pin_generic</code> …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Construct a <code>Field</code> corresponding to the specified pin …","","","","The low-peripheral ARM physical address of the ARM …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Clear bit register","Set bit register","","","","The base address of the PCM register block.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","DMA DREQ enable","","Enable the PCM audio interface","","Clear the RX FIFO","","Indicates that the RX FIFO contains data","","RX FIFO error","","RX FIFO is full","","Enable reception","","Indicates that the RX FIFO needs reading","","RX sign extend","","RX FIFO sync","","Set the RX FIFO threshold at which point the <code>RXR</code> flag is …","","","PCM clock sync helper","","Clear the TX FIFO","","Indicates that the TX FIFO can accept data","","TX FIFO is empty","","TX FIFO error","","Enable transmission","","TX FIFO sync","","Set the TX FIFO threshold at which point the <code>TXW</code> flag is …","","Indicates that the TX FIFO needs writing","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","DMA DREQ enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Enable the PCM audio interface","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Clear the RX FIFO","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Indicates that the RX FIFO contains data","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","RX FIFO error","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","RX FIFO is full","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Enable reception","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Indicates that the RX FIFO needs reading","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","RX sign extend","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","RX FIFO sync","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Set the RX FIFO threshold at which point the <code>RXR</code> flag is …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","PCM clock sync helper","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Clear the TX FIFO","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Indicates that the TX FIFO can accept data","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","TX FIFO is empty","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","TX FIFO error","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Enable transmission","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","TX FIFO sync","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Set the TX FIFO threshold at which point the <code>TXW</code> flag is …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Indicates that the TX FIFO needs writing","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","RX panic level","","RX request level","","","TX panic level","","TX request level","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","RX panic level","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","RX request level","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","TX panic level","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","TX request level","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Data written here is transmitted, and received data is …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Data written here is transmitted, and received data is …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Clear the GRAY mode logic","","Flush the RX buffer into the RX FIFO","","The number of bits that were flushed into the RX fifo","","The current level of the RX FIFO","","The current fill level of the RX buffer","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Clear the GRAY mode logic","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Flush the RX buffer into the RX FIFO","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","The number of bits that were flushed into the RX fifo","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","The current level of the RX FIFO","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","The current fill level of the RX buffer","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","RX error interupt","","RX read interrupt enable","","","TX error interrupt","","TX write interrupt enable","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","RX error interupt","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","RX read interrupt enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","TX error interrupt","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","TX write interrupt enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Clock invert","","PCM clock mode","","","","Frame length","","Receive frame packed mode","","Frame sync invert","","Frame sync length","","Frame sync mode","","Transmit frame packed mode","","PDM input mode enable","","PDM decimation factor","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Clock invert","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","PCM clock mode","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Frame length","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Receive frame packed mode","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Frame sync invert","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Frame sync length","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Frame sync mode","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Transmit frame packed mode","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","PDM input mode enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","PDM decimation factor","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Channel 1 enable","","Channel 1 position","","Channel 1 width extension bit","","Channel 1 width","","Channel 2 enable","","Channel 2 position","","Channel 2 width extension bit","","Channel 2 width","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Channel 1 enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Channel 1 position","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Channel 1 width extension bit","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Channel 1 width","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Channel 2 enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Channel 2 position","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Channel 2 width extension bit","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Channel 2 width","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","The base address of the UART0 instance of the PL011 …","The base address of the UART2 instance of the PL011 …","The base address of the UART3 instance of the PL011 …","The base address of the UART4 instance of the PL011 …","The base address of the UART5 instance of the PL011 …","","","","","","","","","","","","","","","","","","","","","Control register","DMA control register","Data Register","Fractional baud rate divisor","Flag register","Returns the argument unchanged.","Integer baud rate divisor","Interrupt clear register","Interrupt FIFO level select register","Interrupt mask set clear register","Calls <code>U::from(self)</code>.","Test control register","Integration test input register","Integration test output register","Line control register","Masked interrupt status register","Raw interrupt status register","Receive status and error clear register","Test data register","","","","CTS hardware flow control enable","","Unsupported, write zero, read as don’t care","","Loopback enable","","Unsupported, write zero, read as don’t care","","Unsupported, write zero, read as don’t care","","Request to send","","RTS hardware flow control enable","","Receive enable","","","Unsupported, write zero, read as don’t care","","Unsupported, write zero, read as don’t care","","Transmit enable","","UART enable","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","CTS hardware flow control enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Unsupported, write zero, read as don’t care","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Loopback enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Unsupported, write zero, read as don’t care","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Unsupported, write zero, read as don’t care","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Request to send","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","RTS hardware flow control enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Receive enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Unsupported, write zero, read as don’t care","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Unsupported, write zero, read as don’t care","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Transmit enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","UART enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","DMA on error","","Receive DMA enable","","","Transmit DMA enable","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","DMA on error","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Receive DMA enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Transmit DMA enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Break error (read-only).","","Receive/transmit data","","Framing error (read-only).","","Overrun error (read-only).","","Parity error (read-only).","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Break error (read-only).","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Receive/transmit data","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Framing error (read-only).","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Overrun error (read-only).","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Parity error (read-only).","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","The fractional baud rate divisor","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","The fractional baud rate divisor","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","UART busy","","Clear to send","","Unsupported, write zero, read as don’t care","","Unsupported, write zero, read as don’t care","","Unsupported, write zero, read as don’t care","","Receive FIFO empty","","Receive FIFO full","","","Transmit FIFO empty","","Transmit FIFO full","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","UART busy","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Clear to send","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Unsupported, write zero, read as don’t care","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Unsupported, write zero, read as don’t care","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Unsupported, write zero, read as don’t care","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Receive FIFO empty","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Receive FIFO full","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Transmit FIFO empty","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Transmit FIFO full","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","The integer baud rate divisor","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","The integer baud rate divisor","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Break error interrupt clear","","<code>nUARTCTS</code> modem interrupt clear","","Unsupported, write zero, read as don’t care","","Unsupported, write zero, read as don’t care","","Framing error interrupt clear","","Overrun error interrupt clear","","Parity error interrupt clear","","Unsupported, write zero, read as don’t care","","Receive timeout interrupt clear","","Receive interrupt clear","","","Transmit interrupt clear","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Break error interrupt clear","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","<code>nUARTCTS</code> modem interrupt clear","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Unsupported, write zero, read as don’t care","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Unsupported, write zero, read as don’t care","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Framing error interrupt clear","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Overrun error interrupt clear","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Parity error interrupt clear","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Unsupported, write zero, read as don’t care","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Receive timeout interrupt clear","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Receive interrupt clear","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Transmit interrupt clear","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Receive interrupt FIFO level select","","Unsupported, write zero, read as don’t care","","","Transmit interrupt FIFO level select","","Unsupported, write zero, read as don’t care","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Trigger an interrupt when the FIFO becomes 1/8 full","Trigger an interrupt when the FIFO becomes 1/8 full","Trigger an interrupt when the FIFO becomes 1/2 full","Trigger an interrupt when the FIFO becomes 1/2 full","Trigger an interrupt when the FIFO becomes 1/4 full","Trigger an interrupt when the FIFO becomes 1/4 full","","Trigger an interrupt when the FIFO becomes 7/8 full","Trigger an interrupt when the FIFO becomes 7/8 full","Trigger an interrupt when the FIFO becomes 3/4 full","Trigger an interrupt when the FIFO becomes 3/4 full","Receive interrupt FIFO level select","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Unsupported, write zero, read as don’t care","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Trigger an interrupt when the FIFO becomes 1/8 full","Trigger an interrupt when the FIFO becomes 1/8 full","Trigger an interrupt when the FIFO becomes 1/2 full","Trigger an interrupt when the FIFO becomes 1/2 full","Trigger an interrupt when the FIFO becomes 1/4 full","Trigger an interrupt when the FIFO becomes 1/4 full","","Trigger an interrupt when the FIFO becomes 7/8 full","Trigger an interrupt when the FIFO becomes 7/8 full","Trigger an interrupt when the FIFO becomes 3/4 full","Trigger an interrupt when the FIFO becomes 3/4 full","Transmit interrupt FIFO level select","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Unsupported, write zero, read as don’t care","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Break error interrupt mask","","<code>nUARTCTS</code> modem interrupt mask","","Unsupported, write zero, read as don’t care","","Unsupported, write zero, read as don’t care","","Framing error interrupt mask","","Overrun error interrupt mask","","Parity error interrupt mask","","Unsupported, write zero, read as don’t care","","Receive timeout interrupt mask","","Receive interrupt mask","","","Transmit interrupt mask","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Break error interrupt mask","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","<code>nUARTCTS</code> modem interrupt mask","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Unsupported, write zero, read as don’t care","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Unsupported, write zero, read as don’t care","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Framing error interrupt mask","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Overrun error interrupt mask","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Parity error interrupt mask","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Unsupported, write zero, read as don’t care","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Receive timeout interrupt mask","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Receive interrupt mask","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Transmit interrupt mask","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Integration test enable","","Test FIFO enable","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Integration test enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Test FIFO enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Reads return the value of the <code>UARTRXD</code> primary input.","","Reads return the value of the <code>nUARTCTS</code> primary input.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Reads return the value of the <code>UARTRXD</code> primary input.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Reads return the value of the <code>nUARTCTS</code> primary input.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Send break","","Even parity select","","Enable FIFOs","","Parity enable","","","Stick parity select","","Two stop bits select","","Word length","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Send break","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Even parity select","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Enable FIFOs","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Parity enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Stick parity select","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Two stop bits select","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Word length","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Break error masked interrupt status","","<code>nUARTCTS</code> modem masked interrupt status","","Unsupported, write zero, read as don’t care","","Unsupported, write zero, read as don’t care","","Framing error masked interrupt status","","Overrun error masked interrupt status","","Parity error masked interrupt status","","Unsupported, write zero, read as don’t care","","Receive timeout masked interrupt status","","Receive masked interrupt status","","","Transmit masked interrupt status","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Break error masked interrupt status","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","<code>nUARTCTS</code> modem masked interrupt status","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Unsupported, write zero, read as don’t care","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Unsupported, write zero, read as don’t care","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Framing error masked interrupt status","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Overrun error masked interrupt status","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Parity error masked interrupt status","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Unsupported, write zero, read as don’t care","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Receive timeout masked interrupt status","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Receive masked interrupt status","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Transmit masked interrupt status","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Break error interrupt status","","<code>nUARTCTS</code> modem interrupt status","","Unsupported, write zero, read as don’t care","","Unsupported, write zero, read as don’t care","","Framing error interrupt status","","Overrun error interrupt status","","Parity error interrupt status","","Unsupported, write zero, read as don’t care","","Receive timeout interrupt status","","Receive interrupt status","","","Transmit interrupt status","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Break error interrupt status","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","<code>nUARTCTS</code> modem interrupt status","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Unsupported, write zero, read as don’t care","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Unsupported, write zero, read as don’t care","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Framing error interrupt status","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Overrun error interrupt status","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Parity error interrupt status","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Unsupported, write zero, read as don’t care","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Receive timeout interrupt status","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Receive interrupt status","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Transmit interrupt status","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Break error","","Framing error","","Overrun error","","Parity error","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Break error","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Framing error","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Overrun error","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Parity error","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","The base address of the PWM0 instance of the PWM register …","The base address of the PWM1 instance of the PWM register …","","","","","","","PWM control","PWM channel 1 data","PWM channel 2 data","PMA DMA configuration","PWM FIFO input","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","PWM channel 1 range","PWM channel 2 range","PWM status","","","","Clear FIFO","","Channel 1 mode","","Channel 2 mode","","Channel 1 M/S enable","","Channel 2 M/S enable","","Channel 1 polarity","","Channel 2 polarity","","Channel 1 enable","","Channel 2 enable","","Channel 1 repeat last data","","Channel 1 repeat last data","","","Channel 1 silence bit","","Channel 2 silence bit","","Channel 1 use FIFO","","Channel 2 use FIFO","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Clear FIFO","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Channel 1 mode","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Channel 2 mode","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Channel 1 M/S enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Channel 2 M/S enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Channel 1 polarity","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Channel 2 polarity","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Channel 1 enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Channel 2 enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Channel 1 repeat last data","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Channel 1 repeat last data","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Channel 1 silence bit","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Channel 2 silence bit","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Channel 1 use FIFO","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Channel 2 use FIFO","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","DMA threshold for DREQ signal","","DMA enable","","DMA threshold for PANIC signal","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","DMA threshold for DREQ signal","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","DMA enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","DMA threshold for PANIC signal","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Bus error flag (W1C)","","FIFO empty flag (RO)","","FIFO full flag (RO)","","Channel 1 gap occurred flag (W1C)","","Channel 2 gap occurred flag (W1C)","","FIFO read error flag (W1C)","","","Channel 1 state (RO)","","Channel 2 state (RO)","","FIFO write error flag (W1C)","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Bus error flag (W1C)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","FIFO empty flag (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","FIFO full flag (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Channel 1 gap occurred flag (W1C)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Channel 2 gap occurred flag (W1C)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","FIFO read error flag (W1C)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Channel 1 state (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Channel 2 state (RO)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","FIFO write error flag (W1C)","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","The base address of the SPI0 instance of the SPI register …","The base address of the SPI3 instance of the SPI register …","The base address of the SPI4 instance of the SPI register …","The base address of the SPI5 instance of the SPI register …","The base address of the SPI6 instance of the SPI register …","","","","","","","","","","SPI master clock divider","SPI master control and status","SPI DMA DREQ controls","SPI master data length","SPI master TX and RX FIFOs","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","SPI LoSSI mode TOH","","","","Clock divider","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Clock divider","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Automatically de-assert chip select","","RX FIFO clear","","TX FIFO clear","","Clock phase","","Clock polarity","","Chip select","","Chip select polarity","","Chip select 0 polarity","","Chip select 1 polarity","","Chip select 2 polarity","","DMA enable","","Enable DMA mode in LoSSI mode","","Transfer done","","Interrupt on done","","Interrupt on RXR","","LoSSI enable","","Enable long data word in LoSSI mode if <code>DMA_LEN</code> is set","","Unused","","Read enable","","RX FIFO contains data","","RX FIFO full","","RX FIFO needs reading","","","Transfer active","","Unused","","TX FIFO can accept data","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Automatically de-assert chip select","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","RX FIFO clear","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","TX FIFO clear","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Clock phase","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Clock polarity","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Chip select","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Chip select polarity","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Chip select 0 polarity","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Chip select 1 polarity","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Chip select 2 polarity","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","DMA enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Enable DMA mode in LoSSI mode","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Transfer done","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Interrupt on done","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Interrupt on RXR","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","LoSSI enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Enable long data word in LoSSI mode if <code>DMA_LEN</code> is set","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Unused","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Read enable","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","RX FIFO contains data","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","RX FIFO full","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","RX FIFO needs reading","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Transfer active","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Unused","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","TX FIFO can accept data","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","DMA read request threshold","","DMA read panic threshold","","","DMA write request threshold","","DMA write panic threshold","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","DMA read request threshold","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","DMA read panic threshold","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","DMA write request threshold","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","DMA write panic threshold","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Data length: The number of bytes to transfer.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Data length: The number of bytes to transfer.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Read from RX FIFO or write to TX FIFO","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Read from RX FIFO or write to TX FIFO","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","This sets the Output Hold delay in APB clocks. A value of <code>0</code>…","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","This sets the Output Hold delay in APB clocks. A value of <code>0</code>…","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","The base address of the System Timer peripheral register …","","","","","Compare <code>0..4</code>","Counter higher 32 bits","Counter lower 32 bits","Control/status","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Construct a <code>Field</code> representing the <code>M</code> bit (System Timer …","Construct a <code>FieldValue</code> to clear the <code>M</code> bit corresponding to …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","",""],"i":[4,0,0,0,0,3,4,3,4,0,3,4,4,3,0,4,3,4,3,3,4,3,0,4,3,4,0,3,4,3,4,0,0,0,3,0,0,4,3,4,3,4,3,4,3,3,0,0,0,0,0,0,0,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,16,16,16,0,110,0,110,0,0,0,110,110,110,110,110,110,110,110,0,111,0,111,0,111,0,0,0,111,111,111,111,111,111,111,111,0,112,0,112,0,0,0,112,112,112,112,112,112,112,112,0,113,0,113,0,0,0,113,113,113,113,113,113,113,113,0,0,0,114,114,114,114,114,114,114,114,0,115,0,115,0,0,0,115,115,115,115,115,115,115,115,0,0,116,0,116,0,0,116,116,116,116,116,116,116,116,0,0,0,18,18,18,18,18,18,18,18,0,117,0,0,0,117,117,117,117,117,117,117,117,0,0,0,19,19,19,19,19,19,19,19,0,0,0,118,118,118,118,118,118,118,118,0,0,0,20,20,20,20,20,20,20,20,0,0,0,119,119,119,119,119,119,119,119,0,0,0,21,21,21,21,21,21,21,21,0,0,0,120,120,120,120,120,120,120,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,121,121,121,121,122,121,122,123,121,122,123,123,123,122,121,122,123,122,122,121,122,123,122,123,123,123,123,122,122,122,122,123,122,122,123,121,122,123,121,122,123,123,123,123,123,121,122,123,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22,0,0,0,124,124,124,124,124,124,124,124,0,0,0,125,125,125,125,125,125,125,125,0,0,0,126,126,126,126,126,126,126,126,0,0,0,0,0,0,0,23,23,23,23,23,23,23,23,0,0,0,127,127,127,127,127,127,127,127,0,0,0,128,128,128,128,128,128,128,128,0,0,0,129,129,129,129,129,129,129,129,0,0,0,24,24,24,24,24,24,24,24,0,0,0,130,130,130,130,130,130,130,130,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,25,25,25,25,25,25,25,0,0,0,131,131,131,131,131,131,131,131,0,0,0,132,132,132,132,132,132,132,132,0,0,0,133,133,133,133,133,133,133,133,0,134,0,134,0,0,134,0,134,0,0,134,134,134,134,134,134,134,134,0,0,0,135,135,135,135,135,135,135,135,0,0,0,136,136,136,136,136,136,136,136,0,0,0,137,137,137,137,137,137,137,137,0,0,0,0,0,0,0,26,26,26,26,26,26,26,26,0,0,0,138,138,138,138,138,138,138,138,0,0,0,139,139,139,139,139,139,139,139,0,0,0,140,140,140,140,140,140,140,140,0,0,0,0,0,0,0,27,27,27,27,27,27,27,27,0,0,0,141,141,141,141,141,141,141,141,0,0,0,142,142,142,142,142,142,142,142,0,0,0,143,143,143,143,143,143,143,143,0,0,0,0,0,0,0,28,28,28,28,28,28,28,28,0,0,0,144,144,144,144,144,144,144,144,0,0,0,145,145,145,145,145,145,145,145,0,0,0,146,146,146,146,146,146,146,146,0,0,0,0,0,0,0,29,29,29,29,29,29,29,29,0,0,0,147,147,147,147,147,147,147,147,0,148,0,0,148,0,0,148,148,148,148,148,148,148,148,0,149,0,149,0,0,0,149,149,149,149,149,149,149,149,0,0,0,0,0,0,0,0,0,30,30,30,30,30,30,30,30,0,0,0,150,150,150,150,150,150,150,150,0,0,0,151,151,151,151,151,151,151,151,0,0,0,152,152,152,152,152,152,152,152,0,0,0,153,153,153,153,153,153,153,153,0,0,0,31,31,31,31,31,31,31,31,0,154,0,154,0,0,0,154,154,154,154,154,154,154,154,0,0,0,32,32,32,32,32,32,32,32,0,155,0,155,0,0,0,155,155,155,155,155,155,155,155,0,0,0,33,33,33,33,33,33,33,33,0,0,0,156,156,156,156,156,156,156,156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,34,34,34,34,34,34,34,0,0,0,157,157,157,157,157,157,157,157,0,0,0,158,158,158,158,158,158,158,158,0,0,0,159,159,159,159,159,159,159,159,0,0,0,160,160,160,160,160,160,160,160,0,0,0,161,161,161,161,161,161,161,161,0,0,0,162,162,162,162,162,162,162,162,0,0,0,163,163,163,163,163,163,163,163,0,0,0,164,164,164,164,164,164,164,164,0,0,0,165,165,165,165,165,165,165,165,0,0,0,166,166,166,166,166,166,166,166,0,0,0,167,167,167,167,167,167,167,167,0,0,0,168,168,168,168,168,168,168,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,35,35,35,35,35,35,35,0,0,0,169,169,169,169,169,169,169,169,0,170,0,170,0,0,0,170,170,170,170,170,170,170,170,0,0,0,171,171,171,171,171,171,171,171,0,172,0,172,0,0,172,0,0,172,0,172,172,172,172,172,172,172,172,0,0,0,173,173,173,173,173,173,173,173,0,174,0,174,0,0,0,174,174,174,174,174,174,174,174,0,175,0,175,0,0,0,175,175,175,175,175,175,175,175,0,0,0,176,176,176,176,176,176,176,176,0,0,0,177,177,177,177,177,177,177,177,0,178,0,178,0,0,0,178,178,178,178,178,178,178,178,0,0,0,179,179,179,179,179,179,179,179,0,0,0,180,180,180,180,180,180,180,180,0,0,0,181,181,181,181,181,181,181,181,0,0,0,0,0,0,0,0,0,0,0,36,36,36,36,36,36,36,36,0,0,0,182,182,182,182,182,182,182,182,0,0,0,183,183,183,183,183,183,183,183,0,0,0,184,184,184,184,184,184,184,184,0,185,0,185,0,0,0,185,185,185,185,185,185,185,185,0,0,0,186,186,186,186,186,186,186,186,0,0,0,37,37,37,37,37,37,37,37,0,0,0,187,187,187,187,187,187,187,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,38,38,38,38,38,38,38,0,0,0,188,188,188,188,188,188,188,188,0,0,0,189,189,189,189,189,189,189,189,0,0,0,190,190,190,190,190,190,190,190,0,0,0,191,191,191,191,191,191,191,191,0,0,0,192,192,192,192,192,192,192,192,0,0,0,193,193,193,193,193,193,193,193,0,0,0,194,194,194,194,194,194,194,194,0,0,0,195,195,195,195,195,195,195,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,0,0,0,39,39,39,39,39,39,39,39,0,0,0,197,197,197,197,197,197,197,197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,40,40,40,40,40,40,40,0,198,0,198,0,0,0,198,198,198,198,198,198,198,198,0,0,0,199,199,199,199,199,199,199,199,0,0,0,200,200,200,200,200,200,200,200,0,0,0,201,201,201,201,201,201,201,201,0,0,0,202,202,202,202,202,202,202,202,0,203,0,0,0,203,0,203,203,203,203,203,203,203,203,0,204,0,0,204,0,0,204,204,204,204,204,204,204,204,0,0,0,41,41,41,41,41,41,41,41,0,0,0,205,205,205,205,205,205,205,205,0,0,0,0,0,42,42,42,42,42,42,42,42,0,0,0,206,206,206,206,206,206,206,206,0,0,0,207,207,207,207,207,207,207,207,0,0,0,43,43,43,43,43,43,43,43,0,0,0,208,208,208,208,208,208,208,208,0,0,0,44,44,44,44,44,44,44,44,0,0,0,209,209,209,209,209,209,209,209,0,0,0,45,45,45,45,45,45,45,45,0,0,0,210,210,210,210,210,210,210,210,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,46,46,46,46,46,46,46,0,0,0,211,211,211,211,211,211,211,211,0,0,0,212,212,212,212,212,212,212,212,0,0,0,213,213,213,213,213,213,213,213,0,0,0,214,214,214,214,214,214,214,214,0,0,0,215,215,215,215,215,215,215,215,0,0,0,216,216,216,216,216,216,216,216,0,0,0,217,217,217,217,217,217,217,217,0,0,0,218,218,218,218,218,218,218,218,0,0,0,219,219,219,219,219,219,219,219,0,0,0,220,220,220,220,220,220,220,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,51,52,53,47,48,49,50,51,52,53,47,48,49,53,47,48,49,51,52,51,52,53,51,52,53,53,47,48,49,53,49,51,52,47,48,53,49,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,47,48,49,50,51,52,53,47,48,49,50,50,51,52,53,47,48,49,53,49,53,49,51,52,47,48,47,49,48,48,51,52,47,48,53,49,53,49,51,47,51,52,53,47,48,49,50,51,52,53,47,48,49,50,51,52,53,47,48,49,51,52,47,48,50,51,52,53,47,48,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,54,54,54,54,54,54,54,0,0,0,221,221,221,221,221,221,221,221,0,0,0,222,222,222,222,222,222,222,222,0,0,0,223,223,223,223,223,223,223,223,0,0,0,224,224,224,224,224,224,224,224,0,0,0,225,225,225,225,225,225,225,225,0,0,0,226,226,226,226,226,226,226,226,0,0,0,227,227,227,227,227,227,227,227,0,0,0,228,228,228,228,228,228,228,228,0,0,0,229,229,229,229,229,229,229,229,0,0,0,230,230,230,230,230,230,230,230,0,0,0,231,231,231,231,231,231,231,231,0,0,0,232,232,232,232,232,232,232,232,0,0,0,233,233,233,233,233,233,233,233,0,0,0,234,234,234,234,234,234,234,234,0,0,0,235,235,235,235,235,235,235,235,0,0,0,236,236,236,236,236,236,236,236,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,0,0,0,0,0,56,56,56,56,56,56,56,56,0,0,0,237,237,237,237,237,237,237,237,0,0,0,238,238,238,238,238,238,238,238,0,0,0,239,239,239,239,239,239,239,239,0,0,0,240,240,240,240,240,240,240,240,0,0,0,241,241,241,241,241,241,241,241,0,0,0,242,242,242,242,242,242,242,242,0,0,0,243,243,243,243,243,243,243,243,0,0,0,244,244,244,244,244,244,244,244,0,0,0,245,245,245,245,245,245,245,245,0,0,0,246,246,246,246,246,246,246,246,0,0,0,247,247,247,247,247,247,247,247,0,248,0,248,0,248,0,248,0,248,0,0,0,248,0,248,0,248,248,248,248,248,248,248,248,0,0,0,249,249,249,249,249,249,249,249,0,0,0,250,250,250,250,250,250,250,250,0,251,0,251,0,251,0,251,0,0,0,251,0,251,0,251,251,251,251,251,251,251,251,0,0,0,0,0,0,0,57,57,57,57,57,57,57,57,0,0,0,252,252,252,252,252,252,252,252,0,0,0,253,253,253,253,253,253,253,253,0,0,0,254,254,254,254,254,254,254,254,0,0,0,0,0,0,0,0,0,0,0,0,0,58,58,58,58,58,58,58,58,0,0,0,255,255,255,255,255,255,255,255,0,0,0,256,256,256,256,256,256,256,256,0,0,0,257,257,257,257,257,257,257,257,0,0,0,258,258,258,258,258,258,258,258,0,259,0,0,259,0,259,0,259,0,0,259,259,259,259,259,259,259,259,0,0,0,260,260,260,260,260,260,260,260,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,59,59,59,59,59,59,59,0,0,0,261,261,261,261,261,261,261,261,0,0,0,262,262,262,262,262,262,262,262,0,0,0,263,263,263,263,263,263,263,263,0,0,0,264,264,264,264,264,264,264,264,0,0,0,265,265,265,265,265,265,265,265,0,0,0,266,266,266,266,266,266,266,266,0,267,0,0,267,0,0,267,267,267,267,267,267,267,267,0,0,0,268,268,268,268,268,268,268,268,0,0,0,269,269,269,269,269,269,269,269,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,60,60,60,60,60,60,60,0,0,0,270,270,270,270,270,270,270,270,0,0,0,271,271,271,271,271,271,271,271,0,0,0,272,272,272,272,272,272,272,272,0,0,0,273,273,273,273,273,273,273,273,0,0,0,274,274,274,274,274,274,274,274,0,0,0,275,275,275,275,275,275,275,275,0,0,0,276,276,276,276,276,276,276,276,0,0,0,277,277,277,277,277,277,277,277,0,0,0,278,278,278,278,278,278,278,278,0,0,0,279,279,279,279,279,279,279,279,0,0,0,280,280,280,280,280,280,280,280,0,0,0,281,281,281,281,281,281,281,281,0,0,0,282,282,282,282,282,282,282,282,0,0,0,283,283,283,283,283,283,283,283,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,0,0,0,284,284,284,284,284,284,284,284,0,0,0,285,285,285,285,285,285,285,285,0,0,0,286,286,286,286,286,286,286,286,0,0,0,287,287,287,287,287,287,287,287,0,0,0,288,288,288,288,288,288,288,288,0,0,0,289,289,289,289,289,289,289,289,0,0,0,290,290,290,290,290,290,290,290,0,0,0,291,291,291,291,291,291,291,291,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,62,62,62,62,62,62,62,0,0,0,292,292,292,292,292,292,292,292,0,0,0,293,293,293,293,293,293,293,293,0,0,0,294,294,294,294,294,294,294,294,0,295,0,0,295,0,0,295,295,295,295,295,295,295,295,0,0,0,296,296,296,296,296,296,296,296,0,0,0,297,297,297,297,297,297,297,297,0,0,0,298,298,298,298,298,298,298,298,0,0,0,299,299,299,299,299,299,299,299,0,300,0,0,300,0,0,300,300,300,300,300,300,300,300,0,0,0,301,301,301,301,301,301,301,301,0,0,0,302,302,302,302,302,302,302,302,0,0,0,63,63,63,63,63,63,63,63,0,0,0,303,303,303,303,303,303,303,303,0,0,0,0,0,64,64,64,64,64,64,64,64,0,0,0,304,304,304,304,304,304,304,304,0,0,0,305,305,305,305,305,305,305,305,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,65,65,65,65,65,65,65,0,0,0,306,306,306,306,306,306,306,306,0,0,0,307,307,307,307,307,307,307,307,0,0,0,308,308,308,308,308,308,308,308,0,0,0,309,309,309,309,309,309,309,309,0,310,0,0,310,0,0,310,310,310,310,310,310,310,310,0,0,0,311,311,311,311,311,311,311,311,0,0,0,312,312,312,312,312,312,312,312,0,0,0,313,313,313,313,313,313,313,313,0,0,0,314,314,314,314,314,314,314,314,0,0,0,315,315,315,315,315,315,315,315,0,0,0,316,316,316,316,316,316,316,316,0,317,0,0,317,0,0,317,317,317,317,317,317,317,317,0,318,0,0,318,0,0,318,318,318,318,318,318,318,318,0,0,0,319,319,319,319,319,319,319,319,0,0,0,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,66,66,66,66,66,66,66,66,0,0,0,321,321,321,321,321,321,321,321,0,0,0,322,322,322,322,322,322,322,322,0,0,0,323,323,323,323,323,323,323,323,0,0,0,0,0,0,68,68,68,68,68,68,68,0,0,0,324,324,324,324,324,324,324,324,0,0,0,325,325,325,325,325,325,325,325,0,0,70,70,70,70,70,70,70,0,0,0,0,0,0,0,0,0,0,0,0,0,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,0,326,326,326,0,0,71,71,0,71,71,0,71,71,71,0,0,0,0,0,0,0,0,0,0,72,72,72,72,0,72,72,72,0,0,73,73,73,73,0,0,73,73,73,0,0,74,74,74,74,0,74,74,74,0,0,327,327,327,327,327,327,327,327,327,0,0,0,0,0,0,0,0,0,0,0,328,328,328,328,328,328,328,328,328,328,328,328,328,328,328,328,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,75,75,75,75,75,75,75,0,0,0,329,329,329,329,329,329,329,329,0,0,0,330,330,330,330,330,330,330,330,0,0,0,331,331,331,331,331,331,331,331,0,0,0,332,332,332,332,332,332,332,332,0,0,0,333,333,333,333,333,333,333,333,0,0,0,334,334,334,334,334,334,334,334,0,0,0,335,335,335,335,335,335,335,335,0,0,0,336,336,336,336,336,336,336,336,0,0,0,337,337,337,337,337,337,337,337,0,0,0,338,338,338,338,338,338,338,338,0,339,0,339,0,339,0,0,339,0,0,339,339,339,339,339,339,339,339,0,0,0,340,340,340,340,340,340,340,340,0,0,0,341,341,341,341,341,341,341,341,0,0,0,342,342,342,342,342,342,342,342,0,0,0,343,343,343,343,343,343,343,343,0,0,0,344,344,344,344,344,344,344,344,0,0,0,345,345,345,345,345,345,345,345,0,0,0,346,346,346,346,346,346,346,346,0,347,0,347,0,347,0,0,347,0,0,347,347,347,347,347,347,347,347,0,0,0,348,348,348,348,348,348,348,348,0,0,0,0,0,0,0,0,0,76,76,76,76,76,76,76,76,0,0,0,349,349,349,349,349,349,349,349,0,0,0,350,350,350,350,350,350,350,350,0,0,0,351,351,351,351,351,351,351,351,0,0,0,352,352,352,352,352,352,352,352,0,0,0,77,77,77,77,77,77,77,77,0,0,0,353,353,353,353,353,353,353,353,0,0,0,0,0,0,0,0,0,0,0,78,78,78,78,78,78,78,78,0,0,0,354,354,354,354,354,354,354,354,0,0,0,355,355,355,355,355,355,355,355,0,0,0,356,356,356,356,356,356,356,356,0,0,0,357,357,357,357,357,357,357,357,0,0,0,358,358,358,358,358,358,358,358,0,0,0,0,0,0,0,0,0,79,79,79,79,79,79,79,79,0,0,0,359,359,359,359,359,359,359,359,0,0,0,360,360,360,360,360,360,360,360,0,0,0,361,361,361,361,361,361,361,361,0,0,0,362,362,362,362,362,362,362,362,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,80,80,80,80,80,80,80,0,0,0,363,363,363,363,363,363,363,363,0,364,0,0,364,0,0,364,364,364,364,364,364,364,364,0,0,0,365,365,365,365,365,365,365,365,0,0,0,366,366,366,366,366,366,366,366,0,367,0,0,367,0,0,367,367,367,367,367,367,367,367,0,0,0,368,368,368,368,368,368,368,368,0,0,0,369,369,369,369,369,369,369,369,0,370,0,0,370,0,0,370,370,370,370,370,370,370,370,0,371,0,0,371,0,0,371,371,371,371,371,371,371,371,0,372,0,372,0,0,0,372,372,372,372,372,372,372,372,0,0,373,0,373,0,0,373,373,373,373,373,373,373,373,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,81,81,81,81,81,81,81,0,0,0,374,374,374,374,374,374,374,374,0,0,0,375,375,375,375,375,375,375,375,0,0,0,376,376,376,376,376,376,376,376,0,0,0,377,377,377,377,377,377,377,377,0,0,0,378,378,378,378,378,378,378,378,0,0,0,379,379,379,379,379,379,379,379,0,0,0,380,380,380,380,380,380,380,380,0,0,0,381,381,381,381,381,381,381,381,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,382,382,382,382,382,382,382,382,382,382,382,382,382,382,382,382,382,382,382,382,382,382,382,382,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,82,82,82,82,82,82,82,0,0,0,383,383,383,383,383,383,383,383,0,0,0,384,384,384,384,384,384,384,384,0,0,0,385,385,385,385,385,385,385,385,0,0,0,386,386,386,386,386,386,386,386,0,0,0,387,387,387,387,387,387,387,387,0,0,0,388,388,388,388,388,388,388,388,0,0,0,389,389,389,389,389,389,389,389,0,0,0,390,390,390,390,390,390,390,390,0,0,0,391,391,391,391,391,391,391,391,0,0,0,392,392,392,392,392,392,392,392,0,0,0,393,393,393,393,393,393,393,393,0,0,0,394,394,394,394,394,394,394,394,0,0,0,0,0,0,0,83,83,83,83,83,83,83,83,0,0,0,395,395,395,395,395,395,395,395,0,0,0,396,396,396,396,396,396,396,396,0,0,0,397,397,397,397,397,397,397,397,0,0,0,0,0,0,0,0,0,0,0,84,84,84,84,84,84,84,84,0,0,0,398,398,398,398,398,398,398,398,0,0,0,399,399,399,399,399,399,399,399,0,0,0,400,400,400,400,400,400,400,400,0,0,0,401,401,401,401,401,401,401,401,0,0,0,402,402,402,402,402,402,402,402,0,0,0,85,85,85,85,85,85,85,85,0,0,0,403,403,403,403,403,403,403,403,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,86,86,86,86,86,86,86,0,0,0,404,404,404,404,404,404,404,404,0,0,0,405,405,405,405,405,405,405,405,0,0,0,406,406,406,406,406,406,406,406,0,0,0,407,407,407,407,407,407,407,407,0,0,0,408,408,408,408,408,408,408,408,0,0,0,409,409,409,409,409,409,409,409,0,0,0,410,410,410,410,410,410,410,410,0,0,0,411,411,411,411,411,411,411,411,0,0,0,412,412,412,412,412,412,412,412,0,0,0,87,87,87,87,87,87,87,87,0,0,0,413,413,413,413,413,413,413,413,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,88,88,88,88,88,88,88,0,0,0,414,414,414,414,414,414,414,414,0,0,0,415,415,415,415,415,415,415,415,0,0,0,416,416,416,416,416,416,416,416,0,0,0,417,417,417,417,417,417,417,417,0,0,0,418,418,418,418,418,418,418,418,0,0,0,419,419,419,419,419,419,419,419,0,0,0,420,420,420,420,420,420,420,420,0,0,0,421,421,421,421,421,421,421,421,0,0,0,422,422,422,422,422,422,422,422,0,0,0,423,423,423,423,423,423,423,423,0,0,0,424,424,424,424,424,424,424,424,0,0,0,0,0,0,0,0,0,89,89,89,89,89,89,89,89,0,425,0,425,0,425,0,0,425,0,425,0,0,425,425,425,425,425,425,425,425,0,0,0,426,426,426,426,426,426,426,426,0,427,0,427,0,427,0,0,427,0,427,0,0,427,427,427,427,427,427,427,427,0,0,0,428,428,428,428,428,428,428,428,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,90,90,90,90,90,90,90,0,0,0,429,429,429,429,429,429,429,429,0,0,0,430,430,430,430,430,430,430,430,0,0,0,431,431,431,431,431,431,431,431,0,0,0,432,432,432,432,432,432,432,432,0,0,0,433,433,433,433,433,433,433,433,0,0,0,434,434,434,434,434,434,434,434,0,0,0,435,435,435,435,435,435,435,435,0,0,0,436,436,436,436,436,436,436,436,0,0,0,437,437,437,437,437,437,437,437,0,0,0,438,438,438,438,438,438,438,438,0,0,0,439,439,439,439,439,439,439,439,0,0,0,0,0,91,91,91,91,91,91,91,91,0,0,0,440,440,440,440,440,440,440,440,0,0,0,441,441,441,441,441,441,441,441,0,0,0,0,0,92,92,92,92,92,92,92,92,0,0,0,442,442,442,442,442,442,442,442,0,0,0,443,443,443,443,443,443,443,443,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,93,93,93,93,93,93,93,0,0,0,444,444,444,444,444,444,444,444,0,0,0,445,445,445,445,445,445,445,445,0,0,0,446,446,446,446,446,446,446,446,0,0,0,447,447,447,447,447,447,447,447,0,0,0,448,448,448,448,448,448,448,448,0,0,0,449,449,449,449,449,449,449,449,0,0,0,450,450,450,450,450,450,450,450,0,0,0,451,451,451,451,451,451,451,451,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,94,94,94,94,94,94,94,0,0,0,452,452,452,452,452,452,452,452,0,453,0,453,0,0,0,453,453,453,453,453,453,453,453,0,0,0,454,454,454,454,454,454,454,454,0,0,0,455,455,455,455,455,455,455,455,0,0,0,456,456,456,456,456,456,456,456,0,0,0,457,457,457,457,457,457,457,457,0,458,0,458,0,0,458,0,458,0,0,458,458,458,458,458,458,458,458,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,95,95,95,95,95,95,95,0,0,0,459,459,459,459,459,459,459,459,0,0,0,460,460,460,460,460,460,460,460,0,0,0,461,461,461,461,461,461,461,461,0,0,0,462,462,462,462,462,462,462,462,0,0,0,463,463,463,463,463,463,463,463,0,0,0,464,464,464,464,464,464,464,464,0,0,0,465,465,465,465,465,465,465,465,0,0,0,466,466,466,466,466,466,466,466,0,0,0,467,467,467,467,467,467,467,467,0,0,0,468,468,468,468,468,468,468,468,0,0,0,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,96,96,96,96,96,96,96,0,0,0,470,470,470,470,470,470,470,470,0,0,0,471,471,471,471,471,471,471,471,0,0,0,472,472,472,472,472,472,472,472,0,0,0,473,473,473,473,473,473,473,473,0,0,0,474,474,474,474,474,474,474,474,0,0,0,475,475,475,475,475,475,475,475,0,0,0,476,476,476,476,476,476,476,476,0,0,0,477,477,477,477,477,477,477,477,0,0,0,478,478,478,478,478,478,478,478,0,0,0,479,479,479,479,479,479,479,479,0,0,0,480,480,480,480,480,480,480,480,0,0,0,0,0,0,0,0,0,97,97,97,97,97,97,97,97,0,0,0,481,481,481,481,481,481,481,481,0,0,0,482,482,482,482,482,482,482,482,0,0,0,483,483,483,483,483,483,483,483,0,0,0,484,484,484,484,484,484,484,484,0,0,0,98,98,98,98,98,98,98,98,0,0,0,485,485,485,485,485,485,485,485,0,0,0,0,0,0,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,99,99,99,99,99,99,99,0,0,0,487,487,487,487,487,487,487,487,0,488,0,0,488,0,0,488,488,488,488,488,488,488,488,0,489,0,0,489,0,0,489,489,489,489,489,489,489,489,0,490,0,490,0,0,0,490,490,490,490,490,490,490,490,0,491,0,491,0,0,0,491,491,491,491,491,491,491,491,492,0,492,0,0,0,0,492,492,492,492,492,492,492,492,493,0,493,0,0,0,0,493,493,493,493,493,493,493,493,0,0,0,494,494,494,494,494,494,494,494,0,0,0,495,495,495,495,495,495,495,495,0,0,0,496,496,496,496,496,496,496,496,0,0,0,497,497,497,497,497,497,497,497,0,0,0,498,498,498,498,498,498,498,498,0,0,0,499,499,499,499,499,499,499,499,0,0,0,500,500,500,500,500,500,500,500,0,0,0,501,501,501,501,501,501,501,501,0,0,0,0,0,0,0,100,100,100,100,100,100,100,100,0,0,0,502,502,502,502,502,502,502,502,0,0,0,503,503,503,503,503,503,503,503,0,0,0,504,504,504,504,504,504,504,504,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,101,101,101,101,101,101,101,0,0,0,505,505,505,505,505,505,505,505,0,0,0,506,506,506,506,506,506,506,506,0,0,0,507,507,507,507,507,507,507,507,0,0,0,508,508,508,508,508,508,508,508,0,0,0,509,509,509,509,509,509,509,509,0,0,0,510,510,510,510,510,510,510,510,0,0,0,511,511,511,511,511,511,511,511,0,0,0,512,512,512,512,512,512,512,512,0,0,0,513,513,513,513,513,513,513,513,0,0,0,0,0,0,0,0,0,0,0,0,514,514,514,514,514,514,514,514,514,514,514,514,514,0,0,0,102,102,102,102,102,102,102,102,0,0,0,515,515,515,515,515,515,515,515,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,103,103,103,103,103,103,103,0,0,0,516,516,516,516,516,516,516,516,0,0,0,517,517,517,517,517,517,517,517,0,0,0,518,518,518,518,518,518,518,518,0,519,0,519,0,0,0,519,519,519,519,519,519,519,519,0,520,0,520,0,0,0,520,520,520,520,520,520,520,520,0,521,0,521,0,521,0,0,0,521,521,521,521,521,521,521,521,522,0,522,0,0,0,0,522,522,522,522,522,522,522,522,523,0,523,0,0,0,0,523,523,523,523,523,523,523,523,524,0,524,0,0,0,0,524,524,524,524,524,524,524,524,525,0,525,0,0,0,0,525,525,525,525,525,525,525,525,0,0,0,526,526,526,526,526,526,526,526,0,0,0,527,527,527,527,527,527,527,527,0,0,0,528,528,528,528,528,528,528,528,0,0,0,529,529,529,529,529,529,529,529,0,0,0,530,530,530,530,530,530,530,530,0,531,0,0,531,0,0,531,531,531,531,531,531,531,531,0,0,0,532,532,532,532,532,532,532,532,0,0,0,533,533,533,533,533,533,533,533,0,0,0,534,534,534,534,534,534,534,534,0,0,0,535,535,535,535,535,535,535,535,0,0,0,536,536,536,536,536,536,536,536,0,0,0,537,537,537,537,537,537,537,537,0,0,0,538,538,538,538,538,538,538,538,0,0,0,539,539,539,539,539,539,539,539,0,0,0,540,540,540,540,540,540,540,540,0,0,0,0,0,0,0,0,0,104,104,104,104,104,104,104,104,0,0,0,541,541,541,541,541,541,541,541,0,0,0,542,542,542,542,542,542,542,542,0,0,0,543,543,543,543,543,543,543,543,0,0,0,544,544,544,544,544,544,544,544,0,0,0,105,105,105,105,105,105,105,105,0,0,0,545,545,545,545,545,545,545,545,0,0,0,106,106,106,106,106,106,106,106,0,0,0,546,546,546,546,546,546,546,546,0,0,0,107,107,107,107,107,107,107,107,0,0,0,547,547,547,547,547,547,547,547,0,0,0,548,548,548,548,548,548,548,548,548,548,548,0,0,0,108,108,108,108,108,108,108],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],0,[[[3,[1,2]]],[[3,[1,2]]]],[4,4],[[4,4],5],[[],[[3,[[0,[1,6]],2]]]],0,[[4,4],7],[[[3,[[0,[1,8]],2]],9],10],[[4,9],10],[[]],[[[11,[1,2]]],[[3,[1,2]]]],[[]],[[[3,[1,2]]]],0,[4],[[]],[[]],0,[[[3,[1,2]],[11,[1,2]]]],[[4,4],7],[1,[[3,[1,2]]]],[[4,4],[[12,[5]]]],0,0,0,[[[3,[1,2]],1]],0,0,[4,[[12,[13]]]],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],0,[[[3,[1,2]],[11,[1,2]]]],0,0,0,0,0,0,0,[[]],[[]],0,0,[[]],[[]],0,0,0,0,0,0,[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[16,16],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[18,18],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[19,19],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[20,20],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[21,21],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],0,0,[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,0,0,[[],15],[[],15],[[],15],0,0,0,0,0,0,0,[[]],[[]],[22,22],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[23,23],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[24,24],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[25,25],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[26,26],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[27,27],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[28,28],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[29,29],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,0,0,[[]],[[]],[30,30],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[31,31],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[32,32],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[33,33],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[34,34],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[35,35],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[36,36],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[37,37],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[38,38],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,0,0,0,0,0,[[]],[[]],0,[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[39,39],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[40,40],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[41,41],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,[[]],[[]],[42,42],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[43,43],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[44,44],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[45,45],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[46,46],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[47,47],[48,48],[49,49],0,0,0,0,0,0,0,0,0,[[],47],[[],48],[[],49],0,0,0,0,0,0,0,0,[50,51],0,[50,51],[50,52],[50,53],0,[50,53],[50,53],[50,53],[50,51],[50,51],[50,51],[50,51],[50,51],[50,52],0,[50,52],[50,52],0,[[47,9],10],[[48,9],10],[[49,9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,0,0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[54,54],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[55,55],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,0,0,[[]],[[]],[56,56],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[57,57],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[58,58],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[59,59],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[60,60],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[61,61],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[62,62],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[63,63],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,[[]],[[]],[64,64],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[65,65],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[66,66],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],[67,[[69,[17,68]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],[67,[[69,[17,70]]]],0,[[]],[[]],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,[[],14],[[],14],[[],15],0,0,[[]],[[]],[67,[[11,[17,71]]]],[[]],[[]],[67,[[69,[17,71]]]],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[67,[[69,[17,72]]]],[[],14],[[],14],[[],15],0,0,[[]],[[]],[[]],[[]],[67,[[69,[17,73]]]],[67,[[11,[17,73]]]],[[],14],[[],14],[[],15],0,0,[[]],[[]],[[]],[[]],[67,[[69,[17,74]]]],[[],14],[[],14],[[],15],0,0,[[]],[[]],[[]],[[]],0,0,[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,0,0,[[]],0,0,[[]],0,0,0,[[],14],[[],14],0,[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[75,75],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,[[]],[[]],[76,76],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[77,77],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[78,78],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,0,0,[[]],[[]],[79,79],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[80,80],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[81,81],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,0,0,0,0,[[]],0,0,0,0,[[]],0,0,0,0,0,0,0,0,[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[82,82],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[83,83],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[84,84],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[85,85],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[86,86],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[87,87],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[88,88],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,[[]],[[]],[89,89],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[90,90],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,[[]],[[]],[91,91],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,[[]],[[]],[92,92],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[93,93],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[94,94],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[95,95],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[96,96],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,0,0,[[]],[[]],[97,97],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[98,98],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,[[]],[[]],0,0,0,0,0,[[]],[[]],0,0,0,[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[99,99],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[100,100],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[101,101],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,0,0,0,0,[[]],[[]],0,[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[102,102],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[103,103],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,0,0,0,0,0,0,[[]],[[]],[104,104],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[105,105],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[17,12],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[106,106],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],[107,107],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[],14],[17,12],[[],14],[[],15],0,0,0,[[]],[[]],0,0,0,0,[[]],[[]],[[],14],[[],14],[[],15],[67,[[69,[17,108]]]],[67,[[11,[17,108]]]],0,[[]],[[]],[[]],[[]],[[],14],[[],14],[[],15]],"p":[[8,"UIntLike"],[8,"RegisterLongName"],[3,"MemoryField"],[3,"Vpa"],[4,"Ordering"],[8,"Default"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"FieldValue"],[4,"Option"],[15,"u64"],[4,"Result"],[3,"TypeId"],[3,"Register"],[15,"u32"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"DmaCb"],[3,"DmaLiteCb"],[3,"Dma4Cb"],[3,"Dma0Registers"],[3,"DmaRegisters"],[3,"DmaLiteRegisters"],[3,"Dma4Registers"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[15,"usize"],[3,"Register"],[3,"Field"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Register"],[3,"Registers"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[3,"Registers"],[3,"MiniUartRegisters"],[3,"SpiRegisters"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[3,"Registers"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[3,"Registers"],[3,"Registers"],[3,"Registers"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[3,"Registers"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[3,"Registers"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[3,"Registers"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[4,"Value"],[3,"Registers"]]},\
"darling":{"doc":"Darling","t":[3,8,8,8,8,8,8,8,8,6,0,0,10,11,11,10,10,10,10,11,11,11,11,11,10,11,10,11,0,14,14,0,13,16,4,13,3,4,8,3,13,16,13,13,4,13,13,16,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,12,12,3,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,8,8,13,8,6,6,6,6,3,4,8,8,11,11,11,11,11,11,11,11,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,8,13,3,3,3,13,13,13,4,3,4,3,3,13,13,3,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,12,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["Error","FromAttributes","FromDeriveInput","FromField","FromGenericParam","FromGenerics","FromMeta","FromTypeParam","FromVariant","Result","ast","error","from_attributes","from_bool","from_char","from_derive_input","from_field","from_generic_param","from_generics","from_list","from_meta","from_nested_meta","from_none","from_string","from_type_param","from_value","from_variant","from_word","usage","uses_lifetimes","uses_type_params","util","Const","ConstParam","Data","Enum","Fields","GenericParam","GenericParamExt","Generics","Lifetime","LifetimeDef","Struct","Struct","Style","Tuple","Type","TypeParam","Unit","as_const_param","as_const_param","as_lifetime_def","as_lifetime_def","as_ref","as_ref","as_shape","as_type_param","as_type_param","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","collect_lifetimes","collect_lifetimes_cloned","collect_type_params","collect_type_params_cloned","empty_from","empty_from","eq","eq","eq","eq","eq","fields","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_generic_param","from_generics","from_type_param","into","into","into","into","into","into_iter","is_empty","is_enum","is_newtype","is_struct","is_struct","is_struct","is_tuple","is_tuple","is_unit","is_unit","iter","len","map","map_enum_variants","map_struct","map_struct_fields","ne","ne","ne","new","params","span","split","style","take_enum","take_struct","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","try_empty_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_params","uses_lifetimes","uses_lifetimes","uses_type_params","uses_type_params","where_clause","with_span","0","0","0","0","0","Accumulator","Error","IntoIter","Result","accumulator","at","at_path","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cause","checkpoint","clone","clone_into","custom","default","description","drop","duplicate_field","duplicate_field_path","explicit_span","extend","finish","finish_with","flatten","fmt","fmt","fmt","from","from","from","from","handle","handle_in","has_span","into","into","into","into_inner","into_iter","into_iter","len","missing_field","multiple","next","push","span","to_owned","to_string","too_few_items","too_many_items","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unexpected_lit_type","unexpected_type","unknown_field","unknown_field_path","unknown_field_with_alts","unknown_value","unsupported_format","unsupported_shape","unsupported_shape_with_expected","with_span","write_errors","BoundImpl","CollectLifetimes","CollectTypeParams","Declare","GenericsExt","IdentRefSet","IdentSet","LifetimeRefSet","LifetimeSet","Options","Purpose","UsesLifetimes","UsesTypeParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","collect_lifetimes","collect_lifetimes_cloned","collect_type_params","collect_type_params_cloned","declared_lifetimes","declared_type_params","eq","fmt","fmt","from","from","from","include_type_path_qself","into","into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","uses_lifetimes","uses_lifetimes_cloned","uses_type_params","uses_type_params_cloned","AsShape","Explicit","Flag","IdentString","Ignored","Inherit","Named","Newtype","Override","PathList","Shape","ShapeSet","SpannedValue","Tuple","Unit","WithOriginal","as_ident","as_mut","as_ref","as_ref","as_ref","as_ref","as_shape","as_shape","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","default","default","default","default","default","default","deref","deref","deref_mut","description","eq","eq","eq","eq","eq","eq","eq","eq","explicit","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_derive_input","from_derive_input","from_derive_input","from_field","from_field","from_field","from_generic_param","from_generic_param","from_generic_param","from_generics","from_generics","from_generics","from_iter","from_list","from_list","from_meta","from_meta","from_meta","from_meta","from_meta","from_none","from_type_param","from_type_param","from_type_param","from_value","from_variant","from_variant","from_variant","from_word","hash","hash","insert","insert_all","into","into","into","into","into","into","into","into","into","is_empty","is_explicit","is_present","is_some","map","map_ref","ne","ne","ne","new","new","new","new","new","original","parse_attribute_to_meta_list","parsed","partial_cmp","path_to_string","present","span","span","span","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_strings","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap_or","unwrap_or_default","unwrap_or_else","uses_lifetimes","uses_type_params","0"],"q":["darling","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darling::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darling::ast::Data","","darling::ast::GenericParam","","","darling::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darling::usage","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darling::utildarling::util::Override"],"d":["An error encountered during attribute parsing.","Create an instance by parsing a list of attributes.","Creates an instance by parsing an entire proc-macro <code>derive</code> …","Creates an instance by parsing an individual field and its …","Creates an instance by parsing a specific <code>syn::GenericParam</code>…","Creates an instance by parsing an entire generics …","Create an instance from an item in an attribute …","Creates an instance by parsing an individual type_param …","Creates an instance from a specified <code>syn::Variant</code>.","An alias of <code>Result</code> specific to attribute parsing.","Utility types for working with the AST.","The <code>darling::Error</code> type, the multiple error <code>Accumulator</code>, …","Create an instance by parsing a list of attributes.","Create an instance from a bool literal in a value position.","Create an instance from a char literal in a value position.","Create an instance from <code>syn::DeriveInput</code>, or return an …","","","","Create an instance from a list of nested meta items.","Create an instance from a <code>syn::Meta</code> by dispatching to the …","","When a field is omitted from a parent meta-item, <code>from_none</code> …","Create an instance from a string literal in a value …","","Create an instance from a literal value of either …","Create an instance from <code>syn::Variant</code>, or return an error.","Create an instance from the presence of the word in the …","Traits and types used for tracking the usage of generic …","Generator for <code>UsesLifetimes</code> impls that unions the used …","Generator for <code>UsesTypeParam</code> impls that unions the used …","Utility types for attribute parsing.","","","A struct or enum body.","","Equivalent to <code>syn::Fields</code>, but replaces the AST element …","A mirror of <code>syn::GenericParam</code> which is generic over all …","Extension trait for <code>GenericParam</code> to support getting values …","A mirror of the <code>syn::Generics</code> type which can contain …","","","","","","","","The type this GenericParam uses to represent type params …","","If this GenericParam is a const param, get the underlying …","","If this GenericParam is a lifetime, get the underlying …","","Creates a new <code>Data&lt;&amp;&#39;a V, &amp;&#39;a F&gt;</code> instance from <code>Data&lt;V, F&gt;</code>.","","","If this GenericParam is a type param, get the underlying …","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an empty body of the same shape as the passed-in …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the <code>Fields</code> contains no fields.","Returns <code>true</code> if this instance is <code>Data::Enum</code>.","Returns true if this variant’s data makes it a newtype.","Returns <code>true</code> if this instance is <code>Data::Struct</code>.","","","","","","","","Returns the number of fields in the structure.","","Applies a function <code>V -&gt; U</code> on enum variants, if this is an …","Applies a function to the <code>Fields</code> if this is a struct.","Applies a function <code>F -&gt; U</code> on struct fields, if this is a …","","","","Creates a new <code>Fields</code> struct.","","","Splits the <code>Fields</code> into its style and fields for further …","","Consumes the <code>Data</code>, returning <code>Vec&lt;V&gt;</code> if it was an enum.","Consumes the <code>Data</code>, returning <code>Fields&lt;F&gt;</code> if it was a struct.","","","","","","","Creates an empty body of the same shape as the passed-in …","","Attempt to convert from a <code>syn::Data</code> instance.","","","","","","","","","","","","","","","","","","","","","","Adds a <code>Span</code> to <code>Fields</code>.","","","","","","Accumulator for errors, for helping call <code>Error::multiple</code>.","An error encountered during attribute parsing.","An iterator that moves out of an <code>Error</code>.","An alias of <code>Result</code> specific to attribute parsing.","Creates an error collector, for aggregating multiple errors","Adds a location to the error, such as a field or variant. …","Adds a location to the error, such as a field or variant. …","","","","","","","","Finish the current accumulation, and if there are no …","","","Creates a new error with a custom message.","","","","Creates a new error for a field that appears twice in the …","Creates a new error for a field that appears twice in the …","Get the span for <code>self</code>, if one has been set.","","Stop accumulating errors, producing <code>Ok</code> if there are no …","Bundles the collected errors if there were any, or returns …","Recursively converts a tree of errors to a flattened list.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Handles a possible error.","Runs a closure, returning the successful value as <code>Some</code>, or …","Check if this error is associated with a span in the token …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the accumulated errors as a <code>Vec</code>.","","","Gets the number of individual errors in this error.","Creates a new error for a non-optional field that does not …","Bundle a set of multiple errors into a single <code>Error</code> …","","Add one error to the collection.","Get a span for the error.","","","Creates a new error for a list which did not get enough …","Creates a new error when a list got more items than it …","","","","","","","","","","Creates a new error for a field which has an unexpected …","Creates a new error for a field which has an unexpected …","Creates a new error for a field name that appears in the …","Creates a new error for a field name that appears in the …","Creates a new error for a field name that appears in the …","Creates a new error for a value which doesn’t match a …","","Creates a new error for a struct or variant that does not …","","Tie a span to the error if none is already present. This …","Write this error and any children as compile errors into a …","The tracing is being used to generate an <code>impl</code> block.","Searcher for finding lifetimes in an iterator.","Searcher for finding type params in an iterator.","The tracing is being used to generate a new struct or enum.","Extension trait for pulling specific generics data from a …","A set of references to idents.","A set of idents.","A set of references to lifetimes.","A set of lifetimes.","Control struct for searching type parameters.","The goal of tracing generic parameter usage.","Searcher for finding lifetimes in a syntax tree. This can …","Searcher for finding type params in a syntax tree. This …","","","","","","","","","Consume an iterator, accumulating all lifetimes in the …","Consume an iterator using <code>collect_lifetimes</code>, then clone …","Consume an iterator, accumulating all type parameters in …","Consume an iterator using <code>collect_type_params</code>, then clone …","Get the set of all lifetimes declared by the syntax …","Get the set of all type parameters declared by the syntax …","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns <code>true</code> if the implementer of <code>UseTypeParams</code> should …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the subset of the queried lifetimes that are used …","Find all used lifetimes, then clone them and return that …","Returns the subset of the queried type parameters that are …","Find all type params using <code>uses_type_params</code>, then clone …","Get the “shape” of a fields container, such as a …","Explicitly set the value.","A meta-item that can be present as a word - with no value …","A wrapper for an <code>Ident</code> which also keeps the value as a …","An efficient way of discarding data from a syntax element.","Inherit the eventual value from an external source.","A set of named fields, e.g. <code>{ field: String }</code>.","A special case of <code>Tuple</code> with exactly one field, e.g. …","A value which can inherit a default value or have an …","A list of <code>syn::Path</code> instances. This type is used to …","Description of how fields in a struct or variant are …","A set of <code>Shape</code> values, which correctly handles the …","A value and an associated position in source code. The …","A list of unnamed fields, e.g. <code>(String, u64)</code>.","No fields, e.g. <code>struct Example;</code>","A container to parse some syntax and retain access to the …","Get the ident as a <code>proc_macro2::Ident</code>.","Converts from <code>Override&lt;T&gt;</code> to <code>Override&lt;&amp;mut T&gt;</code>.","","","Converts from <code>Override&lt;T&gt;</code> to <code>Override&lt;&amp;T&gt;</code>.","","Get the “shape” of a fields container.","","Get the ident as a string.","","","","","","","","","","","","","","","","","","","Check if a field container’s shape is in this set of …","","","","","","","","","","","","","","","","","","","","Check if a fields container’s shape is in this set.","","","","","","","","","","","","","","","","","","","Converts from <code>Override&lt;T&gt;</code> to <code>Option&lt;T&gt;</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Insert a shape into the set, so that the set will match …","Insert all possible shapes into the set.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether this set is empty.","Returns <code>true</code> if the override is an <code>Explicit</code> value.","Check if the flag is present.","","Apply some transform to the ident’s string …","Apply a mapping function to a reference to the spanned …","","","","Create a new <code>IdentString</code>.","Create a new list.","Create a new <code>ShapeSet</code> which includes the specified items.","","","","Try to parse an attribute into a meta list. Path-type meta …","","","Transform Rust paths to a readable and comparable string.","Creates a new <code>Flag</code> which corresponds to the presence of a …","","Get the location of this <code>Ident</code> in source.","","","Get the source code location referenced by this struct.","","","","","","","","","","","","","","Create a new <code>Vec</code> containing the string representation of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unwraps an override, yielding the content of an <code>Explicit</code>. …","Returns the contained value or the default value of <code>T</code>.","Unwraps an override, yielding the content of an <code>Explicit</code>. …","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,63,64,64,65,66,67,68,64,64,64,64,64,69,64,70,64,0,0,0,0,16,71,0,17,0,0,0,0,16,71,17,20,0,20,16,71,20,71,16,71,16,17,18,18,71,16,17,18,20,16,21,17,18,20,16,21,17,18,20,16,21,17,18,20,16,21,18,18,18,18,17,18,17,18,20,16,21,18,17,18,20,16,21,17,18,18,18,20,20,20,16,21,16,21,16,17,18,20,16,21,18,18,17,18,17,18,20,18,20,18,20,18,18,18,17,17,17,17,16,21,18,21,18,18,18,17,17,17,18,20,16,21,18,17,17,17,18,18,20,16,21,17,18,20,16,21,17,18,20,16,21,21,17,18,17,18,21,18,72,73,74,75,76,0,0,0,0,1,1,1,47,1,43,47,1,43,1,43,1,1,1,43,1,43,1,1,1,43,43,43,1,1,1,43,47,1,1,43,43,43,1,47,1,43,43,47,1,1,1,1,47,43,1,1,1,1,1,47,1,43,47,1,43,47,1,43,1,1,1,1,1,1,1,1,1,1,1,49,0,0,49,0,0,0,0,0,0,0,0,0,49,22,49,22,49,22,49,22,77,77,78,78,79,79,49,49,22,49,22,22,22,49,22,49,22,49,22,49,22,49,22,80,80,81,81,0,51,0,0,0,51,19,19,0,0,0,0,0,19,19,0,50,51,50,50,51,52,82,19,50,54,50,55,51,56,19,53,52,57,54,50,55,51,56,19,53,52,57,53,54,50,55,51,56,19,53,52,57,54,50,55,51,56,19,53,52,57,50,53,54,55,51,56,53,52,56,52,52,19,50,50,50,55,51,56,19,57,51,54,50,50,55,51,51,56,19,19,53,53,52,57,54,54,50,50,55,51,51,56,56,19,53,52,52,57,55,52,57,55,52,57,55,52,57,55,52,57,53,51,56,54,50,55,52,57,54,55,52,57,51,55,52,57,51,50,55,53,53,54,50,55,51,56,19,53,52,57,53,51,54,54,50,52,51,56,57,50,56,53,52,57,57,0,57,50,0,54,54,50,50,52,52,54,50,55,51,56,19,53,52,57,50,51,19,53,56,50,54,50,55,51,56,19,53,52,57,54,50,55,51,56,19,53,52,57,54,50,55,51,56,19,53,52,57,51,51,51,55,55,83],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[],[[2,[1]]]],[3,[[2,[1]]]],[4,[[2,[1]]]],[5,[[2,[1]]]],[6,[[2,[1]]]],[7,[[2,[1]]]],[8,[[2,[1]]]],[[],[[2,[1]]]],[9,[[2,[1]]]],[10,[[2,[1]]]],[[],11],[12,[[2,[1]]]],[13,[[2,[1]]]],[14,[[2,[1]]]],[15,[[2,[1]]]],[[],[[2,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],11],[16,11],[[],11],[16,11],[17,17],[18,18],[18,19],[[],11],[16,11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[17,17],[18,18],[20,20],[16,16],[21,21],[[]],[[]],[[]],[[]],[[]],[[22,23],[[23,[24,[26,[25]]]]]],[[22,23],[[23,[24,[26,[25]]]]]],[[22,23],[[23,[27,[26,[25]]]]]],[[22,23],[[23,[27,[26,[25]]]]]],[28,17],[29,18],[[17,17],3],[[18,18],3],[[20,20],3],[[16,16],3],[[21,21],3],0,[[17,30],[[2,[31]]]],[[18,30],[[2,[31]]]],[[20,30],[[2,[31]]]],[[16,30],[[2,[31]]]],[[21,30],[[2,[31]]]],[[]],[[]],[[],18],[20,18],[[]],[29,20],[29,20],[[]],[[]],[7,[[2,[[16,[32,33]],1]]]],[8,[[2,[[21,[34]],1]]]],[13,[[2,[[16,[32,33]],1]]]],[[]],[[]],[[]],[[]],[[]],[18],[18,3],[17,3],[18,3],[17,3],[18,3],[20,3],[18,3],[20,3],[18,3],[20,3],[18,35],[18,36],[18,18],[17,17],[17,17],[17,17],[[17,17],3],[[16,16],3],[[21,21],3],[[20,[38,[37]]],18],0,[[],39],[18],0,[17,[[11,[[38,[37]]]]]],[17,[[11,[18]]]],[[]],[[]],[[]],[[]],[[]],[[18,40]],[28,[[2,[17,1]]]],[[],2],[28,[[2,[17,1]]]],[[],2],[29,[[2,[18,1]]]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],41],[[],41],[[],41],[[],41],[[],41],[21,42],[[17,22,23],[[23,[24,[26,[25]]]]]],[[18,22,23],[[23,[24,[26,[25]]]]]],[[17,22,23],[[23,[27,[26,[25]]]]]],[[18,22,23],[[23,[27,[26,[25]]]]]],0,[[18,39],18],0,0,0,0,0,0,0,0,0,[[],43],[1,1],[[1,44],1],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[11,[45]]]],[43,[[2,[43,1]]]],[1,1],[[]],[[],1],[[],43],[1,12],[43],[12,1],[44,1],[1,[[11,[39]]]],[43],[43,[[2,[1]]]],[43,[[2,[1]]]],[1,1],[[1,30],[[2,[31]]]],[[1,30],[[2,[31]]]],[[43,30],[[2,[31]]]],[[]],[[]],[46,1],[[]],[[43,[2,[1]]],11],[43,11],[1,3],[[]],[[]],[[]],[43,[[38,[1,37]]]],[[]],[1,47],[1,36],[12,1],[[[38,[1,37]]],1],[47,[[11,[1]]]],[[43,1]],[1,39],[[]],[[],48],[36,1],[36,1],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],41],[[],41],[[],41],[14,1],[12,1],[12,1],[44,1],[12,1],[12,1],[12,1],[12,1],[12,1],[1,1],[1,40],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[49,49],[22,22],[[]],[[]],[[22,23],[[23,[24,[26,[25]]]]]],[[22,23],[[23,[24,[26,[25]]]]]],[[22,23],[[23,[27,[26,[25]]]]]],[[22,23],[[23,[27,[26,[25]]]]]],[[],[[23,[24,[26,[25]]]]]],[[],[[23,[27,[26,[25]]]]]],[[49,49],3],[[49,30],[[2,[31]]]],[[22,30],[[2,[31]]]],[[]],[49,22],[[]],[22,3],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],41],[[],41],[[22,23],[[23,[24,[26,[25]]]]]],[[22,23],[[23,[24,[26,[25]]]]]],[[22,23],[[23,[27,[26,[25]]]]]],[[22,23],[[23,[27,[26,[25]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[50,27],[51,51],[50,12],[50,27],[51,51],[52],[[],19],[19,19],[50,12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[53,[[2,[1]]]],[54,54],[50,50],[55,55],[51,51],[56,56],[19,19],[53,53],[52,52],[57,57],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[50,50],58],[53,3],[[],54],[[],55],[[],51],[[],56],[[],53],[[],52],[56],[52],[52],[19,12],[[50,12],3],[[50,50],3],[[50,48],3],[[55,55],3],[[51,51],3],[[56,56],3],[[19,19],3],[[57,57],3],[51,11],[[54,30],[[2,[31]]]],[[50,30],[[2,[31]]]],[[50,30],[[2,[31]]]],[[55,30],[[2,[31]]]],[[51,30],[[2,[31]]]],[[51,30],[[2,[31]]]],[[56,30],[[2,[31]]]],[[19,30],[[2,[31]]]],[[19,30],[[2,[31]]]],[[53,30],[[2,[31]]]],[[53,30],[[2,[31]]]],[[52,30],[[2,[31]]]],[[57,30],[[2,[31]]]],[3,54],[[]],[[]],[27,50],[[]],[[]],[11,51],[[[38,[44,37]]],56],[[]],[[]],[[]],[[]],[[],52],[[]],[5,[[2,[55,1]]]],[5,[[2,[52,1]]]],[5,[[2,[[57,[5]],1]]]],[6,[[2,[55,1]]]],[6,[[2,[52,1]]]],[6,[[2,[[57,[6]],1]]]],[7,[[2,[55,1]]]],[7,[[2,[52,1]]]],[7,[[2,[[57,[7]],1]]]],[8,[[2,[55,1]]]],[8,[[2,[52,1]]]],[8,[[2,[[57,[8]],1]]]],[[],53],[[],[[2,[51,1]]]],[[],[[2,[56,1]]]],[9,[[2,[54,1]]]],[9,[[2,[50,1]]]],[9,[[2,[55,1]]]],[9,[[2,[52,1]]]],[9,[[2,[[57,[9]],1]]]],[[],[[11,[54]]]],[13,[[2,[55,1]]]],[13,[[2,[52,1]]]],[13,[[2,[[57,[13]],1]]]],[14,[[2,[51,1]]]],[15,[[2,[55,1]]]],[15,[[2,[52,1]]]],[15,[[2,[[57,[15]],1]]]],[[],[[2,[51,1]]]],[50],[55],[[53,19]],[53],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[53,3],[51,3],[54,3],[54,3],[50,50],[[52,59],52],[[51,51],3],[[56,56],3],[[57,57],3],[27,50],[[[38,[37]]],56],[60,53],[39,52],[[],57],0,[61,[[2,[62,1]]]],0,[[50,50],[[11,[58]]]],[44,48],[[],54],[54,39],[50,39],[[],39],[52,39],[52,39],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],48],[[],48],[[],48],[[],48],[56,[[38,[48,37]]]],[[50,40]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[51],[51],[51],[[55,22,23],[[23,[24,[26,[25]]]]]],[[55,22,23],[[23,[27,[26,[25]]]]]],0],"p":[[3,"Error"],[4,"Result"],[15,"bool"],[15,"char"],[3,"DeriveInput"],[3,"Field"],[4,"GenericParam"],[3,"Generics"],[4,"Meta"],[4,"NestedMeta"],[4,"Option"],[15,"str"],[3,"TypeParam"],[4,"Lit"],[3,"Variant"],[4,"GenericParam"],[4,"Data"],[3,"Fields"],[4,"Shape"],[4,"Style"],[3,"Generics"],[3,"Options"],[3,"HashSet"],[3,"Lifetime"],[3,"FnvHasher"],[3,"BuildHasherDefault"],[3,"Ident"],[4,"Data"],[4,"Fields"],[3,"Formatter"],[3,"Error"],[3,"LifetimeDef"],[3,"ConstParam"],[3,"WhereClause"],[3,"Iter"],[15,"usize"],[3,"Global"],[3,"Vec"],[3,"Span"],[3,"TokenStream"],[3,"TypeId"],[3,"TypeParams"],[3,"Accumulator"],[3,"Path"],[8,"Error"],[3,"Error"],[3,"IntoIter"],[3,"String"],[4,"Purpose"],[3,"IdentString"],[4,"Override"],[3,"SpannedValue"],[3,"ShapeSet"],[3,"Flag"],[3,"Ignored"],[3,"PathList"],[3,"WithOriginal"],[4,"Ordering"],[8,"FnOnce"],[8,"IntoIterator"],[3,"Attribute"],[3,"MetaList"],[8,"FromAttributes"],[8,"FromMeta"],[8,"FromDeriveInput"],[8,"FromField"],[8,"FromGenericParam"],[8,"FromGenerics"],[8,"FromTypeParam"],[8,"FromVariant"],[8,"GenericParamExt"],[13,"Enum"],[13,"Struct"],[13,"Type"],[13,"Lifetime"],[13,"Const"],[8,"CollectLifetimes"],[8,"CollectTypeParams"],[8,"GenericsExt"],[8,"UsesLifetimes"],[8,"UsesTypeParams"],[8,"AsShape"],[13,"Explicit"]]},\
"darling_core":{"doc":"","t":[2,8,8,8,8,8,8,8,8,2,0,0,0,10,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,0,14,14,0,13,16,4,13,3,4,8,3,13,16,13,13,4,13,13,16,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,12,12,5,5,5,5,5,5,3,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,8,8,13,8,6,6,6,6,3,4,8,8,11,11,11,11,11,11,11,11,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,8,13,3,3,3,13,13,13,4,3,4,3,3,13,13,3,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,12,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["Error","FromAttributes","FromDeriveInput","FromField","FromGenericParam","FromGenerics","FromMeta","FromTypeParam","FromVariant","Result","ast","derive","error","from_attributes","from_bool","from_bool","from_char","from_char","from_derive_input","from_field","from_generic_param","from_generics","from_list","from_list","from_meta","from_meta","from_nested_meta","from_nested_meta","from_none","from_none","from_string","from_string","from_type_param","from_value","from_value","from_variant","from_word","from_word","usage","uses_lifetimes","uses_type_params","util","Const","ConstParam","Data","Enum","Fields","GenericParam","GenericParamExt","Generics","Lifetime","LifetimeDef","Struct","Struct","Style","Tuple","Type","TypeParam","Unit","as_const_param","as_const_param","as_const_param","as_lifetime_def","as_lifetime_def","as_lifetime_def","as_ref","as_ref","as_shape","as_type_param","as_type_param","as_type_param","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","empty_from","empty_from","eq","eq","eq","eq","eq","fields","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_generic_param","from_generics","from_type_param","into","into","into","into","into","into_iter","is_empty","is_enum","is_newtype","is_struct","is_struct","is_struct","is_tuple","is_tuple","is_unit","is_unit","iter","len","map","map_enum_variants","map_struct","map_struct_fields","ne","ne","ne","new","params","span","split","style","take_enum","take_struct","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","try_empty_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_params","uses_lifetimes","uses_lifetimes","uses_type_params","uses_type_params","where_clause","with_span","0","0","0","0","0","from_attributes","from_derive_input","from_field","from_meta","from_type_param","from_variant","Accumulator","Error","IntoIter","Result","accumulator","at","at_path","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cause","checkpoint","clone","clone_into","custom","default","description","drop","duplicate_field","duplicate_field_path","explicit_span","extend","finish","finish_with","flatten","fmt","fmt","fmt","from","from","from","from","from_generics","from_meta","from_none","handle","handle_in","has_span","into","into","into","into_inner","into_iter","into_iter","len","missing_field","multiple","next","push","span","to_owned","to_string","too_few_items","too_many_items","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unexpected_lit_type","unexpected_type","unknown_field","unknown_field_path","unknown_field_with_alts","unknown_value","unsupported_format","unsupported_shape","unsupported_shape_with_expected","with_span","write_errors","BoundImpl","CollectLifetimes","CollectTypeParams","Declare","GenericsExt","IdentRefSet","IdentSet","LifetimeRefSet","LifetimeSet","Options","Purpose","UsesLifetimes","UsesTypeParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","collect_lifetimes","collect_lifetimes_cloned","collect_type_params","collect_type_params_cloned","declared_lifetimes","declared_type_params","eq","fmt","fmt","from","from","from","include_type_path_qself","into","into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","uses_lifetimes","uses_lifetimes_cloned","uses_lifetimes_cloned","uses_type_params","uses_type_params_cloned","uses_type_params_cloned","AsShape","Explicit","Flag","IdentString","Ignored","Inherit","Named","Newtype","Override","PathList","Shape","ShapeSet","SpannedValue","Tuple","Unit","WithOriginal","as_ident","as_mut","as_ref","as_ref","as_ref","as_ref","as_shape","as_shape","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","default","default","default","default","default","default","deref","deref","deref_mut","description","eq","eq","eq","eq","eq","eq","eq","eq","explicit","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_derive_input","from_derive_input","from_derive_input","from_field","from_field","from_field","from_generic_param","from_generic_param","from_generic_param","from_generics","from_generics","from_generics","from_iter","from_list","from_list","from_meta","from_meta","from_meta","from_meta","from_meta","from_none","from_type_param","from_type_param","from_type_param","from_value","from_variant","from_variant","from_variant","from_word","hash","hash","insert","insert_all","into","into","into","into","into","into","into","into","into","is_empty","is_explicit","is_present","is_some","map","map_ref","ne","ne","ne","new","new","new","new","new","original","parse_attribute_to_meta_list","parsed","partial_cmp","path_to_string","present","span","span","span","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_strings","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap_or","unwrap_or_default","unwrap_or_else","uses_lifetimes","uses_type_params","0"],"q":["darling_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darling_core::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darling_core::ast::Data","","darling_core::ast::GenericParam","","","darling_core::derive","","","","","","darling_core::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darling_core::usage","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","darling_core::utildarling_core::util::Override"],"d":["","Create an instance by parsing a list of attributes.","Creates an instance by parsing an entire proc-macro <code>derive</code> …","Creates an instance by parsing an individual field and its …","Creates an instance by parsing a specific <code>syn::GenericParam</code>…","Creates an instance by parsing an entire generics …","Create an instance from an item in an attribute …","Creates an instance by parsing an individual type_param …","Creates an instance from a specified <code>syn::Variant</code>.","","Utility types for working with the AST.","Functions to derive <code>darling</code>’s traits from well-formed …","The <code>darling::Error</code> type, the multiple error <code>Accumulator</code>, …","Create an instance by parsing a list of attributes.","Create an instance from a bool literal in a value position.","Create an instance from a bool literal in a value position.","Create an instance from a char literal in a value position.","Create an instance from a char literal in a value position.","Create an instance from <code>syn::DeriveInput</code>, or return an …","","","","Create an instance from a list of nested meta items.","Create an instance from a list of nested meta items.","Create an instance from a <code>syn::Meta</code> by dispatching to the …","Create an instance from a <code>syn::Meta</code> by dispatching to the …","","","When a field is omitted from a parent meta-item, <code>from_none</code> …","When a field is omitted from a parent meta-item, <code>from_none</code> …","Create an instance from a string literal in a value …","Create an instance from a string literal in a value …","","Create an instance from a literal value of either …","Create an instance from a literal value of either …","Create an instance from <code>syn::Variant</code>, or return an error.","Create an instance from the presence of the word in the …","Create an instance from the presence of the word in the …","Traits and types used for tracking the usage of generic …","Generator for <code>UsesLifetimes</code> impls that unions the used …","Generator for <code>UsesTypeParam</code> impls that unions the used …","Utility types for attribute parsing.","","","A struct or enum body.","","Equivalent to <code>syn::Fields</code>, but replaces the AST element …","A mirror of <code>syn::GenericParam</code> which is generic over all …","Extension trait for <code>GenericParam</code> to support getting values …","A mirror of the <code>syn::Generics</code> type which can contain …","","","","","","","","The type this GenericParam uses to represent type params …","","If this GenericParam is a const param, get the underlying …","If this GenericParam is a const param, get the underlying …","","If this GenericParam is a lifetime, get the underlying …","If this GenericParam is a lifetime, get the underlying …","","Creates a new <code>Data&lt;&amp;&#39;a V, &amp;&#39;a F&gt;</code> instance from <code>Data&lt;V, F&gt;</code>.","","","If this GenericParam is a type param, get the underlying …","If this GenericParam is a type param, get the underlying …","","","","","","","","","","","","","","","","","","","","","","Creates an empty body of the same shape as the passed-in …","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the <code>Fields</code> contains no fields.","Returns <code>true</code> if this instance is <code>Data::Enum</code>.","Returns true if this variant’s data makes it a newtype.","Returns <code>true</code> if this instance is <code>Data::Struct</code>.","","","","","","","","Returns the number of fields in the structure.","","Applies a function <code>V -&gt; U</code> on enum variants, if this is an …","Applies a function to the <code>Fields</code> if this is a struct.","Applies a function <code>F -&gt; U</code> on struct fields, if this is a …","","","","Creates a new <code>Fields</code> struct.","","","Splits the <code>Fields</code> into its style and fields for further …","","Consumes the <code>Data</code>, returning <code>Vec&lt;V&gt;</code> if it was an enum.","Consumes the <code>Data</code>, returning <code>Fields&lt;F&gt;</code> if it was a struct.","","","","","","","Creates an empty body of the same shape as the passed-in …","Attempt to convert from a <code>syn::Data</code> instance.","","","","","","","","","","","","","","","","","","","","","","","Adds a <code>Span</code> to <code>Fields</code>.","","","","","","Create tokens for a <code>darling::FromAttributes</code> impl from a …","Create tokens for a <code>darling::FromDeriveInput</code> impl from a …","Create tokens for a <code>darling::FromField</code> impl from a …","Create tokens for a <code>darling::FromMeta</code> impl from a …","Create tokens for a <code>darling::FromTypeParam</code> impl from a …","Create tokens for a <code>darling::FromVariant</code> impl from a …","Accumulator for errors, for helping call <code>Error::multiple</code>.","An error encountered during attribute parsing.","An iterator that moves out of an <code>Error</code>.","An alias of <code>Result</code> specific to attribute parsing.","Creates an error collector, for aggregating multiple errors","Adds a location to the error, such as a field or variant. …","Adds a location to the error, such as a field or variant. …","","","","","","","","Finish the current accumulation, and if there are no …","","","Creates a new error with a custom message.","","","","Creates a new error for a field that appears twice in the …","Creates a new error for a field that appears twice in the …","Get the span for <code>self</code>, if one has been set.","","Stop accumulating errors, producing <code>Ok</code> if there are no …","Bundles the collected errors if there were any, or returns …","Recursively converts a tree of errors to a flattened list.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Handles a possible error.","Runs a closure, returning the successful value as <code>Some</code>, or …","Check if this error is associated with a span in the token …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the accumulated errors as a <code>Vec</code>.","","","Gets the number of individual errors in this error.","Creates a new error for a non-optional field that does not …","Bundle a set of multiple errors into a single <code>Error</code> …","","Add one error to the collection.","Get a span for the error.","","","Creates a new error for a list which did not get enough …","Creates a new error when a list got more items than it …","","","","","","","","","","Creates a new error for a field which has an unexpected …","Creates a new error for a field which has an unexpected …","Creates a new error for a field name that appears in the …","Creates a new error for a field name that appears in the …","Creates a new error for a field name that appears in the …","Creates a new error for a value which doesn’t match a …","","Creates a new error for a struct or variant that does not …","","Tie a span to the error if none is already present. This …","Write this error and any children as compile errors into a …","The tracing is being used to generate an <code>impl</code> block.","Searcher for finding lifetimes in an iterator.","Searcher for finding type params in an iterator.","The tracing is being used to generate a new struct or enum.","Extension trait for pulling specific generics data from a …","A set of references to idents.","A set of idents.","A set of references to lifetimes.","A set of lifetimes.","Control struct for searching type parameters.","The goal of tracing generic parameter usage.","Searcher for finding lifetimes in a syntax tree. This can …","Searcher for finding type params in a syntax tree. This …","","","","","","","","","Consume an iterator, accumulating all lifetimes in the …","Consume an iterator using <code>collect_lifetimes</code>, then clone …","Consume an iterator, accumulating all type parameters in …","Consume an iterator using <code>collect_type_params</code>, then clone …","Get the set of all lifetimes declared by the syntax …","Get the set of all type parameters declared by the syntax …","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns <code>true</code> if the implementer of <code>UseTypeParams</code> should …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the subset of the queried lifetimes that are used …","Find all used lifetimes, then clone them and return that …","Find all used lifetimes, then clone them and return that …","Returns the subset of the queried type parameters that are …","Find all type params using <code>uses_type_params</code>, then clone …","Find all type params using <code>uses_type_params</code>, then clone …","Get the “shape” of a fields container, such as a …","Explicitly set the value.","A meta-item that can be present as a word - with no value …","A wrapper for an <code>Ident</code> which also keeps the value as a …","An efficient way of discarding data from a syntax element.","Inherit the eventual value from an external source.","A set of named fields, e.g. <code>{ field: String }</code>.","A special case of <code>Tuple</code> with exactly one field, e.g. …","A value which can inherit a default value or have an …","A list of <code>syn::Path</code> instances. This type is used to …","Description of how fields in a struct or variant are …","A set of <code>Shape</code> values, which correctly handles the …","A value and an associated position in source code. The …","A list of unnamed fields, e.g. <code>(String, u64)</code>.","No fields, e.g. <code>struct Example;</code>","A container to parse some syntax and retain access to the …","Get the ident as a <code>proc_macro2::Ident</code>.","Converts from <code>Override&lt;T&gt;</code> to <code>Override&lt;&amp;mut T&gt;</code>.","","","Converts from <code>Override&lt;T&gt;</code> to <code>Override&lt;&amp;T&gt;</code>.","","Get the “shape” of a fields container.","","Get the ident as a string.","","","","","","","","","","","","","","","","","","","Check if a field container’s shape is in this set of …","","","","","","","","","","","","","","","","","","","","Check if a fields container’s shape is in this set.","","","","","","","","","","","","","","","","","","","Converts from <code>Override&lt;T&gt;</code> to <code>Option&lt;T&gt;</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Insert a shape into the set, so that the set will match …","Insert all possible shapes into the set.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether this set is empty.","Returns <code>true</code> if the override is an <code>Explicit</code> value.","Check if the flag is present.","","Apply some transform to the ident’s string …","Apply a mapping function to a reference to the spanned …","","","","Create a new <code>IdentString</code>.","Create a new list.","Create a new <code>ShapeSet</code> which includes the specified items.","","","","Try to parse an attribute into a meta list. Path-type meta …","","","Transform Rust paths to a readable and comparable string.","Creates a new <code>Flag</code> which corresponds to the presence of a …","","Get the location of this <code>Ident</code> in source.","","","Get the source code location referenced by this struct.","","","","","","","","","","","","","","Create a new <code>Vec</code> containing the string representation of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unwraps an override, yielding the content of an <code>Explicit</code>. …","Returns the contained value or the default value of <code>T</code>.","Unwraps an override, yielding the content of an <code>Explicit</code>. …","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,76,54,54,54,54,71,37,29,53,54,54,54,54,54,54,54,54,54,54,28,54,54,36,54,54,0,0,0,0,15,77,0,16,0,0,0,0,15,77,16,20,0,20,15,77,20,77,77,15,77,77,15,16,17,17,77,77,15,16,17,20,15,21,16,17,20,15,21,16,17,20,15,21,16,17,20,15,21,16,17,16,17,20,15,21,17,16,17,20,15,21,16,17,17,17,20,20,20,15,21,15,21,15,16,17,20,15,21,17,17,16,17,16,17,20,17,20,17,20,17,17,17,16,16,16,16,15,21,17,21,17,17,17,16,16,16,17,20,15,21,17,16,16,16,17,17,20,15,21,16,17,20,15,21,16,17,20,15,21,21,16,17,16,17,21,17,78,79,80,81,82,0,0,0,0,0,0,0,0,0,0,48,48,48,56,48,47,56,48,47,48,47,48,48,48,47,48,47,48,48,48,47,47,47,48,48,48,47,56,48,48,47,1,1,1,47,47,48,56,48,47,47,56,48,48,48,48,56,47,48,48,48,48,48,56,48,47,56,48,47,56,48,47,48,48,48,48,48,48,48,48,48,48,48,58,0,0,58,0,0,0,0,0,0,0,0,0,58,41,58,41,58,41,58,41,83,83,84,84,85,85,58,58,41,58,41,41,41,58,41,58,41,58,41,58,41,58,41,40,40,40,44,44,44,0,61,0,0,0,61,18,18,0,0,0,0,0,18,18,0,59,61,59,59,61,62,86,18,59,64,59,65,61,66,18,63,62,67,64,59,65,61,66,18,63,62,67,63,64,59,65,61,66,18,63,62,67,64,59,65,61,66,18,63,62,67,59,63,64,65,61,66,63,62,66,62,62,18,59,59,59,65,61,66,18,67,61,64,59,59,65,61,61,66,18,18,63,63,62,67,64,64,59,59,65,61,61,66,66,18,63,62,62,67,65,62,67,65,62,67,65,62,67,65,62,67,63,61,66,64,59,65,62,67,64,65,62,67,61,65,62,67,61,59,65,63,63,64,59,65,61,66,18,63,62,67,63,61,64,64,59,62,61,66,67,59,66,63,62,67,67,0,67,59,0,64,64,59,59,62,62,64,59,65,61,66,18,63,62,67,59,61,18,63,66,59,64,59,65,61,66,18,63,62,67,64,59,65,61,66,18,63,62,67,64,59,65,61,66,18,63,62,67,61,61,61,65,65,87],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[2,1],[2,1],[3,1],[3,1],[4,1],[5,1],[6,1],[7,1],[[],1],[[],1],[8,1],[8,1],[9,1],[9,1],[[],10],[[],10],[11,1],[11,1],[12,1],[13,1],[13,1],[14,1],[[],1],[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],10],[[],10],[15,10],[[],10],[[],10],[15,10],[16,16],[17,17],[17,18],[[],10],[[],10],[15,10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[16,[19,19]]],[[16,[19,19]]]],[[[17,[19]]],[[17,[19]]]],[20,20],[[[15,[19,19,19]]],[[15,[19,19,19]]]],[[[21,[19,19]]],[[21,[19,19]]]],[[]],[[]],[[]],[[]],[[]],[22,16],[23,17],[[[16,[24,24]],16],2],[[[17,[24]],[17,[24]]],2],[[20,20],2],[[[15,[24,24,24]],15],2],[[[21,[24,24]],21],2],0,[[[16,[25,25]],26],27],[[[17,[25]],26],27],[[20,26],27],[[[15,[25,25,25]],26],27],[[[21,[25,25]],26],27],[[]],[[],17],[[]],[20,17],[23,20],[23,20],[[]],[[]],[[]],[6,[[1,[[15,[28]]]]]],[7,[[1,[[21,[29]]]]]],[12,[[1,[[15,[28]]]]]],[[]],[[]],[[]],[[]],[[]],[17],[17,2],[16,2],[17,2],[16,2],[17,2],[20,2],[17,2],[20,2],[17,2],[20,2],[17,30],[17,31],[17,17],[16,16],[16,16],[16,16],[[[16,[24,24]],16],2],[[[15,[24,24,24]],15],2],[[[21,[24,24]],21],2],[[20,32],17],0,[[],33],[17],0,[16,[[10,[32]]]],[16,[[10,[17]]]],[[]],[[]],[[]],[[]],[[]],[[[17,[34]],35]],[22,[[1,[16]]]],[22,[[1,[[16,[36,37]]]]]],[[],38],[23,[[1,[[17,[37]]]]]],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],39],[[],39],[[],39],[[],39],[[],39],0,[[[16,[40,40]],41,42],43],[[[17,[40]],41,42],43],[[[16,[44,44]],41,45],46],[[[17,[44]],41,45],46],0,[[17,33],17],0,0,0,0,0,[4,35],[4,35],[4,35],[4,35],[4,35],[4,35],0,0,0,0,[[],47],[[48,49],48],[[48,50],48],[[]],[[]],[[]],[[]],[[]],[[]],[48,[[10,[51]]]],[47,[[1,[47]]]],[48,48],[[]],[49,48],[[],47],[48,11],[47],[11,48],[50,48],[48,[[10,[33]]]],[47],[47,1],[47,1],[48,48],[[48,26],27],[[48,26],27],[[47,26],27],[[]],[[]],[52,48],[[]],[7,[[1,[[1,[53]]]]]],[8,[[1,[[1,[54]]]]]],[[],[[10,[[1,[54]]]]]],[[47,1],10],[[47,55],10],[48,2],[[]],[[]],[[]],[47,[[32,[48]]]],[[]],[48,56],[48,31],[11,48],[[[32,[48]]],48],[56,[[10,[48]]]],[[47,48]],[48,33],[[]],[[],57],[31,48],[31,48],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],39],[[],39],[[],39],[13,48],[11,48],[11,48],[50,48],[11,48],[11,48],[11,48],[11,48],[11,48],[48,48],[48,35],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[58,58],[41,41],[[]],[[]],[[41,42],43],[[41,42],42],[[41,45],46],[[41,45],45],[[],42],[[],45],[[58,58],2],[[58,26],27],[[41,26],27],[[]],[[]],[58,41],[41,2],[[]],[[]],[[]],[[]],[[],38],[[],38],[[],38],[[],38],[[],39],[[],39],[[41,42],43],[[41,42],42],[[41,42],42],[[41,45],46],[[41,45],45],[[41,45],45],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[59,60],[61,61],[59,11],[59,60],[61,61],[62],[[],18],[18,18],[59,11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[63,1],[64,64],[59,59],[65,65],[[[61,[19]]],[[61,[19]]]],[66,66],[18,18],[63,63],[[[62,[19]]],[[62,[19]]]],[[[67,[19,19]]],[[67,[19,19]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[59,59],68],[63,2],[[],64],[[],65],[[],61],[[],66],[[],63],[[],[[62,[69]]]],[66],[62],[62],[18,11],[[59,59],2],[[59,57],2],[[59,11],2],[[65,65],2],[[[61,[24]],61],2],[[66,66],2],[[18,18],2],[[[67,[24,24]],67],2],[61,10],[[64,26],27],[[59,26],27],[[59,26],27],[[65,26],27],[[[61,[25]],26],27],[[[61,[49]],26],27],[[66,26],27],[[18,26],27],[[18,26],27],[[63,26],27],[[63,26],27],[[[62,[25]],26],27],[[[67,[25,25]],26],27],[2,64],[[]],[60,59],[[]],[[]],[[]],[10,61],[[]],[[[32,[50]]],66],[[]],[[]],[70,[[62,[70]]]],[[]],[[]],[4,[[1,[65]]]],[4,[[1,[[62,[71]]]]]],[4,[[1,[[67,[71,4]]]]]],[5,[[1,[65]]]],[5,[[1,[[62,[37]]]]]],[5,[[1,[[67,[37,5]]]]]],[6,[[1,[65]]]],[6,[[1,[[62,[29]]]]]],[6,[[1,[[67,[29,6]]]]]],[7,[[1,[65]]]],[7,[[1,[[62,[53]]]]]],[7,[[1,[[67,[53,7]]]]]],[72,63],[[],[[1,[[61,[54]]]]]],[[],[[1,[66]]]],[8,[[1,[64]]]],[8,[[1,[59]]]],[8,[[1,[65]]]],[8,[[1,[[62,[54]]]]]],[8,[[1,[[67,[54,8]]]]]],[[],[[10,[64]]]],[12,[[1,[65]]]],[12,[[1,[[62,[28]]]]]],[12,[[1,[[67,[28,12]]]]]],[13,[[1,[[61,[54]]]]]],[14,[[1,[65]]]],[14,[[1,[[62,[36]]]]]],[14,[[1,[[67,[36,14]]]]]],[[],[[1,[[61,[54]]]]]],[59],[65],[[63,18]],[63],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[63,2],[61,2],[64,2],[64,2],[59,59],[[62,55],62],[[[61,[24]],61],2],[[66,66],2],[[[67,[24,24]],67],2],[60,59],[[[32,[[73,[50]]]]],66],[72,63],[33,62],[[],67],0,[74,[[1,[75]]]],0,[[59,59],[[10,[68]]]],[50,57],[[],64],[64,33],[59,33],[[],33],[62,33],[62,33],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],57],[[],57],[[],57],[[],57],[66,[[32,[57]]]],[[59,35]],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[61],[[[61,[69]]],69],[61],[[65,41,42],43],[[65,41,45],46],0],"p":[[6,"Result"],[15,"bool"],[15,"char"],[3,"DeriveInput"],[3,"Field"],[4,"GenericParam"],[3,"Generics"],[4,"Meta"],[4,"NestedMeta"],[4,"Option"],[15,"str"],[3,"TypeParam"],[4,"Lit"],[3,"Variant"],[4,"GenericParam"],[4,"Data"],[3,"Fields"],[4,"Shape"],[8,"Clone"],[4,"Style"],[3,"Generics"],[4,"Data"],[4,"Fields"],[8,"PartialEq"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"FromTypeParam"],[8,"FromGenericParam"],[3,"Iter"],[15,"usize"],[3,"Vec"],[3,"Span"],[8,"ToTokens"],[3,"TokenStream"],[8,"FromVariant"],[8,"FromField"],[4,"Result"],[3,"TypeId"],[8,"UsesLifetimes"],[3,"Options"],[6,"LifetimeSet"],[6,"LifetimeRefSet"],[8,"UsesTypeParams"],[6,"IdentSet"],[6,"IdentRefSet"],[3,"Accumulator"],[3,"Error"],[8,"Display"],[3,"Path"],[8,"Error"],[3,"Error"],[8,"FromGenerics"],[8,"FromMeta"],[8,"FnOnce"],[3,"IntoIter"],[3,"String"],[4,"Purpose"],[3,"IdentString"],[3,"Ident"],[4,"Override"],[3,"SpannedValue"],[3,"ShapeSet"],[3,"Flag"],[3,"Ignored"],[3,"PathList"],[3,"WithOriginal"],[4,"Ordering"],[8,"Default"],[8,"Spanned"],[8,"FromDeriveInput"],[8,"IntoIterator"],[8,"Into"],[3,"Attribute"],[3,"MetaList"],[8,"FromAttributes"],[8,"GenericParamExt"],[13,"Enum"],[13,"Struct"],[13,"Type"],[13,"Lifetime"],[13,"Const"],[8,"CollectLifetimes"],[8,"CollectTypeParams"],[8,"GenericsExt"],[8,"AsShape"],[13,"Explicit"]]},\
"darling_macro":{"doc":"","t":[24,24,24,24,24,24,24],"n":["FromAttributes","FromDeriveInput","FromField","FromMeta","FromMetaItem","FromTypeParam","FromVariant"],"q":["darling_macro","","","","","",""],"d":["","","","","","",""],"i":[0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0],"p":[]},\
"fnv":{"doc":"An implementation of the Fowler–Noll–Vo hash function.","t":[6,6,6,3,11,11,11,11,11,11,11,11,11,11,11],"n":["FnvBuildHasher","FnvHashMap","FnvHashSet","FnvHasher","borrow","borrow_mut","default","finish","from","into","try_from","try_into","type_id","with_key","write"],"q":["fnv","","","","","","","","","","","","","",""],"d":["A builder for default FNV hashers.","A <code>HashMap</code> using a default FNV hasher.","A <code>HashSet</code> using a default FNV hasher.","An implementation of the Fowler–Noll–Vo hash function.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Create an FNV hasher starting with a state corresponding …",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,[[]],[[]],[[],1],[1,2],[[]],[[]],[[],3],[[],3],[[],4],[2,1],[1]],"p":[[3,"FnvHasher"],[15,"u64"],[4,"Result"],[3,"TypeId"]]},\
"ident_case":{"doc":"Crate for changing case of Rust identifiers.","t":[13,13,13,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CamelCase","KebabCase","LowerCase","None","PascalCase","RenameRule","ScreamingSnakeCase","SnakeCase","apply_to_field","apply_to_variant","borrow","borrow_mut","clone","clone_into","default","eq","fmt","from","from_str","into","to_owned","try_from","try_into","type_id"],"q":["ident_case","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Rename direct children to “camelCase” style.","Rename direct children to “kebab-case” style.","Rename direct children to “lowercase” style.","No-op rename rule.","Rename direct children to “PascalCase” style, as …","A casing rule for renaming Rust identifiers.","Rename direct children to “SCREAMING_SNAKE_CASE” …","Rename direct children to “snake_case” style, as …","Change case of a <code>snake_case</code> field.","Change case of a <code>PascalCase</code> variant.","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","",""],"i":[1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,0,0,0,0,[[1,[3,[2]]],4],[[1,[3,[2]]],4],[[]],[[]],[1,1],[[]],[[],1],[[1,1],5],[[1,6],7],[[]],[2,[[8,[1]]]],[[]],[[]],[[],8],[[],8],[[],9]],"p":[[4,"RenameRule"],[15,"str"],[8,"AsRef"],[3,"String"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"macropol":{"doc":"Ergonomic string literal interpolation in macro …","t":[23],"n":["macropol"],"q":["macropol"],"d":[""],"i":[0],"f":[0],"p":[]},\
"proc_macro2":{"doc":"github crates-io docs-rs","t":[13,13,13,4,3,13,3,13,13,3,3,13,13,13,3,13,4,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_character","byte_string","c_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delim_span","delimiter","eq","eq","eq","eq","extend","extend","extra","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","resolved_at","set_span","set_span","set_span","set_span","set_span","source_text","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","0","0","0","0","DelimSpan","borrow","borrow_mut","clone","clone_into","close","fmt","from","into","join","open","to_owned","try_from","try_into","type_id","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":["proc_macroproc_macro2::TokenTree","","","","proc_macro2::extra","","","","","","","","","","","","","","","proc_macro2::token_stream","","","","","","","","","","","","","","",""],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>∅ ... ∅</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte character literal.","Byte string literal.","C string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns an object that holds this group’s <code>span_open()</code> and","Returns the punctuation used as the delimiter for this …","","","","","","","Items which do not have a correspondence to any API in the …","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the source text behind a span. This preserves the …","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","","","","","An object that holds a <code>Group</code>’s <code>span_open()</code> and …","","","","","Returns a span for the closing punctuation of the group …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns a span covering the entire delimited group.","Returns a span for the opening punctuation of the group …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[11,10,10,0,0,8,0,8,11,0,0,8,10,10,0,8,0,0,0,0,1,19,7,6,8,9,10,1,11,12,4,19,7,6,8,9,10,1,11,12,4,4,4,4,6,4,7,6,8,9,10,1,11,12,4,7,6,8,9,10,1,11,12,4,12,7,9,9,10,11,12,12,7,7,0,4,4,4,4,19,19,7,7,6,8,8,9,9,10,1,1,11,12,12,4,4,19,7,7,7,6,6,8,8,8,8,8,9,10,1,11,12,4,7,7,7,4,12,4,4,4,4,4,4,4,4,4,4,19,7,6,8,9,10,1,11,12,4,7,7,4,4,6,6,6,7,9,1,12,12,12,6,8,9,1,12,4,6,1,19,8,9,1,12,4,9,9,9,4,4,7,6,8,9,10,1,11,12,4,19,7,8,9,1,12,4,0,19,7,6,8,9,10,1,11,12,4,19,7,6,8,9,10,1,11,12,4,19,7,6,8,9,10,1,11,12,4,4,4,4,4,4,4,4,4,4,4,6,4,4,42,43,44,45,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,4],[[],4],[5,4],[[],6],[2,4],[7,7],[6,6],[8,8],[9,9],[10,10],[1,1],[11,11],[12,12],[4,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[12,12],13],[[],7],[9,14],[9,10],[[10,10],15],[[11,11],15],[[12,12],15],[12,15],[[7,16]],[[7,16]],0,[17,4],[17,4],[18,4],[18,4],[[19,20],21],[[19,20],21],[[7,20],21],[[7,20],21],[[6,20],21],[[8,20],21],[[8,20],21],[[9,20],21],[[9,20],21],[[10,20],21],[[1,20],21],[[1,20],21],[[11,20],21],[[12,20],21],[[12,20],21],[[4,20],21],[[4,20],21],[[]],[[]],[22,7],[8,7],[[]],[23,6],[12,8],[[]],[9,8],[4,8],[1,8],[[]],[[]],[[]],[[]],[[]],[[]],[16,7],[16,7],[24,[[25,[7,19]]]],[24,[[25,[4,19]]]],[12],[26,4],[26,4],[27,4],[27,4],[28,4],[28,4],[29,4],[29,4],[30,4],[30,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,31],[7,15],[32,4],[32,4],[[6,6],[[33,[6]]]],[[6,6],6],[[],6],[[],7],[[10,7],9],[[2,11],1],[[24,6],12],[[24,6],12],[[12,12],[[33,[13]]]],[[6,6],6],[[8,6]],[[9,6]],[[1,6]],[[12,6]],[[4,6]],[6,[[33,[34]]]],[1,11],[19,6],[8,6],[9,6],[1,6],[12,6],[4,6],[9,6],[9,6],[9,7],[24,4],[[4,[36,[35]]],[[33,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],0,[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[38,4],[38,4],[39,4],[39,4],[40,4],[40,4],[41,4],[41,4],[3,4],[3,4],[6,23],[35,4],[35,4],0,0,0,0,0,[[]],[[]],[14,14],[[]],[14,6],[[14,20],21],[[]],[[]],[14,6],[14,6],[[]],[[],25],[[],25],[[],37],0,0,[[]],[[]],[31,31],[[]],[[31,20],21],[[]],[[]],[[]],[31,[[33,[8]]]],[31],[[]],[[],25],[[],25],[[],37]],"p":[[3,"Punct"],[15,"char"],[15,"u8"],[3,"Literal"],[3,"CStr"],[3,"Span"],[3,"TokenStream"],[4,"TokenTree"],[3,"Group"],[4,"Delimiter"],[4,"Spacing"],[3,"Ident"],[4,"Ordering"],[3,"DelimSpan"],[15,"bool"],[8,"IntoIterator"],[15,"f32"],[15,"f64"],[3,"LexError"],[3,"Formatter"],[6,"Result"],[3,"TokenStream"],[3,"Span"],[15,"str"],[4,"Result"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"IntoIter"],[15,"isize"],[4,"Option"],[3,"String"],[15,"usize"],[8,"RangeBounds"],[3,"TypeId"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[13,"Group"],[13,"Ident"],[13,"Punct"],[13,"Literal"]]},\
"quote":{"doc":"github crates-io docs-rs","t":[8,8,8,10,10,10,10,10,14,11,11,14,14,11,11,11,11,10],"n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":["quote","","","","","","","","","","","","","","","","",""],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,6,6,6,6,7,0,8,8,0,0,7,7,8,8,8],"f":[0,0,0,[[]],[[]],[[]],[[]],[1,2],0,[[],3],[[],3],0,0,[[],[[5,[4]]]],[[],[[5,[4]]]],[[],3],[[],3],[3]],"p":[[3,"Formatter"],[6,"Result"],[3,"TokenStream"],[3,"Span"],[4,"Option"],[8,"TokenStreamExt"],[8,"IdentFragment"],[8,"ToTokens"]]},\
"strsim":{"doc":"This library implements string similarity metrics.","t":[13,6,4,11,11,5,11,11,11,11,5,5,5,5,5,5,11,5,5,5,5,5,5,5,11,11,11,11],"n":["DifferentLengthArgs","HammingResult","StrSimError","borrow","borrow_mut","damerau_levenshtein","eq","fmt","fmt","from","generic_damerau_levenshtein","generic_hamming","generic_jaro","generic_jaro_winkler","generic_levenshtein","hamming","into","jaro","jaro_winkler","levenshtein","normalized_damerau_levenshtein","normalized_levenshtein","osa_distance","sorensen_dice","to_string","try_from","try_into","type_id"],"q":["strsim","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","Like optimal string alignment, but substrings can be …","","","","Returns the argument unchanged.","Like optimal string alignment, but substrings can be …","Calculates the number of positions in the two sequences …","Calculates the Jaro similarity between two sequences. The …","Like Jaro but gives a boost to sequences that have a …","Calculates the minimum number of insertions, deletions, …","Calculates the number of positions in the two strings …","Calls <code>U::from(self)</code>.","Calculates the Jaro similarity between two strings. The …","Like Jaro but gives a boost to strings that have a common …","Calculates the minimum number of insertions, deletions, …","Calculates a normalized score of the Damerau–Levenshtein …","Calculates a normalized score of the Levenshtein algorithm …","Like Levenshtein but allows for adjacent transpositions. …","Calculates a Sørensen-Dice similarity distance using …","","","",""],"i":[3,0,0,3,3,0,3,3,3,3,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,3,3,3],"f":[0,0,0,[[]],[[]],[[1,1],2],[[3,3],4],[[3,5],[[7,[6]]]],[[3,5],8],[[]],[[],2],[[],9],[[],10],[[],10],[[],2],[[1,1],9],[[]],[[1,1],10],[[1,1],10],[[1,1],2],[[1,1],10],[[1,1],10],[[1,1],2],[[1,1],10],[[],11],[[],7],[[],7],[[],12]],"p":[[15,"str"],[15,"usize"],[4,"StrSimError"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[6,"HammingResult"],[15,"f64"],[3,"String"],[3,"TypeId"]]},\
"syn":{"doc":"github crates-io docs-rs","tn":["Abi","Add","AddEq","And","AngleBracketed","AngleBracketedGenericArguments","Arm","Array","Array","Assign","AssignOp","Async","AttrStyle","Attribute","AttributeArgs","Await","BareFn","BareFnArg","BinOp","Binary","Binding","Binding","BitAnd","BitAndEq","BitOr","BitOrEq","BitXor","BitXorEq","Block","Block","Bool","BoundLifetimes","Box","Box","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closed","Closure","Const","Const","Const","Const","Const","Const","ConstParam","Constraint","Constraint","Continue","Cooked","Crate","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivEq","Enum","Enum","Eq","Eq","Error","Expr","Expr","ExprArray","ExprAssign","ExprAssignOp","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBox","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprType","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","ExternCrate","Field","Field","FieldPat","FieldValue","Fields","FieldsNamed","FieldsUnnamed","File","Float","Fn","Fn","FnArg","ForLoop","ForeignItem","ForeignItemFn","ForeignItemMacro","ForeignItemStatic","ForeignItemType","ForeignMod","Ge","GenericArgument","GenericMethodArgument","GenericParam","Generics","Glob","Group","Group","Group","Gt","HalfOpen","Ident","Ident","If","Impl","ImplGenerics","ImplItem","ImplItemConst","ImplItemMacro","ImplItemMethod","ImplItemType","ImplTrait","Index","Index","Infer","Inherited","Inner","Int","Item","Item","ItemConst","ItemEnum","ItemExternCrate","ItemFn","ItemForeignMod","ItemImpl","ItemMacro","ItemMacro2","ItemMod","ItemStatic","ItemStruct","ItemTrait","ItemTraitAlias","ItemType","ItemUnion","ItemUse","Label","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeDef","List","Lit","Lit","Lit","Lit","LitBool","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","Local","Local","Loop","Lt","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro2","MacroDelimiter","Match","Maybe","Member","Meta","Meta","MetaList","MetaNameValue","Method","Method","MethodCall","MethodTurbofish","Mod","Mul","MulEq","Name","NameValue","Named","Named","Ne","Neg","NestedMeta","Never","None","None","Not","Or","Or","Outer","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Pat","PatBox","PatIdent","PatLit","PatMacro","PatOr","PatPath","PatRange","PatReference","PatRest","PatSlice","PatStruct","PatTuple","PatTupleStruct","PatType","PatWild","Path","Path","Path","Path","Path","Path","PathArguments","PathSegment","PredicateEq","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Range","RangeLimits","Raw","Receiver","Receiver","Reference","Reference","Reference","Rem","RemEq","Rename","Repeat","Rest","Restricted","Result","Return","ReturnType","Semi","Shl","ShlEq","Shr","ShrEq","Signature","Slice","Slice","Static","Static","Stmt","Str","StrStyle","Struct","Struct","Struct","Struct","Sub","SubEq","Token","Trait","Trait","TraitAlias","TraitBound","TraitBoundModifier","TraitItem","TraitItemConst","TraitItemMacro","TraitItemMethod","TraitItemType","TraitObject","Try","TryBlock","Tuple","Tuple","Tuple","TupleStruct","Turbofish","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","Typed","UnOp","Unary","Union","Union","Unit","Unnamed","Unnamed","Unsafe","Use","UseGlob","UseGroup","UseName","UsePath","UseRename","UseTree","Variadic","Variant","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","VisCrate","VisPublic","VisRestricted","Visibility","WhereClause","WherePredicate","While","Wild","Yield","abi","abi","abi","and_token","and_token","and_token","apostrophe","args","args","args","args","arguments","arms","as_token","as_token","as_token","as_turbofish","async_token","asyncness","asyncness","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","auto_token","await_token","bang_token","bang_token","base","base","base10_digits","base10_digits","base10_parse","base10_parse","block","block","block","block","block","block","body","body","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","box_token","box_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","break_token","buffer","by_ref","capture","capture","cases","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon2_token","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","comma","cond","cond","const_params","const_params_mut","const_token","const_token","const_token","const_token","const_token","constness","content","continue_token","crate_token","crate_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","default","default","default","defaultness","defaultness","defaultness","defaultness","delimiter","discriminant","dot2_token","dot2_token","dot2_token","dot_token","dot_token","dot_token","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","elems","elems","elems","elems","else_branch","enum_token","enum_token","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","ext","extern_token","extern_token","fat_arrow_token","fields","fields","fields","fields","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","fn_token","for_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","get_ident","group_token","group_token","gt_token","gt_token","gt_token","gt_token","gt_token","guard","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hi","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","if_token","impl_token","impl_token","in_token","in_token","index","index","init","inputs","inputs","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_empty","is_ident","is_none","items","items","items","items","items","iter","iter_mut","label","label","label","label","label","label","leading_colon","leading_colon","leading_vert","left","left","left","len","len","len","let_token","let_token","lhs_ty","lifetime","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","limits","limits","lit","lit","lo","loop_token","lt_token","lt_token","lt_token","lt_token","lt_token","mac","mac","mac","mac","mac","mac","mac","macro_token","make_where_clause","match_token","member","member","member","method","mod_token","modifier","movability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","name","name","name","named","nested","new","new","new","new","new","new","new","new","new","new","new","new_raw","op","op","op","or1_token","or2_token","output","output","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args_with","parse_body","parse_body_with","parse_file","parse_inner","parse_macro_input","parse_meta","parse_mod_style","parse_named","parse_outer","parse_quote","parse_quote_spanned","parse_str","parse_unnamed","parse_with","parse_within","parse_without_eager_brace","partial_cmp","partial_cmp","pat","pat","pat","pat","pat","pat","pat","pat","pat","path","path","path","path","path","path","path","path","path","path","path","path","path","position","pound_token","predicates","pub_token","pub_token","punctuated","qself","qself","qself","question_token","raw","receiver","receiver","reference","rename","rename","rest","return_token","rhs_ty","right","right","right","rules","segments","self_token","self_ty","semi","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","shebang","sig","sig","sig","sig","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","star_token","static_token","static_token","stmts","struct_token","struct_token","style","subpat","suffix","suffix","suffix","suffix","suffix","suffix","suffix","supertraits","then_branch","to","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","token","token","token","token","token","token","token","tokens","tokens","trait_","trait_token","trait_token","tree","tree","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_token","turbofish","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","type_token","type_token","type_token","type_token","underscore_token","underscore_token","union_token","union_token","unnamed","unraw","unsafe_token","unsafety","unsafety","unsafety","unsafety","use_token","value","value","value","value","value","value","variadic","variadic","variants","variants","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","where_clause","where_token","while_token","without_plus","without_plus","without_plus","without_plus","yield_tokenursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","empty","eof","eq","from","from","group","ident","into","into","lifetime","literal","new","new2","partial_cmp","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","Error","Lookahead1","Nothing","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","combine","cursor","deref","discouraged","drop","eq","error","error","error","extend","fmt","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","hash","into","into","into","into","into","into_compile_error","into_iter","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_str","parse_terminated","peek","peek","peek2","peek3","span","span","step","to_compile_error","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Speculative","advance_to","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","empty_or_trailing","eq","extend","extend","first","first_mut","fmt","from","from","from","from","from","from","from","from","from_iter","from_iter","hash","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","punct","punct_mut","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","0","0","1","Spanned","span","Abstract","Add","AddEq","And","AndAnd","AndEq","As","Async","At","Auto","Await","Bang","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Colon2","Comma","Const","Continue","Crate","Default","Div","DivEq","Do","Dollar","Dot","Dot2","Dot3","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Mod","Move","MulEq","Mut","Ne","Or","OrEq","OrOr","Override","Paren","Pound","Priv","Pub","Question","RArrow","Ref","Rem","RemEq","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Star","Static","Struct","Sub","SubEq","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["syn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::AttrStyle","syn::BinOp","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::Data","","","syn::Expr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::Fields","","syn::FnArg","","syn::ForeignItem","","","","","syn::GenericArgument","","","","","syn::GenericMethodArgument","","syn::GenericParam","","","syn::ImplItem","","","","","syn::Item","","","","","","","","","","","","","","","","","syn::Lit","","","","","","","","syn::MacroDelimiter","","","syn::Member","","syn::Meta","","","syn::NestedMeta","","syn::Pat","","","","","","","","","","","","","","","","syn::PathArguments","","syn::RangeLimits","","syn::ReturnType","","syn::Stmt","","","","","syn::StrStyle","syn::TraitBoundModifier","syn::TraitItem","","","","","syn::Type","","","","","","","","","","","","","","","syn::TypeParamBound","","syn::UnOp","","","syn::UseTree","","","","","syn::Visibility","","","syn::WherePredicate","","","syn::buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::ext","","","","syn::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse::discouraged","","syn::punctuated","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::punctuated::Pair","","","syn::spanned","","syn::tokend":["The binary interface of a function: <code>extern &quot;C&quot;</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&amp;&amp;</code> operator (logical and)","The <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.","Angle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …","One arm of a <code>match</code> expression: <code>0...10 =&gt; { return true; }</code>.","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item and …","An attribute like <code>#[repr(transparent)]</code>.","Conventional argument type associated with an invocation …","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","An argument in a function type: the <code>usize</code> in …","A binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A binding (equality constraint) on an associated type: …","A binding (equality constraint) on an associated type: the …","The <code>&amp;</code> operator (bitwise and)","The <code>&amp;=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A braced block containing Rust statements.","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.","A box expression: <code>box f</code>.","A box pattern: <code>box v</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>&#39;a&#39;</code>.","Inclusive at the beginning and end.","A closure expression: <code>|a, b| a + b</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","A constant item: <code>const MAX: u16 = 65535</code>.","An associated constant within the definition of a trait.","An associated constant within an impl block.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","A <code>continue</code>, with an optional label.","An ordinary string like <code>&quot;data&quot;</code>.","A crate-level visibility: <code>crate</code>.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","An enum input to a <code>proc_macro_derive</code> macro.","An equality predicate in a <code>where</code> clause (unsupported).","The <code>==</code> operator (equality)","Error returned when a Syn parser cannot parse the input …","A Rust expression.","Expr without trailing semicolon.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A blocked scope: <code>{ ... }</code>.","A box expression: <code>box f</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A type ascription expression: <code>foo: f64</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A single field in a struct pattern.","A field-value pair in a struct literal.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A complete file of Rust source code.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A free-standing function: …","A foreign function in an <code>extern</code> block.","An argument in a function signature: the <code>n: usize</code> in …","A for loop: <code>for pat in expr { ... }</code>.","An item within an <code>extern</code> block.","A foreign function in an <code>extern</code> block.","A macro invocation within an extern block.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A foreign type in an <code>extern</code> block: <code>type void</code>.","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","The <code>&gt;=</code> operator (greater than or equal to)","An individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.","An individual generic argument to a method, like <code>T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration of …","A glob import in a <code>use</code> item: <code>*</code>.","An expression contained within invisible delimiters.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","A type contained within invisible delimiters.","The <code>&gt;</code> operator (greater than)","Inclusive at the beginning, exclusive at the end.","A word of Rust code, which may be a keyword or legal …","A pattern that binds a new variable: …","An <code>if</code> expression with an optional <code>else</code> block: …","An impl block providing trait or associated items: …","Returned by <code>Generics::split_for_impl</code>.","An item within an impl block.","An associated constant within an impl block.","A macro invocation within an impl block.","A method within an impl block.","An associated type within an impl block.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","Indication that a type should be inferred by the compiler: …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","Things that can appear directly inside of a module or …","An item definition.","A constant item: <code>const MAX: u16 = 65535</code>.","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A free-standing function: …","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","An impl block providing trait or associated items: …","A macro invocation, which includes <code>macro_rules!</code> …","A 2.0-style declarative macro introduced by the <code>macro</code> …","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A type alias: …","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A lifetime labeling a <code>for</code>, <code>while</code>, or <code>loop</code>.","The <code>&lt;=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A Rust lifetime: <code>&#39;a</code>.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A lifetime argument.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","A structured list within an attribute, like …","A Rust literal such as a string or integer or boolean.","A Rust literal, like the <code>&quot;new_name&quot;</code> in …","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A literal pattern: <code>0</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A character literal: <code>&#39;a&#39;</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","A local <code>let</code> binding: <code>let x: u64 = s.parse()?</code>.","A local (let) binding.","Conditionless loop: <code>loop { ... }</code>.","The <code>&lt;</code> operator (less than)","A macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A macro invocation, which includes <code>macro_rules!</code> …","A macro invocation within an extern block.","A macro invocation within the definition of a trait.","A macro invocation within an impl block.","A macro in the type position.","A macro in pattern position.","A 2.0-style declarative macro introduced by the <code>macro</code> …","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured meta item, like the <code>Copy</code> in <code>#[derive(Copy)]</code> …","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A trait method within the definition of a trait.","A method within an impl block.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","The <code>::&lt;&gt;</code> explicit type parameters passed to a method call: …","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","Element of a compile-time attribute list.","The never type: <code>!</code>.","","","The <code>!</code> operator for logical inversion","The <code>||</code> operator (logical or)","A pattern that matches any one of a set of cases.","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized type equivalent to the inner type.","The <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.","Arguments of a function path segment: the <code>(A, B) -&gt; C</code> in …","A pattern in a local binding, function signature, match …","A box pattern: <code>box v</code>.","A pattern that binds a new variable: …","A literal pattern: <code>0</code>.","A macro in pattern position.","A pattern that matches any one of a set of cases.","A path pattern like <code>Color::Red</code>, optionally qualified with a","A range pattern: <code>1..=2</code>.","A reference pattern: <code>&amp;mut var</code>.","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","A type ascription pattern: <code>foo: f64</code>.","A pattern that matches any value: <code>_</code>.","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A path pattern like <code>Color::Red</code>, optionally qualified with a","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","An equality predicate in a <code>where</code> clause (unsupported).","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A range pattern: <code>1..=2</code>.","Limit types of a range, inclusive or exclusive.","A raw string like <code>r##&quot;data&quot;##</code>.","The <code>self</code> argument of an associated method, whether taken …","The <code>self</code> argument of an associated method, whether taken …","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A reference pattern: <code>&amp;mut var</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An renamed identifier imported by a <code>use</code> item: …","An array literal constructed from one repeated element: …","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","Expression with trailing semicolon.","The <code>&lt;&lt;</code> operator (shift left)","The <code>&lt;&lt;=</code> operator","The <code>&gt;&gt;</code> operator (shift right)","The <code>&gt;&gt;=</code> operator","A function signature in a trait or implementation: …","A dynamically sized slice type: <code>[T]</code>.","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A statement, usually ending in a semicolon.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","The style of a string literal, either plain quoted or a …","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A struct input to a <code>proc_macro_derive</code> macro.","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code> …","An item declaration within the definition of a trait.","An associated constant within the definition of a trait.","A macro invocation within the definition of a trait.","A trait method within the definition of a trait.","An associated type within the definition of a trait.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple type: <code>(A, B, C, String)</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A type ascription expression: <code>foo: f64</code>.","A type argument.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A type predicate in a <code>where</code> clause: …","A type alias: …","A foreign type in an <code>extern</code> block: <code>type void</code>.","An associated type within the definition of a trait.","An associated type within an impl block.","A particular type is returned.","A type ascription pattern: <code>foo: f64</code>.","A type argument.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A tuple type: <code>(A, B, C, String)</code>.","A function argument accepted by pattern and type.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","An untagged union input to a <code>proc_macro_derive</code> macro.","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A glob import in a <code>use</code> item: <code>*</code>.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","An renamed identifier imported by a <code>use</code> item: …","A suffix of an import tree in a <code>use</code> item: <code>Type as Renamed</code> …","The variadic argument of a foreign function.","An enum variant.","Tokens in expression position not interpreted by Syn.","Tokens forming an item not interpreted by Syn.","Tokens in an <code>extern</code> block not interpreted by Syn.","Tokens within the definition of a trait not interpreted by …","Tokens within an impl block not interpreted by Syn.","A raw token literal not interpreted by Syn.","Tokens in type position not interpreted by Syn.","Tokens in pattern position not interpreted by Syn.","A crate-level visibility: <code>crate</code>.","A public visibility level: <code>pub</code>.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.","A while loop: <code>while expr { ... }</code>.","A pattern that matches any value: <code>_</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","","","","","","","","","Turn a type’s generics like <code>&lt;X, Y&gt;</code> into a turbofish like …","","","","Attributes tagged on the variant.","Attributes tagged on the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attributes tagged on the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attributes tagged on the whole struct or enum.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses the literal into a selected number type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type being bounded","","","Trait and lifetime bounds (<code>Clone+Send+&#39;static</code>)","","","","","","","","","","","","","","","","","","","","Parse a set of curly braces and expose their content to …","","","","","","","","Parse a set of square brackets and expose their content to …","","A stably addressed token buffer supporting efficient …he colon in <code>Struct { x: x }</code>. If written in shorthand like …","","","","","","","","","","","","","","","","","","","","Returns an Iterator&lt;Item = &amp;ConstParam&gt; over the constant …","Returns an Iterator&lt;Item = &amp;mut ConstParam&gt; over the …","","","","","","","","","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","Data within the struct or enum.","","","","","","","","","","","","","","Explicit discriminant: <code>Variant = 1</codealue of the field.","","","","","Extension traits to provide parsing methods on foreign …","","","","Content stored in the varianteturns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Generics required to complete the definition.","If this path consists of a single ident, returns the identame of the variant.","Name of the field, if any.","","","","","","The <code>example</code> in <code>macro_rules! example { ... }</code>.","","","","","","","","","","","","","","","","","","","Name of the struct or enum.","","","","","","","","","","","","","","","","<code>(A, B)</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to the …","","","","","","","Get an iterator over the borrowed <code>Field</code> items in this …","Get an iterator over the mutably borrowed <code>Field</code> items in …","","","","","","","","","","","","","Returns the number of fields.","","","","","","","","","","Returns an Iterator&lt;Item = &amp;LifetimeDef&gt; over the lifetime …","","The <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator&lt;Item = &amp;mut LifetimeDef&gt; over the …","","","","","","","","","","","","","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","","Name or index of the field.","","","","","","","","","","","","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Panics","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","","","","","","","<code>C</code>","","","","","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a syntax …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","Parse the arguments to the attribute using the given …","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parse the content of a file of Rust code.","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parses the content of the attribute, consisting of the …","Parse a <code>Path</code> containing no path arguments on any of its …","Parses a named (braced struct) field.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","This macro is <code>parse_quote!</code> + <code>quote_spanned!</code>.","Parse a string of Rust code into the chosen syntax tree …","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","Parse the body of a block as zero or more statements, …","An alternative to the primary <code>Expr::parse</code> parser (from the …","","","","","","","","","","","","Returns the identifier that begins this structured meta …","","","","","","","The <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","","","","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","","","","A method’s <code>self</code> receiver, such as <code>&amp;self</code> or …","","","","","","","","","","","","","","The Self type of the impl.","","","","","","","","","","","","","","","","","","","","","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","","","","","","","","Returns the span of this <code>Ident</codetrait that can provide the <code>Span</code> of the complete contents …","Split a type’s generics into the pieces required for impl…","","","","","Statements in a blockokens representing Rust punctuation, keywords, and …","","","","","","","","","","Trait this impl implementsype of the fieldeturns an Iterator&lt;Item = &amp;TypeParam&gt; over the type …","Returns an Iterator&lt;Item = &amp;mut TypeParam&gt; over the type …","","","","","","","","","","","","","","","","","","","","","","","","","","","Visibility of the field.","","","","","","","","","","","","","","","","","","","","Visibility of the struct or enum.","","","","In some positions, types may not contain the <code>+</code> character, …cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple times, …","Creates a cursor referencing the first token in the buffer …","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the end …","","Returns the argument unchanged.","Returns the argument unchanged.","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","","If the cursor is pointing at a <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or <code>Span::call_site()</code>…","","Copies all remaining tokens visible from this cursor into a","If the cursor is pointing at a <code>TokenTree</code>, returns it along …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of an …","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular syntax …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","","Forks a parse stream so that parsing tokens out of either …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Render the error as an invocation of <code>compile_error!</code>.","","","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","Returns the <code>Span</code> of the next token in the parse stream, or …","The source location of the error.","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair&lt;T, P&gt;</code>.","An iterator over borrowed values of type <code>&amp;T</code>.","An iterator over mutably borrowed values of type <code>&amp;mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair&lt;&amp;T, &amp;P&gt;</code>.","An iterator over mutably borrowed pairs of type …","A punctuated sequence of syntax tree nodes of type <code>T</code> …","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it has …","","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Inserts an element at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this punctuated …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and an …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given parse …","Removes the last punctuated pair from this sequence, or …","Borrows the punctuation from this punctuated pair, unless …","Mutably borrows the punctuation from this punctuated pair, …","Appends a syntax tree node onto the end of this punctuated …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this punctuated …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","","","","A trait that can provide the <code>Span</code> of the complete contents …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>+</code>","<code>+=</code>","<code>&amp;</code>","<code>&amp;&amp;</code>","<code>&amp;=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>!</code>","<code>become</code>","<code>box</code>","<code>{...}</code>","<code>[...]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>::</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>/</code>","<code>/=</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=&gt;</code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>&gt;=</code>","None-delimited group","<code>&gt;</code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code>&lt;-</code>","<code>&lt;=</code>","<code>let</code>","<code>loop</code>","<code>&lt;</code>","<code>macro</code>","<code>match</code>","<code>mod</code>","<code>move</code>","<code>*=</code>","<code>mut</code>","<code>!=</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(...)</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-&gt;</code>","<code>ref</code>","<code>%</code>","<code>%=</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code>&lt;&lt;</code>","<code>&lt;&lt;=</code>","<code>&gt;&gt;</code>","<code>&gt;&gt;=</code>","<code>*</code>","<code>static</code>","<code>struct</code>","<code>-</code>","<code>-=</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codei":[0,142,142,142,185,0,0,25,147,25,25,25,0,0,0,25,147,0,0,25,0,186,142,142,142,142,142,142,0,25,129,0,25,166,136,136,25,129,129,25,25,129,72,25,68,74,87,115,120,186,0,0,186,25,337,21,0,0,0,0,165,143,0,142,142,87,138,83,142,0,0,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,0,25,0,0,0,0,0,0,129,87,110,0,25,0,0,0,0,0,87,142,0,0,0,0,104,25,104,147,142,72,0,166,25,87,0,0,0,0,0,0,147,0,25,147,21,11,129,0,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,25,0,74,79,83,186,0,12,0,15,25,166,0,0,0,0,0,0,0,0,145,25,142,0,25,87,110,115,120,147,166,87,0,25,81,0,0,15,0,0,115,120,25,0,87,142,142,104,12,17,65,142,143,0,147,81,185,143,142,166,11,25,136,147,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,25,104,147,166,0,0,0,0,0,147,21,0,25,166,0,337,0,126,25,147,166,142,142,104,25,166,21,0,25,0,145,142,142,142,142,0,147,166,87,110,0,129,0,25,87,138,166,142,142,0,79,87,87,0,0,0,0,0,0,0,147,25,25,25,147,166,166,0,0,25,68,74,83,87,110,115,120,165,166,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,0,25,87,138,17,17,65,25,87,0,0,0,0,0,0,0,0,25,87,110,115,120,129,147,166,0,0,0,0,0,0,25,166,25,92,125,149,53,158,174,9,35,49,67,187,184,48,36,107,191,1,29,37,125,16,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,69,71,75,76,77,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,111,112,113,114,116,117,118,119,121,122,123,124,127,128,137,146,163,164,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,99,30,135,154,30,39,3,5,3,5,29,32,58,62,91,122,37,40,46,63,71,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,337,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,337,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,84,75,76,84,85,100,118,151,160,189,33,167,18,48,56,89,92,93,99,109,140,144,177,0,10,26,43,54,148,159,176,0,34,0,168,29,37,171,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,9,67,105,187,20,60,69,70,75,76,77,84,85,88,97,99,112,116,118,121,180,182,189,71,42,63,73,73,77,88,116,121,157,125,96,38,23,90,0,0,137,73,78,185,75,77,116,117,118,93,121,122,123,135,16,56,175,177,30,39,49,164,160,148,150,155,157,158,159,26,59,161,176,178,42,89,140,7,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,14,27,44,75,77,86,88,97,100,101,121,123,188,33,34,36,40,41,43,44,48,50,53,54,55,57,60,61,64,69,88,97,121,169,0,90,162,71,16,56,98,102,139,141,177,7,7,7,8,1,2,9,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,65,66,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,3,5,5,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,125,149,40,78,7,7,7,7,7,7,7,8,1,2,9,10,11,12,12,12,12,13,14,15,15,15,16,17,17,17,18,19,20,21,21,21,21,22,23,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,65,65,65,66,66,67,68,69,70,71,72,73,74,74,74,74,75,75,76,77,78,79,79,79,80,81,82,83,83,83,83,84,85,86,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,104,104,104,104,104,105,106,107,108,109,110,110,110,110,110,111,112,113,114,115,115,115,115,115,116,117,118,119,120,120,120,120,120,121,122,123,124,125,126,126,126,127,128,129,129,129,129,129,129,129,129,130,131,132,133,3,3,5,5,134,337,135,136,137,137,137,137,138,138,138,138,139,140,141,142,143,144,145,146,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,183,184,184,185,186,187,188,189,190,191,52,35,89,93,98,99,100,101,102,118,123,125,137,183,41,150,67,73,78,187,191,71,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,173,9,16,20,75,77,88,89,90,94,95,96,97,98,99,100,101,102,105,106,107,112,113,116,118,121,123,125,137,168,184,188,189,42,93,151,24,40,43,66,146,37,125,149,190,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,337,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,17,17,17,17,185,183,185,92,93,99,109,128,17,17,32,34,38,40,46,63,103,183,171,27,28,31,17,54,148,44,146,86,127,76,85,158,73,78,80,84,149,73,52,173,14,45,173,46,67,73,78,187,191,47,94,114,119,124,153,170,95,73,48,39,69,182,49,96,80,37,53,97,112,127,157,158,168,174,70,162,163,18,13,7,9,76,129,130,131,132,133,3,5,134,7,28,31,61,37,37,37,125,149,190,73,13,19,24,35,49,50,59,80,125,149,155,161,178,190,0,0,0,7,9,12,13,14,15,16,18,19,21,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,130,131,132,133,3,5,134,135,137,142,143,144,145,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,183,184,186,187,188,189,190,0,7,10,10,135,135,0,10,0,10,183,20,10,0,0,0,20,130,144,25,7,9,40,44,71,146,167,174,179,180,182,12,10,13,14,24,51,56,80,135,156,172,177,179,191,10,82,22,24,0,51,156,172,57,53,125,49,127,90,107,56,55,86,27,28,31,95,183,127,93,96,54,88,90,94,97,98,100,101,103,111,112,113,114,116,117,118,119,121,123,124,139,146,148,7,9,129,130,131,132,133,3,5,134,128,91,111,117,122,7,7,7,8,1,2,9,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,65,66,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,129,130,130,131,131,132,132,133,133,3,3,5,5,134,134,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,66,134,0,73,108,157,97,112,144,98,139,10,168,129,130,131,132,133,3,5,99,42,52,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,9,3,5,7,8,1,2,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,0,130,131,132,133,3,5,134,10,135,93,99,100,103,105,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,337,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,337,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,58,49,20,36,60,77,88,97,101,112,116,121,123,163,180,188,191,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,337,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,73,73,101,113,118,123,152,181,102,141,19,7,62,93,99,125,149,103,130,131,132,133,134,134,125,149,89,140,20,88,89,90,91,95,96,97,98,99,100,101,102,103,111,112,113,121,122,123,137,73,82,63,147,151,160,165,64,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,489,490,491,492,493,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,0,0,220,220,221,220,221,221,221,221,221,221,220,221,221,221,220,221,221,221,220,220,221,221,221,221,221,221,220,221,220,221,220,221,0,532,532,532,0,0,0,216,0,0,0,0,0,0,0,223,227,223,224,226,225,227,223,224,226,225,223,224,225,224,225,225,223,224,0,223,226,227,223,224,225,223,223,226,225,225,223,227,223,224,226,225,225,226,227,223,224,226,225,225,225,225,223,223,225,225,213,223,216,226,216,216,223,227,223,223,223,223,225,223,225,224,225,223,225,227,223,224,226,225,227,223,224,226,225,227,223,224,226,225,0,533,237,0,0,0,0,0,0,0,0,237,232,234,239,235,236,207,208,237,232,234,239,235,236,207,208,237,232,232,234,235,236,207,237,232,234,235,236,207,237,232,232,232,232,232,232,232,232,232,234,239,235,236,207,208,237,232,232,232,232,232,232,232,234,239,235,236,207,208,237,232,232,232,234,239,235,236,207,208,232,237,237,232,232,232,232,232,232,234,239,235,236,207,208,232,237,234,239,235,236,207,208,234,239,235,236,207,208,232,232,232,232,232,232,232,237,237,232,232,232,234,239,235,236,207,208,232,237,232,234,235,236,207,237,232,237,232,232,234,239,235,236,207,208,237,232,234,239,235,236,207,208,237,232,234,239,235,236,207,208,237,237,237,534,535,534,0,536,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,203,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,200,198,273,274,201,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,199,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,203,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,200,198,273,274,201,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,199,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,203,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,200,198,273,274,201,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,199,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,203,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,200,198,273,274,201,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,199,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,203,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,200,198,273,274,201,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,199,287,289,292,293,294,296,298,299,301,302,306,309,311,314,317,318,321,324,329,330,332,199,287,289,292,293,294,296,298,299,301,302,306,309,311,314,317,318,321,324,329,330,332,199,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,203,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,200,198,273,274,201,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,199,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,203,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,200,198,273,274,201,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,199,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,203,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,200,198,273,274,201,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,199,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,203,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,200,198,273,274,201,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,199,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,203,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,200,198,273,274,201,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,199,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,203,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,200,198,273,274,201,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,199,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,203,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,200,198,273,274,201,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,203,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,200,198,273,274,201,275,276,277,278,279,280,281,282,283,284,285,286,333,334,335,336,199,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,199,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,203,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,200,198,273,274,201,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,199,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,203,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,200,198,273,274,201,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,199,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,203,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,200,198,273,274,201,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,199,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,203,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,200,198,273,274,201,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,199,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,203,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,200,198,273,274,201,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336],"fp":[[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitInt"],[15,"str"],[3,"LitFloat"],[6,"Result"],[3,"Ident"],[3,"ImplGenerics"],[3,"Lifetime"],[3,"Attribute"],[4,"AttrStyle"],[4,"Meta"],[3,"MetaList"],[3,"MetaNameValue"],[4,"NestedMeta"],[3,"Variant"],[4,"Fields"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Field"],[4,"Visibility"],[3,"VisPublic"],[3,"VisCrate"],[3,"VisRestricted"],[4,"Expr"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprAsync"],[3,"ExprAwait"],[3,"ExprBinary"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprIndex"],[3,"ExprLet"],[3,"ExprLit"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTryBlock"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnary"],[3,"ExprUnsafe"],[3,"ExprWhile"],[3,"ExprYield"],[4,"Member"],[3,"Index"],[3,"MethodTurbofish"],[4,"GenericMethodArgument"],[3,"FieldValue"],[3,"Label"],[3,"Arm"],[4,"RangeLimits"],[3,"Generics"],[4,"GenericParam"],[3,"TypeParam"],[3,"LifetimeDef"],[3,"ConstParam"],[3,"BoundLifetimes"],[4,"TypeParamBound"],[3,"TraitBound"],[4,"TraitBoundModifier"],[3,"WhereClause"],[4,"WherePredicate"],[3,"PredicateType"],[3,"PredicateLifetime"],[3,"PredicateEq"],[4,"Item"],[3,"ItemConst"],[3,"ItemEnum"],[3,"ItemExternCrate"],[3,"ItemFn"],[3,"ItemForeignMod"],[3,"ItemImpl"],[3,"ItemMacro"],[3,"ItemMacro2"],[3,"ItemMod"],[3,"ItemStatic"],[3,"ItemStruct"],[3,"ItemTrait"],[3,"ItemTraitAlias"],[3,"ItemType"],[3,"ItemUnion"],[3,"ItemUse"],[4,"UseTree"],[3,"UsePath"],[3,"UseName"],[3,"UseRename"],[3,"UseGlob"],[3,"UseGroup"],[4,"ForeignItem"],[3,"ForeignItemFn"],[3,"ForeignItemStatic"],[3,"ForeignItemType"],[3,"ForeignItemMacro"],[4,"TraitItem"],[3,"TraitItemConst"],[3,"TraitItemMethod"],[3,"TraitItemType"],[3,"TraitItemMacro"],[4,"ImplItem"],[3,"ImplItemConst"],[3,"ImplItemMethod"],[3,"ImplItemType"],[3,"ImplItemMacro"],[3,"Signature"],[4,"FnArg"],[3,"Receiver"],[3,"File"],[4,"Lit"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitBool"],[3,"Macro"],[4,"MacroDelimiter"],[3,"DeriveInput"],[4,"Data"],[3,"DataStruct"],[3,"DataEnum"],[3,"DataUnion"],[4,"BinOp"],[4,"UnOp"],[3,"Block"],[4,"Stmt"],[3,"Local"],[4,"Type"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"Abi"],[3,"BareFnArg"],[3,"Variadic"],[4,"ReturnType"],[4,"Pat"],[3,"PatBox"],[3,"PatIdent"],[3,"PatLit"],[3,"PatMacro"],[3,"PatOr"],[3,"PatPath"],[3,"PatRange"],[3,"PatReference"],[3,"PatRest"],[3,"PatSlice"],[3,"PatStruct"],[3,"PatTuple"],[3,"PatTupleStruct"],[3,"PatType"],[3,"PatWild"],[3,"FieldPat"],[3,"Path"],[3,"PathSegment"],[4,"PathArguments"],[4,"GenericArgument"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[3,"QSelf"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[3,"SelfValue"],[3,"Underscore"],[3,"SelfType"],[3,"Super"],[3,"Crate"],[3,"Extern"],[15,"usize"],[3,"Literal"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"Span"],[15,"u8"],[15,"char"],[3,"TokenStream"],[8,"Parse"],[6,"ParseStream"],[3,"TokenStream"],[8,"Parser"],[3,"Vec"],[3,"String"],[3,"TypeId"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Delimiter"],[3,"ParseBuffer"],[3,"StepCursor"],[3,"Error"],[3,"Nothing"],[3,"Lookahead1"],[8,"Display"],[8,"IntoIterator"],[3,"LexError"],[8,"ToTokens"],[3,"Punctuated"],[8,"Peek"],[3,"Pairs"],[3,"IntoPairs"],[3,"IntoIter"],[4,"Pair"],[8,"Debug"],[3,"PairsMut"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Await"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Static"],[3,"Struct"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[4,"StrStyle"],[13,"Inner"],[13,"Add"],[13,"Sub"],[13,"Mul"],[13,"Div"],[13,"Rem"],[13,"And"],[13,"Or"],[13,"BitXor"],[13,"BitAnd"],[13,"BitOr"],[13,"Shl"],[13,"Shr"],[13,"Eq"],[13,"Lt"],[13,"Le"],[13,"Ne"],[13,"Ge"],[13,"Gt"],[13,"AddEq"],[13,"SubEq"],[13,"MulEq"],[13,"DivEq"],[13,"RemEq"],[13,"BitXorEq"],[13,"BitAndEq"],[13,"BitOrEq"],[13,"ShlEq"],[13,"ShrEq"],[13,"Struct"],[13,"Enum"],[13,"Union"],[13,"Array"],[13,"Assign"],[13,"AssignOp"],[13,"Async"],[13,"Await"],[13,"Binary"],[13,"Block"],[13,"Box"],[13,"Break"],[13,"Call"],[13,"Cast"],[13,"Closure"],[13,"Continue"],[13,"Field"],[13,"ForLoop"],[13,"Group"],[13,"If"],[13,"Index"],[13,"Let"],[13,"Lit"],[13,"Loop"],[13,"Macro"],[13,"Match"],[13,"MethodCall"],[13,"Paren"],[13,"Path"],[13,"Range"],[13,"Reference"],[13,"Repeat"],[13,"Return"],[13,"Struct"],[13,"Try"],[13,"TryBlock"],[13,"Tuple"],[13,"Type"],[13,"Unary"],[13,"Unsafe"],[13,"Verbatim"],[13,"While"],[13,"Yield"],[13,"Named"],[13,"Unnamed"],[13,"Receiver"],[13,"Typed"],[13,"Fn"],[13,"Static"],[13,"Type"],[13,"Macro"],[13,"Verbatim"],[13,"Lifetime"],[13,"Type"],[13,"Const"],[13,"Binding"],[13,"Constraint"],[13,"Type"],[13,"Const"],[13,"Type"],[13,"Lifetime"],[13,"Const"],[13,"Const"],[13,"Method"],[13,"Type"],[13,"Macro"],[13,"Verbatim"],[13,"Const"],[13,"Enum"],[13,"ExternCrate"],[13,"Fn"],[13,"ForeignMod"],[13,"Impl"],[13,"Macro"],[13,"Macro2"],[13,"Mod"],[13,"Static"],[13,"Struct"],[13,"Trait"],[13,"TraitAlias"],[13,"Type"],[13,"Union"],[13,"Use"],[13,"Verbatim"],[13,"Str"],[13,"ByteStr"],[13,"Byte"],[13,"Char"],[13,"Int"],[13,"Float"],[13,"Bool"],[13,"Verbatim"],[13,"Paren"],[13,"Brace"],[13,"Bracket"],[13,"Named"],[13,"Unnamed"],[13,"Path"],[13,"List"],[13,"NameValue"],[13,"Meta"],[13,"Lit"],[13,"Box"],[13,"Ident"],[13,"Lit"],[13,"Macro"],[13,"Or"],[13,"Path"],[13,"Range"],[13,"Reference"],[13,"Rest"],[13,"Slice"],[13,"Struct"],[13,"Tuple"],[13,"TupleStruct"],[13,"Type"],[13,"Verbatim"],[13,"Wild"],[13,"AngleBracketed"],[13,"Parenthesized"],[13,"HalfOpen"],[13,"Closed"],[13,"Type"],[13,"Local"],[13,"Item"],[13,"Expr"],[13,"Semi"],[13,"Raw"],[13,"Maybe"],[13,"Const"],[13,"Method"],[13,"Type"],[13,"Macro"],[13,"Verbatim"],[13,"Array"],[13,"BareFn"],[13,"Group"],[13,"ImplTrait"],[13,"Infer"],[13,"Macro"],[13,"Never"],[13,"Paren"],[13,"Path"],[13,"Ptr"],[13,"Reference"],[13,"Slice"],[13,"TraitObject"],[13,"Tuple"],[13,"Verbatim"],[13,"Trait"],[13,"Lifetime"],[13,"Deref"],[13,"Not"],[13,"Neg"],[13,"Path"],[13,"Name"],[13,"Rename"],[13,"Glob"],[13,"Group"],[13,"Public"],[13,"Crate"],[13,"Restricted"],[13,"Type"],[13,"Lifetime"],[13,"Eq"],[8,"IdentExt"],[8,"Speculative"],[13,"Punctuated"],[13,"End"],[8,"Spanned"]]},\
"tock_registers":{"doc":"Tock Register Interface","t":[3,8,8,11,14,11,11,11,0,11,11,11,0,11,11,0,11,11,11,11,11,11,14,14,14,14,0,11,14,11,11,11,11,10,16,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,12,16,16,16,8,8,16,16,16,8,11,10,11,11,11,10,11,11,11,10,11,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["LocalRegisterCopy","RegisterLongName","UIntLike","bitand","bitmask","borrow","borrow_mut","clone","fields","fmt","from","get","interfaces","into","is_set","macros","matches_all","matches_any","modify","new","read","read_as_enum","register_bitfields","register_bitmasks","register_fields","register_structs","registers","set","test_fields","try_from","try_into","type_id","write","zero","EnumType","Field","FieldValue","TryFromValue","add","add_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","from","from","into","into","is_set","mask","mask","matches_all","matches_any","modify","new","new","new","new","new","new","new","read","read","read_as_enum","shift","try_from","try_from","try_from","try_into","try_into","type_id","type_id","val","val","val","val","val","val","value","R","R","R","ReadWriteable","Readable","T","T","T","Writeable","extract","get","is_set","matches_all","matches_any","modify","modify_no_read","read","read_as_enum","set","write","Aliased","InMemoryRegister","ReadOnly","ReadWrite","WriteOnly","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","get","get","get","get","into","into","into","into","into","modify","modify","modify","new","set","set","set","set","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":["tock_registers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tock_registers::fields","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tock_registers::interfaces","","","","","","","","","","","","","","","","","","","","tock_registers::registers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A read-write copy of register contents.","Descriptive name for each register.","Trait representing the base type of registers.","Do a bitwise AND operation of the stored value and the …","Helper macro for computing bitmask of variable number of …","","","","Register bitfield types and macros","","Returns the argument unchanged.","Get the raw register value","Interfaces (traits) to register types","Calls <code>U::from(self)</code>.","Check if one or more bits in a field are set","Macros for cleanly defining peripheral registers.","Check if all specified parts of a field match","Check if any specified parts of a field match","Write the value of one or more fields, leaving the other …","","Read the value of the given field","Read value of the given field as an enum member","Define register types and fields.","Helper macro for defining register fields.","","","Implementation of included register types.","Set the raw register value","","","","","Write the value of one or more fields, overwriting the …","Return the representation of the value <code>0</code> in the …","","Specific section of a register.","Values for the specific register fields.","Conversion of raw register value into enumerated values …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if one or more bits in a field are set","Get the raw bitmask represented by this FieldValue.","","Check if all specified parts of a field match","Check if any specified parts of a field match","Modify fields in a register value","","","","","","","","","","Read value of the field as an enum member","","","","","","","","","","","","","","","","","","","<code>Readable</code> and <code>Writeable</code> register, over the same …","Readable register","","","","Writeable register","Make a local copy of the register","Get the raw register value","Check if one or more bits in a field are set","Check if all specified parts of a field match","Check if any specified parts of a field match","Write the value of one or more fields, leaving the other …","Write the value of one or more fields, maintaining the …","Read the value of the given field","Set the raw register value","Set the raw register value","Write the value of one or more fields, overwriting the …","Read-only and write-only registers aliased to the same …","In memory volatile register.","Read-only registers.","Read/Write registers.","Write-only registers.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,3,0,3,3,3,0,3,3,3,0,3,3,0,3,3,3,3,3,3,0,0,0,0,0,3,0,3,3,3,3,1,11,0,0,0,10,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,10,10,8,10,10,10,10,10,10,8,10,8,8,11,8,10,8,10,8,10,8,8,8,8,8,8,10,26,27,28,0,0,26,27,28,0,26,26,26,26,26,28,27,26,26,27,27,0,0,0,0,0,21,22,25,23,24,21,22,25,23,24,21,22,25,23,24,21,22,23,24,21,22,25,23,24,21,23,24,24,21,25,23,24,21,22,25,23,24,21,22,25,23,24,21,22,25,23,24],"f":[0,0,0,[[[3,[1,2]],1],[[3,[1,2]]]],0,[[]],[[]],[[[3,[[0,[4,1]],[0,[4,2]]]]],[[3,[[0,[4,1]],[0,[4,2]]]]]],0,[[[3,[[0,[1,5]],2]],6],7],[[]],[[[3,[1,2]]],1],0,[[]],[[[3,[1,2]],[8,[1,2]]],9],0,[[[3,[1,2]],[10,[1,2]]],9],[[[3,[1,2]],[10,[1,2]]],9],[[[3,[1,2]],[10,[1,2]]]],[1,[[3,[1,2]]]],[[[3,[1,2]],[8,[1,2]]],1],[[[3,[1,2]],[8,[1,2]]],[[12,[[11,[1]]]]]],0,0,0,0,0,[[[3,[1,2]],1]],0,[[],13],[[],13],[[],14],[[[3,[1,2]],[10,[1,2]]]],[[]],0,0,0,0,[[[10,[1,2]],[10,[1,2]]],[[10,[1,2]]]],[[[10,[1,2]],[10,[1,2]]]],[[]],[[]],[[]],[[]],[[[8,[1,2]]],[[8,[1,2]]]],[[[10,[[0,[4,1]],[0,[4,2]]]]],[[10,[[0,[4,1]],[0,[4,2]]]]]],[[]],[[]],[[]],[[]],[[[8,[1,2]],1],9],[[[10,[1,2]]],1],0,[[[10,[1,2]],1],9],[[[10,[1,2]],1],9],[[[10,[1,2]],1],1],[[1,15],[[8,[1,2]]]],[[15,15,15],[[10,[15,2]]]],[[16,15,16],[[10,[16,2]]]],[[17,15,17],[[10,[17,2]]]],[[18,15,18],[[10,[18,2]]]],[[19,15,19],[[10,[19,2]]]],[[20,15,20],[[10,[20,2]]]],[[[8,[1,2]],1],1],[[[10,[1,2]],[8,[1,2]]],1],[[[8,[1,2]],1],[[12,[[11,[1]]]]]],0,[[],12],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[[8,[15,2]],15],[[10,[15,2]]]],[[[8,[17,2]],17],[[10,[17,2]]]],[[[8,[16,2]],16],[[10,[16,2]]]],[[[8,[18,2]],18],[[10,[18,2]]]],[[[8,[19,2]],19],[[10,[19,2]]]],[[[8,[20,2]],20],[[10,[20,2]]]],0,0,0,0,0,0,0,0,0,0,[[],3],[[]],[8,9],[10,9],[10,9],[10],[[3,10]],[8],[8,[[12,[11]]]],[[]],[10],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[21,[1,2]]]],[[[22,[1,2]]],1],[[[23,[1,2,2]]]],[[[24,[1,2]]]],[[]],[[]],[[]],[[]],[[]],[10],[10],[10],[1,[[24,[1,2]]]],[[[21,[1,2]],1]],[[[25,[1,2]],1]],[[[23,[1,2,2]]]],[[[24,[1,2]],1]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14]],"p":[[8,"UIntLike"],[8,"RegisterLongName"],[3,"LocalRegisterCopy"],[8,"Clone"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Field"],[15,"bool"],[3,"FieldValue"],[8,"TryFromValue"],[4,"Option"],[4,"Result"],[3,"TypeId"],[15,"usize"],[15,"u128"],[15,"u64"],[15,"u32"],[15,"u16"],[15,"u8"],[3,"ReadWrite"],[3,"ReadOnly"],[3,"Aliased"],[3,"InMemoryRegister"],[3,"WriteOnly"],[8,"Readable"],[8,"Writeable"],[8,"ReadWriteable"]]},\
"unicode_ident":{"doc":"github crates-io docs-rs","t":[5,5],"n":["is_xid_continue","is_xid_start"],"q":["unicode_ident",""],"d":["",""],"i":[0,0],"f":[[1,2],[1,2]],"p":[[15,"char"],[15,"bool"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
